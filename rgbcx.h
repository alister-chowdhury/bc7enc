// rgbcx.h
// High-performance scalar BC1-5 encoders. Public Domain or MIT license (you choose - see below), written by Richard Geldreich 2020 <richgel99@gmail.com>.
// Influential references:
// http://sjbrown.co.uk/2006/01/19/dxt-compression-techniques/
// https://github.com/nothings/stb/blob/master/stb_dxt.h
// https://gist.github.com/castano/c92c7626f288f9e99e158520b14a61cf
//
// This is a single header file library. Be sure to "#define RGBCX_IMPLEMENTATION" in one .cpp file somewhere.
//
// encode_bc1_init() MUST be called before encoding any blocks.
//
#ifndef RGBCX_INCLUDE_H
#define RGBCX_INCLUDE_H

#include <stdlib.h>
#include <stdint.h>
#include <algorithm>
#include <assert.h>
#include <limits.h>

namespace rgbcx
{
	// Encode_bc1_init() MUST be called once before using the BC1 encoder.
	void encode_bc1_init();

	void encode_bc1_solid_block(void* pDst, uint32_t fr, uint32_t fg, uint32_t fb);

	enum
	{
		cEncodeBC1UsePCA = 1,
		cEncodeBC1UseLikelyTotalOrderings = 2,
		cEncodeBC1HighQuality = 4
	};

	// Level 0 is similar to stb_dxt default quality.
	const uint32_t LEVEL0_OPTIONS = cEncodeBC1UsePCA;
	// Level 0 is similar to stb_dxt HIGHQUAL.
	const uint32_t LEVEL1_OPTIONS = cEncodeBC1UsePCA | cEncodeBC1HighQuality;
	// Level 2 allows the quality to smoothly vary, from slightly higher than level 1 all the way up to around libsquish. Use total_orderings_to_try to [1,32] to vary quality vs. performance.
	const uint32_t LEVEL2_OPTIONS = cEncodeBC1UsePCA | cEncodeBC1HighQuality | cEncodeBC1UseLikelyTotalOrderings;
	const uint32_t DEFAULT_OPTIONS = LEVEL2_OPTIONS;

	const uint32_t MIN_TOTAL_ORDERINGS = 1;
	const uint32_t MAX_TOTAL_ORDERINGS = 32;
	
	// DEFAULT_TOTAL_ORDERINGS_TO_TRY is around 2x faster than libsquish at slightly higher average quality.
	const uint32_t DEFAULT_TOTAL_ORDERINGS_TO_TRY = 16; 
		
	// Encodes a block of 4x4 pixels to BC1 format. 
	// Always returns a 4 color block, no transparency supported.
	// total_orderings_to_try controls the perf. vs. quality tradeoff when the cEncodeBC1UseLikelyTotalOrderings flag is used.
	void encode_bc1(void* pDst, const uint8_t* pPixels, uint32_t flags = LEVEL2_OPTIONS, uint32_t total_orderings_to_try = DEFAULT_TOTAL_ORDERINGS_TO_TRY);

	void encode_bc4(void* pDst, const uint8_t* pPixels, uint32_t stride = 4);
	void encode_bc3(void* pDst, const uint8_t* pPixels, uint32_t flags= LEVEL2_OPTIONS, uint32_t total_orderings_to_try = DEFAULT_TOTAL_ORDERINGS_TO_TRY);
	void encode_bc5(void* pDst, const uint8_t* pPixels, uint32_t chan0 = 0, uint32_t chan1 = 1, uint32_t stride = 4);

	// Returns true if the block uses 3 color punchthrough alpha mode.
	bool unpack_bc1(const void* pBlock_bits, void* pPixels, bool set_alpha = true);
	void unpack_bc4(const void* pBlock_bits, uint8_t* pPixels, uint32_t stride = 4);
	bool unpack_bc3(const void* pBlock_bits, void* pPixels);
	void unpack_bc5(const void* pBlock_bits, void* pPixels, uint32_t chan0 = 0, uint32_t chan1 = 1, uint32_t stride = 4);
}
#endif // #ifndef RGBCX_INCLUDE_H

#ifdef RGBCX_IMPLEMENTATION
namespace rgbcx
{
	const uint32_t NUM_UNIQUE_TOTAL_ORDERINGS = 969;

	// All total orderings for 16 pixels 2-bit selectors.
	static uint8_t g_unique_total_orders[NUM_UNIQUE_TOTAL_ORDERINGS][4] = 
	{
		{0,8,2,6},{4,3,9,0},{4,8,1,3},{12,0,3,1},{11,3,2,0},{6,4,6,0},{7,5,0,4},{6,0,8,2},{1,0,0,15},{3,0,8,5},{1,1,13,1},{13,1,2,0},{0,14,1,1},{0,15,1,0},{0,13,0,3},{16,0,0,0},{4,3,4,5},{8,6,0,2},{0,10,0,6},{10,0,4,2},{7,2,1,6},{4,7,5,0},{1,4,7,4},{0,14,2,0},{2,7,2,5},{9,0,5,2},{9,2,2,3},{10,0,5,1},{2,3,7,4},{4,9,0,3},{1,5,0,10},{1,1,6,8},
		{6,6,4,0},{11,5,0,0},{11,2,0,3},{4,0,10,2},{2,3,10,1},{1,13,1,1},{0,14,0,2},{2,3,3,8},{12,3,1,0},{14,0,0,2},{9,1,3,3},{6,4,0,6},{1,1,5,9},{5,9,0,2},{2,10,1,3},{12,0,0,4},{4,6,6,0},{0,6,4,6},{3,7,4,2},{0,13,3,0},{3,10,0,3},{10,2,1,3},{1,12,1,2},{2,0,13,1},{11,0,5,0},{12,1,3,0},{6,4,5,1},{10,4,2,0},{3,6,1,6},{7,3,6,0},{10,4,0,2},{10,0,2,4},
		{0,5,9,2},{0,9,3,4},{6,4,2,4},{3,4,7,2},{3,3,5,5},{4,2,9,1},{6,2,8,0},{3,5,3,5},{4,10,1,1},{10,1,3,2},{5,7,0,4},{5,3,7,1},{6,8,1,1},{8,8,0,0},{11,1,0,4},{14,1,0,1},{9,3,2,2},{8,2,1,5},{0,0,2,14},{3,3,9,1},{10,1,5,0},{8,3,1,4},{1,5,8,2},{6,1,9,0},{3,2,1,10},{3,11,1,1},{7,6,3,0},{9,0,3,4},{5,2,5,4},{0,2,3,11},{15,0,0,1},{0,6,6,4},
		{3,4,9,0},{4,7,0,5},{0,4,4,8},{0,13,2,1},{2,4,1,9},{3,2,5,6},{10,6,0,0},{3,5,6,2},{8,0,4,4},{1,3,6,6},{7,7,0,2},{6,1,4,5},{0,11,1,4},{2,2,8,4},{0,1,2,13},{15,0,1,0},{7,2,6,1},{8,1,7,0},{1,8,4,3},{2,13,1,0},{1,0,7,8},{14,2,0,0},{1,8,1,6},{9,3,3,1},{0,0,7,9},{4,4,1,7},{9,0,6,1},{10,2,4,0},{1,7,3,5},{0,3,8,5},{5,2,4,5},{1,2,5,8},
		{0,8,7,1},{10,3,2,1},{12,0,4,0},{2,1,4,9},{5,2,2,7},{1,9,3,3},{15,1,0,0},{6,3,4,3},{9,5,0,2},{1,6,9,0},{6,6,0,4},{13,2,1,0},{5,1,8,2},{0,5,11,0},{7,1,0,8},{1,2,12,1},{0,3,3,10},{7,4,2,3},{5,1,4,6},{7,0,3,6},{3,12,0,1},{3,4,5,4},{1,10,0,5},{7,4,3,2},{10,5,0,1},{13,3,0,0},{2,5,4,5},{3,10,1,2},{5,1,2,8},{14,0,1,1},{1,5,4,6},{1,4,5,6},
		{2,3,11,0},{11,0,4,1},{11,2,2,1},{5,3,8,0},{1,3,10,2},{0,1,13,2},{3,1,4,8},{4,2,4,6},{1,5,6,4},{2,1,11,2},{1,2,9,4},{4,7,3,2},{6,2,5,3},{7,2,2,5},{8,1,4,3},{3,2,8,3},{12,1,0,3},{7,8,1,0},{7,0,2,7},{5,10,0,1},{0,2,14,0},{2,9,3,2},{7,0,0,9},{11,1,4,0},{10,4,1,1},{2,2,9,3},{5,7,2,2},{1,3,1,11},{13,2,0,1},{4,2,8,2},{2,3,1,10},{4,2,5,5},
		{7,0,7,2},{10,0,0,6},{0,8,5,3},{4,4,0,8},{12,4,0,0},{0,1,14,1},{8,0,1,7},{5,1,5,5},{11,0,3,2},{0,4,1,11},{0,8,8,0},{0,2,5,9},{7,3,2,4},{7,8,0,1},{1,0,3,12},{7,4,5,0},{1,6,7,2},{7,6,1,2},{9,6,1,0},{12,2,0,2},{4,1,6,5},{4,0,1,11},{8,4,4,0},{13,0,1,2},{8,6,2,0},{4,12,0,0},{2,7,5,2},{2,0,5,9},{5,4,5,2},{3,8,5,0},{7,3,3,3},{4,4,8,0},
		{2,1,3,10},{5,0,1,10},{6,4,3,3},{4,9,1,2},{1,4,0,11},{11,3,1,1},{4,0,12,0},{13,0,0,3},{6,1,6,3},{9,0,4,3},{8,0,0,8},{8,4,0,4},{0,12,1,3},{0,4,10,2},{3,4,8,1},{1,3,8,4},{9,2,5,0},{5,7,4,0},{1,0,11,4},{4,10,0,2},{1,3,12,0},{6,9,0,1},{5,0,9,2},{5,9,2,0},{13,1,0,2},{9,3,4,0},{9,4,0,3},{3,1,12,0},{2,4,3,7},{1,2,13,0},{2,2,4,8},{6,8,0,2},
		{9,2,1,4},{9,5,1,1},{2,0,4,10},{5,4,0,7},{0,0,6,10},{1,2,0,13},{4,7,2,3},{6,5,5,0},{3,3,1,9},{1,6,1,8},{12,2,1,1},{4,4,5,3},{1,0,6,9},{0,6,10,0},{4,8,3,1},{4,3,2,7},{2,1,7,6},{1,9,1,5},{3,1,3,9},{8,7,1,0},{1,2,3,10},{14,1,1,0},{5,4,4,3},{3,7,0,6},{7,4,1,4},{3,7,5,1},{1,1,0,14},{0,10,3,3},{0,4,3,9},{1,7,7,1},{2,0,10,4},{5,8,0,3},
		{6,7,3,0},{0,8,4,4},{5,7,3,1},{7,9,0,0},{7,6,2,1},{0,4,5,7},{6,3,5,2},{1,2,1,12},{5,2,0,9},{8,5,0,3},{4,6,1,5},{1,1,7,7},{10,5,1,0},{1,2,8,5},{1,8,2,5},{5,1,0,10},{6,9,1,0},{13,0,2,1},{8,3,5,0},{6,3,6,1},{2,11,3,0},{3,7,3,3},{1,5,2,8},{7,5,2,2},{0,6,7,3},{13,1,1,1},{5,3,4,4},{7,2,7,0},{5,8,3,0},{3,13,0,0},{0,7,9,0},{8,0,3,5},
		{1,3,7,5},{4,0,2,10},{12,0,1,3},{1,7,6,2},{3,9,0,4},{7,2,0,7},{0,1,7,8},{2,1,8,5},{0,13,1,2},{0,8,1,7},{5,0,11,0},{5,6,2,3},{0,3,0,13},{2,3,4,7},{5,6,3,2},{4,2,10,0},{3,3,7,3},{7,2,5,2},{1,1,11,3},{12,3,0,1},{5,1,1,9},{1,15,0,0},{9,7,0,0},{9,1,2,4},{0,7,3,6},{3,0,13,0},{3,0,11,2},{0,6,5,5},{8,2,2,4},{6,10,0,0},{4,8,4,0},{0,0,3,13},
		{0,4,12,0},{7,1,6,2},{3,5,0,8},{8,0,6,2},{6,2,3,5},{2,10,0,4},{4,11,0,1},{6,1,5,4},{5,1,3,7},{0,11,3,2},{4,6,0,6},{2,6,0,8},{3,1,7,5},{2,14,0,0},{2,9,2,3},{0,3,4,9},{11,0,1,4},{13,0,3,0},{8,3,0,5},{0,5,3,8},{5,11,0,0},{0,1,4,11},{2,1,9,4},{3,4,4,5},{7,1,2,6},{12,2,2,0},{9,4,1,2},{6,0,2,8},{4,6,2,4},{11,2,3,0},{3,2,2,9},{10,3,1,2},
		{1,1,2,12},{0,5,2,9},{0,1,11,4},{6,2,4,4},{2,8,2,4},{0,9,4,3},{11,0,2,3},{0,2,11,3},{6,0,7,3},{0,3,6,7},{4,5,5,2},{1,2,6,7},{7,5,1,3},{9,0,2,5},{2,6,4,4},{4,1,9,2},{4,8,2,2},{1,12,3,0},{0,9,6,1},{0,10,6,0},{3,1,5,7},{2,13,0,1},{2,2,1,11},{3,6,0,7},{5,6,5,0},{5,5,4,2},{4,0,3,9},{3,4,1,8},{0,11,2,3},{2,12,1,1},{7,1,3,5},{7,0,9,0},
		{8,0,8,0},{1,0,2,13},{3,3,10,0},{2,4,4,6},{2,3,8,3},{1,10,5,0},{7,3,0,6},{2,9,0,5},{1,4,6,5},{6,6,3,1},{5,6,0,5},{6,3,0,7},{3,10,2,1},{2,5,5,4},{3,8,4,1},{1,14,0,1},{10,3,3,0},{3,5,7,1},{1,1,3,11},{2,4,0,10},{9,3,1,3},{5,10,1,0},{3,0,6,7},{3,1,9,3},{11,2,1,2},{5,3,3,5},{0,5,1,10},{4,1,11,0},{10,2,0,4},{7,6,0,3},{2,7,0,7},{4,2,2,8},
		{6,1,7,2},{4,9,2,1},{0,0,8,8},{3,7,2,4},{9,6,0,1},{0,12,4,0},{6,7,1,2},{0,7,2,7},{1,0,10,5},{0,0,14,2},{2,7,3,4},{5,0,0,11},{7,7,1,1},{6,2,7,1},{4,5,3,4},{3,5,1,7},{5,9,1,1},{6,2,1,7},{3,2,0,11},{0,11,0,5},{3,11,2,0},{10,1,4,1},{7,0,4,5},{11,4,0,1},{10,3,0,3},{0,2,4,10},{0,15,0,1},{0,11,5,0},{6,7,2,1},{1,12,2,1},{4,1,3,8},{1,0,13,2},
		{1,8,5,2},{7,0,1,8},{3,12,1,0},{9,2,4,1},{1,7,4,4},{11,4,1,0},{4,3,8,1},{2,8,4,2},{1,11,3,1},{1,1,4,10},{4,10,2,0},{8,2,5,1},{1,0,9,6},{5,3,2,6},{0,9,7,0},{10,2,2,2},{5,8,1,2},{8,7,0,1},{0,3,12,1},{1,0,1,14},{4,8,0,4},{3,8,0,5},{4,6,5,1},{0,9,5,2},{10,2,3,1},{2,3,9,2},{1,0,12,3},{11,3,0,2},{4,5,2,5},{0,2,12,2},{9,1,0,6},{9,2,0,5},
		{1,2,7,6},{4,7,4,1},{0,12,2,2},{0,0,0,16},{2,8,3,3},{3,6,2,5},{0,6,3,7},{7,5,4,0},{3,3,3,7},{3,3,0,10},{5,0,6,5},{0,0,10,6},{8,5,3,0},{8,1,5,2},{6,0,9,1},{11,1,2,2},{2,11,2,1},{9,5,2,0},{3,0,4,9},{2,2,12,0},{2,6,6,2},{2,1,13,0},{6,0,5,5},{2,0,14,0},{2,11,1,2},{4,4,7,1},{2,0,11,3},{3,1,1,11},{2,9,4,1},{3,7,6,0},{14,0,2,0},{1,10,4,1},
		{8,0,7,1},{3,6,5,2},{0,3,11,2},{2,5,6,3},{11,1,3,1},{6,5,3,2},{3,8,1,4},{0,2,7,7},{2,10,2,2},{1,6,2,7},{11,0,0,5},{12,1,1,2},{12,1,2,1},{0,7,1,8},{0,3,9,4},{0,2,1,13},{7,1,4,4},{10,1,0,5},{4,0,8,4},{5,2,7,2},{0,2,0,14},{4,3,7,2},{2,7,1,6},{1,2,2,11},{6,3,3,4},{1,14,1,0},{2,4,6,4},{5,3,6,2},{5,3,5,3},{8,4,1,3},{1,3,0,12},{3,5,2,6},
		{1,8,7,0},{0,7,4,5},{2,1,6,7},{4,11,1,0},{7,2,4,3},{6,1,3,6},{4,5,4,3},{2,11,0,3},{1,5,7,3},{12,0,2,2},{5,0,4,7},{1,13,0,2},{7,7,2,0},{4,1,7,4},{4,5,0,7},{5,0,5,6},{6,5,4,1},{2,4,2,8},{1,10,1,4},{6,3,1,6},{3,3,8,2},{0,7,7,2},{4,4,2,6},{1,1,8,6},{1,12,0,3},{2,1,12,1},{1,9,2,4},{1,11,0,4},{2,5,2,7},{10,0,3,3},{4,6,3,3},{3,7,1,5},
		{1,9,0,6},{7,1,7,1},{1,6,5,4},{9,2,3,2},{6,2,2,6},{2,2,2,10},{8,3,3,2},{0,1,8,7},{2,0,8,6},{0,3,1,12},{9,4,2,1},{9,4,3,0},{6,2,6,2},{1,8,0,7},{5,1,10,0},{0,5,5,6},{8,2,4,2},{2,3,2,9},{6,0,3,7},{2,2,6,6},{2,6,2,6},{1,13,2,0},{9,3,0,4},{7,3,5,1},{6,5,2,3},{5,2,6,3},{2,0,12,2},{5,7,1,3},{8,1,3,4},{3,1,10,2},{1,0,15,0},{0,8,0,8},
		{5,0,7,4},{4,4,6,2},{0,1,0,15},{10,0,1,5},{7,3,4,2},{4,9,3,0},{2,5,7,2},{3,4,2,7},{8,3,2,3},{5,1,6,4},{0,10,2,4},{6,6,1,3},{6,0,0,10},{4,4,3,5},{1,3,9,3},{7,5,3,1},{3,0,7,6},{1,8,6,1},{4,3,0,9},{3,11,0,2},{6,0,6,4},{0,1,3,12},{0,4,2,10},{5,5,6,0},{4,1,4,7},{8,1,6,1},{5,6,4,1},{8,4,2,2},{4,3,1,8},{3,0,2,11},{1,11,4,0},{0,8,3,5},
		{5,1,7,3},{7,0,8,1},{4,3,5,4},{4,6,4,2},{3,2,4,7},{1,6,3,6},{0,7,8,1},{3,0,1,12},{9,1,4,2},{7,4,0,5},{1,7,0,8},{5,4,1,6},{9,1,5,1},{1,1,9,5},{4,1,1,10},{5,3,0,8},{2,2,5,7},{4,0,0,12},{9,0,7,0},{3,4,0,9},{0,2,6,8},{8,2,0,6},{3,2,6,5},{4,2,6,4},{3,6,4,3},{2,8,6,0},{5,0,3,8},{0,4,0,12},{0,16,0,0},{0,9,2,5},{4,0,11,1},{1,6,4,5},
		{0,1,6,9},{3,4,6,3},{3,0,10,3},{7,0,6,3},{1,4,9,2},{1,5,3,7},{8,5,2,1},{0,12,0,4},{7,2,3,4},{0,5,6,5},{11,1,1,3},{6,5,0,5},{2,1,5,8},{1,4,11,0},{9,1,1,5},{0,0,13,3},{5,8,2,1},{2,12,0,2},{3,3,6,4},{4,1,10,1},{4,0,5,7},{8,1,0,7},{5,1,9,1},{4,3,3,6},{0,2,2,12},{6,3,2,5},{0,0,12,4},{1,5,1,9},{2,6,5,3},{3,6,3,4},{2,12,2,0},{1,6,8,1},
		{10,1,1,4},{1,3,4,8},{7,4,4,1},{1,11,1,3},{1,2,10,3},{3,9,3,1},{8,5,1,2},{2,10,4,0},{4,2,0,10},{2,7,6,1},{8,2,3,3},{1,5,5,5},{3,1,0,12},{3,10,3,0},{8,0,5,3},{0,6,8,2},{0,3,13,0},{0,0,16,0},{1,9,4,2},{4,1,8,3},{1,6,6,3},{0,10,5,1},{0,1,12,3},{4,0,6,6},{3,8,3,2},{0,5,4,7},{1,0,14,1},{0,4,6,6},{3,9,1,3},{3,5,8,0},{3,6,6,1},{5,4,7,0},
		{3,0,12,1},{8,6,1,1},{2,9,5,0},{6,1,1,8},{4,1,2,9},{3,9,4,0},{5,2,9,0},{0,12,3,1},{1,4,10,1},{4,0,7,5},{3,1,2,10},{5,4,2,5},{5,5,5,1},{4,2,3,7},{1,7,5,3},{2,8,0,6},{8,1,2,5},{3,8,2,3},{6,1,2,7},{3,9,2,2},{9,0,0,7},{0,8,6,2},{8,4,3,1},{0,2,8,6},{6,5,1,4},{2,3,5,6},{2,10,3,1},{0,7,0,9},{4,2,7,3},{2,4,8,2},{7,1,1,7},{2,4,7,3},
		{2,4,10,0},{0,1,10,5},{4,7,1,4},{0,10,4,2},{9,0,1,6},{1,9,6,0},{3,3,4,6},{4,5,7,0},{5,5,2,4},{2,8,1,5},{2,3,6,5},{0,1,1,14},{3,2,3,8},{10,1,2,3},{9,1,6,0},{3,4,3,6},{2,2,0,12},{0,0,9,7},{4,0,9,3},{7,0,5,4},{4,5,6,1},{2,5,1,8},{2,5,9,0},{3,5,4,4},{1,3,11,1},{7,1,5,3},{3,2,7,4},{1,4,2,9},{1,11,2,2},{2,2,3,9},{5,0,10,1},{3,2,11,0},
		{1,10,3,2},{8,3,4,1},{3,6,7,0},{0,7,5,4},{1,3,3,9},{2,2,10,2},{1,9,5,1},{0,5,0,11},{3,0,3,10},{0,4,8,4},{2,7,7,0},{2,0,2,12},{1,2,11,2},{6,3,7,0},{0,6,2,8},{0,10,1,5},{0,9,0,7},{6,4,4,2},{6,0,1,9},{1,5,10,0},{5,4,6,1},{5,5,3,3},{0,0,4,12},{0,3,2,11},{1,4,1,10},{3,0,9,4},{5,5,0,6},{1,7,8,0},{2,0,3,11},{6,4,1,5},{10,0,6,0},{0,6,0,10},
		{0,4,11,1},{3,1,6,6},{2,5,8,1},{0,2,10,4},{3,1,11,1},{6,6,2,2},{1,1,10,4},{2,1,2,11},{6,1,8,1},{0,2,13,1},{0,7,6,3},{6,8,2,0},{3,0,0,13},{4,4,4,4},{6,2,0,8},{7,3,1,5},{0,11,4,1},{6,7,0,3},{2,6,3,5},{5,2,1,8},{7,1,8,0},{5,5,1,5},{1,8,3,4},{8,2,6,0},{6,0,10,0},{5,6,1,4},{1,4,4,7},{2,7,4,3},{1,4,8,3},{5,4,3,4},{1,10,2,3},{2,9,1,4},
		{2,2,11,1},{2,5,0,9},{0,0,1,15},{0,0,11,5},{0,4,7,5},{0,1,15,0},{2,1,0,13},{0,3,10,3},{8,0,2,6},{3,3,2,8},{3,5,5,3},{1,7,1,7},{1,3,2,10},{4,0,4,8},{2,0,9,5},{1,1,1,13},{2,2,7,5},{2,1,10,3},{4,2,1,9},{4,3,6,3},{1,3,5,7},{2,5,3,6},{1,0,8,7},{5,0,2,9},{2,8,5,1},{1,6,0,9},{0,0,5,11},{0,4,9,3},{2,0,7,7},{1,7,2,6},{2,1,1,12},{2,4,9,1},
		{0,5,7,4},{6,0,4,6},{3,2,10,1},{0,6,1,9},{2,6,1,7},{0,5,8,3},{4,1,0,11},{1,2,4,9},{4,1,5,6},{6,1,0,9},{1,4,3,8},{4,5,1,6},{1,0,5,10},{5,3,1,7},{0,9,1,6},{2,0,1,13},{2,0,6,8},{8,1,1,6},{1,5,9,1},{0,6,9,1},{0,3,5,8},{0,2,9,5},{5,2,8,1},{1,1,14,0},{3,2,9,2},{5,0,8,3},{0,5,10,1},{5,2,3,6},{2,6,7,1},{2,3,0,11},{0,1,9,6},{1,0,4,11},
		{3,0,5,8},{0,0,15,1},{2,4,5,5},{0,3,7,6},{2,0,0,14},{1,1,12,2},{2,6,8,0},{3,1,8,4},{0,1,5,10}
	};

	// For each total ordering, this table indices which other total orderings are likely to improve quality using a least squares pass. It's sorted by usefulness.
	static uint16_t g_best_total_orderings[NUM_UNIQUE_TOTAL_ORDERINGS][32] = 
	{
		{ 120,15,202,13,260,5,450,21,515,23,403,33,51,700,48,523,6,2,753,77,494,318,730,102,3,457,49,817,196,326,99,82  },
		{ 13,23,141,217,64,21,115,4,77,0,317,352,51,269,33,180,5,137,9,2,32,291,318,202,365,102,341,349,372,752,10,3  },
		{ 262,52,29,74,171,500,6,1,58,5,331,27,50,46,34,14,53,26,409,19,17,220,324,334,151,21,223,38,75,635,287,73  },
		{ 40,33,4,51,153,62,196,453,56,730,475,23,57,14,775,11,102,403,130,99,34,17,117,12,59,880,123,139,162,77,585,211  },
		{ 23,13,51,33,12,102,202,128,64,40,2,153,196,403,15,5,77,117,1,99,10,3,141,453,515,14,318,165,120,269,134,0  },
		{ 13,23,4,202,51,77,115,141,32,33,128,177,64,0,40,217,102,269,7,2,1,11,137,15,117,21,197,59,90,291,403,9  },
		{ 26,19,235,47,27,78,64,145,648,624,65,130,711,108,630,112,453,122,390,444,236,730,25,14,90,42,95,53,99,34,85,6  },
		{ 64,217,247,352,141,437,177,86,875,237,597,751,95,752,202,340,304,582,269,291,232,46,317,296,372,318,13,349,267,115,18,14  },
		{ 180,638,642,901,341,898,82,197,10,15,951,165,515,762,700,253,753,752,365,811,143,479,569,244,8,31,116,55,873,242,137,499  },
		{ 221,51,23,308,401,125,656,254,438,743,629,912,165,421,688,530,159,228,158,49,679,424,876,457,406,670,115,13,386,166,88,1  },
		{ 1,197,180,143,13,23,901,115,165,341,498,2,31,0,752,569,638,125,55,141,93,15,116,8,36,206,137,365,44,873,338,515  },
		{ 12,23,51,14,13,37,15,99,38,515,2,64,700,0,54,10,753,196,1,21,5,328,457,128,33,134,117,82,629,153,719,453  },
		{ 13,15,23,961,515,457,700,753,51,165,115,197,2,0,474,4,569,719,38,12,3,37,1,99,64,5,629,10,401,33,14,6  },
		{ 15,515,700,753,1,0,2,961,12,4,23,3,5,134,10,197,11,120,457,165,7,82,33,6,9,51,341,217,8,141,21,14  },
		{ 51,23,13,457,719,961,0,730,1,2,5,165,15,6,117,515,758,401,12,453,700,99,7,753,153,386,134,54,328,10,9,308  },
		{ 134,82,117,898,33,13,77,120,153,351,102,23,341,260,196,450,961,854,40,4,457,110,901,11,180,217,365,8,51,197,111,317  },
		{ 60,18,126,35,121,1,167,24,71,92,21,191,107,48,7,5,118,146,68,271,16,98,132,13,9,125,212,0,150,199,575,727  },
		{ 62,136,129,41,214,123,162,57,248,38,313,710,64,211,789,507,54,4,678,266,128,77,33,597,13,17,11,249,157,269,183,177  },
		{ 523,475,403,899,817,494,1,453,7,51,450,120,8,5,9,23,128,730,805,15,10,4,13,421,33,515,202,14,958,700,21,0  },
		{ 3,62,12,33,4,56,21,17,102,76,123,119,84,196,177,32,59,27,0,13,77,23,40,57,18,73,51,11,6,25,216,152  },
		{ 43,319,422,414,945,0,20,61,5,7,804,819,376,325,470,14,904,693,707,104,97,147,22,173,49,107,46,95,52,426,198,76  },
		{ 13,23,2,0,4,51,33,77,217,115,3,1,141,10,180,6,40,7,102,64,5,11,317,15,202,341,22,9,515,14,165,197  },
		{ 1,0,28,2,49,7,24,65,16,35,55,105,21,14,5,9,13,23,64,51,12,10,36,95,159,109,18,67,170,239,31,125  },
		{ 15,515,700,753,0,13,1,4,2,10,5,12,117,165,457,11,3,9,134,32,7,6,64,82,961,21,217,141,197,120,317,14  },
		{ 7,18,14,97,71,0,149,2,92,16,150,60,189,28,124,13,36,10,1,69,5,336,118,140,24,517,43,398,22,35,298,67  },
		{ 4,33,102,77,5,342,59,450,11,416,25,12,817,523,457,197,91,318,275,32,10,291,202,37,21,196,496,403,165,128,81,64  },
		{ 25,42,6,19,235,256,85,122,53,813,63,26,436,297,390,233,573,65,27,445,680,283,416,389,73,194,0,605,138,80,45,64  },
		{ 33,102,342,117,12,300,134,77,21,6,84,26,25,32,483,91,63,494,196,1,523,87,81,153,19,2,90,757,74,18,193,99  },
		{ 9,0,39,158,1,35,24,49,109,16,22,65,95,55,36,23,21,13,7,68,2,10,67,30,64,51,168,159,254,124,175,185  },
		{ 197,180,546,498,165,237,509,3,34,873,400,5,61,287,52,115,2,176,391,13,186,48,217,196,153,80,297,14,341,151,923,311  },
		{ 120,968,373,260,202,110,95,217,704,33,717,349,77,15,98,518,827,137,719,102,661,450,32,713,385,197,515,115,652,326,318,180  },
		{ 44,116,144,268,98,434,489,367,137,127,0,9,141,384,918,206,22,1,93,105,948,202,31,131,36,492,253,352,332,951,28,10  },
		{ 13,23,0,51,77,141,33,1,4,64,2,202,102,269,115,128,3,15,6,10,22,177,7,318,11,180,515,40,217,137,14,700  },
		{ 15,515,700,753,4,11,165,141,180,40,64,125,197,23,202,13,93,3,32,0,269,77,110,21,51,128,386,5,117,49,134,82  },
		{ 176,62,231,585,56,34,412,57,161,440,3,17,14,369,136,4,527,236,23,51,322,84,472,13,202,548,457,719,361,283,59,53  },
		{ 9,180,141,352,217,88,237,30,1,317,0,752,230,39,64,101,36,100,498,213,702,365,546,208,321,83,854,345,28,115,175,144  },
		{ 1,22,9,28,0,13,49,141,115,39,64,83,10,128,67,95,23,31,109,5,137,30,2,202,180,12,96,55,21,51,165,98  },
		{ 4,51,12,72,477,38,11,401,23,431,59,57,308,13,89,99,15,148,474,152,76,79,54,453,670,413,197,115,629,515,179,94  },
		{ 13,23,15,457,515,0,700,1,2,961,3,753,51,165,12,5,11,6,629,719,117,7,14,134,197,453,37,509,40,45,17,474  },
		{ 254,1,100,9,30,310,0,625,190,166,31,18,21,39,98,265,23,264,88,51,93,557,272,13,404,49,131,96,48,5,731,101  },
		{ 23,13,51,12,99,10,128,15,153,33,202,120,403,196,117,2,0,165,515,37,453,82,64,3,5,141,197,700,31,1,22,14  },
		{ 38,99,139,542,196,453,117,23,457,13,134,111,11,37,328,961,51,40,12,401,153,775,474,587,33,475,277,629,54,41,719,413  },
		{ 6,85,25,233,91,26,343,63,138,283,29,65,81,122,19,370,235,4,718,389,42,648,605,194,174,74,0,256,445,416,64,573  },
		{ 49,5,97,18,64,20,0,197,193,173,165,14,729,7,408,10,102,35,422,120,9,61,16,713,95,125,51,350,21,509,65,32  },
		{ 268,144,116,434,384,489,206,93,137,367,141,203,332,940,959,911,98,127,617,244,855,10,22,253,282,1,0,9,44,36,202,352  },
		{ 64,17,106,62,255,117,41,237,752,292,153,136,32,23,211,498,162,248,129,15,241,476,372,864,157,54,90,77,38,352,13,227  },
		{ 2,5,29,50,14,17,6,1,52,58,27,45,19,3,51,133,53,764,357,583,34,366,151,171,61,26,38,108,453,114,309,4  },
		{ 130,196,412,711,59,236,99,730,77,401,381,402,453,202,283,108,210,361,803,153,57,4,51,719,503,14,128,183,117,23,11,421  },
		{ 13,23,141,51,64,33,77,115,4,180,0,202,10,102,217,2,269,128,11,9,40,165,352,15,137,197,21,7,3,22,1,341  },
		{ 23,13,202,51,5,21,120,15,1,128,318,102,141,269,137,48,515,12,260,77,523,33,403,700,64,450,7,165,125,93,2,753  },
		{ 2,1,14,29,5,38,67,46,24,52,0,64,21,58,12,6,18,96,83,16,128,54,7,70,69,103,36,181,17,10,171,13  },
		{ 15,515,700,753,1,13,2,0,5,23,10,117,3,7,153,165,9,134,4,12,6,21,14,33,457,77,341,719,217,196,115,569  },
		{ 197,165,509,308,391,13,5,901,569,14,629,546,80,61,34,15,903,297,457,115,196,153,3,29,231,873,758,33,734,719,515,180  },
		{ 19,27,73,200,714,250,472,444,26,34,283,17,322,53,813,128,14,390,297,123,389,503,57,106,236,122,176,436,630,495,432,108  },
		{ 3,17,38,328,488,62,32,13,21,12,129,45,421,115,51,14,76,15,401,54,106,99,23,2,514,457,123,629,515,540,56,46  },
		{ 115,341,873,365,180,197,752,901,13,143,634,1,943,569,10,824,261,15,317,0,498,509,244,237,2,533,4,23,601,116,44,964  },
		{ 33,15,453,51,515,700,102,403,23,0,753,153,117,196,13,475,21,134,421,1,4,899,523,40,202,18,9,120,82,283,128,111  },
		{ 23,13,51,12,33,453,99,117,196,153,15,14,134,515,128,202,700,11,403,40,102,77,753,401,3,308,37,475,21,115,38,328  },
		{ 2,7,5,1,14,0,32,6,21,64,128,29,45,22,141,10,13,33,38,52,61,23,4,16,86,70,46,77,137,102,202,48  },
		{ 23,51,13,33,202,128,1,64,102,2,403,141,40,0,77,5,10,3,453,318,12,269,15,99,14,120,165,153,6,196,137,402  },
		{ 16,92,60,18,71,35,20,121,43,7,0,126,107,118,48,14,375,149,68,110,167,175,125,33,575,279,566,783,173,165,362,49  },
		{ 33,77,4,13,102,23,40,202,51,0,141,59,32,291,10,11,64,128,115,22,117,90,165,403,180,1,318,177,494,6,137,21  },
		{ 507,162,41,4,38,202,11,211,3,361,129,402,17,57,62,59,33,117,248,128,40,99,123,136,313,77,153,183,130,803,497,305  },
		{ 643,802,289,718,650,123,511,193,84,389,65,324,25,380,57,18,91,6,256,500,736,233,194,63,510,605,90,26,370,217,235,343  },
		{ 15,13,23,515,1,700,51,753,0,2,5,141,165,115,457,180,12,120,197,3,21,4,7,202,6,9,10,8,93,33,32,77  },
		{ 51,23,13,453,202,403,64,165,21,141,475,128,95,523,12,730,115,197,5,120,125,1,180,0,457,10,494,719,386,308,15,2  },
		{ 204,74,6,135,174,65,64,172,7,95,192,66,85,138,25,348,97,580,353,22,63,29,81,289,280,52,43,42,500,86,87,104  },
		{ 9,0,1,35,24,16,18,68,2,50,65,5,69,7,13,14,21,10,23,114,28,149,83,64,22,133,103,12,38,51,96,55  },
		{ 16,101,0,9,18,118,1,24,154,68,60,35,124,520,191,21,10,13,212,22,55,39,71,5,806,264,7,167,28,694,346,604  },
		{ 1,0,9,21,13,16,141,23,35,68,65,5,48,238,64,335,217,88,352,10,83,96,269,22,30,28,18,115,32,180,101,24  },
		{ 13,202,141,23,269,77,21,5,33,51,4,115,32,64,0,318,11,22,102,494,153,291,15,10,217,196,177,352,349,128,515,6  },
		{ 7,16,92,18,35,24,60,14,68,0,150,149,97,107,22,21,126,140,48,55,2,10,28,9,118,71,43,20,1,375,230,5  },
		{ 76,21,90,32,12,57,1,2,37,148,38,4,99,184,89,5,316,14,179,152,205,17,464,257,51,288,229,45,11,0,645,413  },
		{ 19,26,17,27,80,495,297,378,128,53,813,436,45,113,25,361,4,250,122,59,469,42,106,283,136,40,202,73,161,390,200,77  },
		{ 6,26,19,235,138,112,145,25,42,262,27,453,331,500,52,70,47,14,78,50,632,17,730,624,711,409,122,226,85,113,2,51  },
		{ 16,7,14,24,18,0,35,9,2,64,141,128,23,13,60,5,21,46,50,202,54,10,92,137,77,6,51,69,71,269,28,12  },
		{ 5,2,90,1,179,205,184,21,152,57,12,4,45,245,257,32,17,14,229,288,11,64,460,37,59,128,38,141,217,79,266,99  },
		{ 15,515,700,753,4,11,13,5,23,1,0,21,141,33,3,32,180,2,117,40,202,31,269,134,102,128,153,64,120,318,352,22  },
		{ 47,130,108,711,730,453,196,412,390,283,27,78,128,236,51,200,719,183,14,472,17,34,250,381,803,432,153,503,3,59,73,53  },
		{ 12,51,474,277,111,99,153,13,37,23,961,629,94,431,569,542,38,79,453,134,139,15,117,33,196,40,188,115,457,515,401,11  },
		{ 17,495,19,26,27,469,106,378,161,53,80,6,483,73,128,862,383,436,527,136,25,56,742,297,119,84,814,3,34,209,65,64  },
		{ 681,636,81,91,750,104,0,370,74,138,174,18,397,673,348,173,29,693,718,52,65,64,280,671,192,355,701,6,319,784,289,7  },
		{ 15,515,700,753,33,77,102,115,117,4,153,40,13,134,11,1,217,196,23,5,3,2,351,317,365,21,291,12,0,341,180,139  },
		{ 0,9,1,28,141,39,5,64,35,2,13,12,16,22,7,30,65,21,18,10,69,115,23,51,24,180,68,217,202,165,67,137  },
		{ 4,11,403,453,51,33,202,23,77,117,102,59,40,95,64,13,99,475,291,137,86,65,10,128,15,342,115,134,90,22,494,391  },
		{ 214,289,90,874,6,65,25,64,256,751,42,249,235,194,312,288,85,174,233,746,525,875,835,519,247,32,63,544,352,348,26,524  },
		{ 1,2,0,5,22,12,23,28,36,13,21,9,7,67,49,51,14,141,64,10,50,115,95,202,32,137,105,180,165,83,55,6  },
		{ 13,180,23,4,21,160,5,901,352,31,244,51,202,817,752,253,217,203,153,141,128,44,36,15,1,0,899,326,291,197,137,94  },
		{ 435,144,88,274,203,30,418,190,410,1,96,778,521,530,326,686,100,466,264,321,960,166,795,382,822,367,131,31,335,438,98,93  },
		{ 72,76,12,90,37,4,21,32,57,308,413,38,205,179,148,11,405,10,2,14,152,99,428,184,59,64,401,221,1,23,5,54  },
		{ 77,33,102,141,13,23,40,64,2,1,51,202,115,177,180,10,4,269,0,128,15,6,3,291,7,14,210,515,165,137,318,217  },
		{ 397,81,804,788,693,32,681,249,784,56,0,718,21,725,510,750,91,90,422,194,180,123,65,57,214,4,524,319,233,217,160,135  },
		{ 60,16,126,7,121,132,35,150,18,14,107,24,146,92,314,246,71,298,9,199,21,232,195,5,359,97,10,140,156,32,1,0  },
		{ 217,15,115,515,317,141,700,341,13,753,110,120,23,365,1,137,260,51,33,0,180,4,349,40,202,36,269,77,10,372,373,352  },
		{ 111,134,117,474,23,13,12,961,569,431,37,51,15,115,515,700,277,99,38,753,405,197,4,72,457,45,54,11,94,76,89,629  },
		{ 13,23,51,15,5,1,120,2,21,515,0,202,12,700,64,141,4,165,32,33,753,403,196,269,453,125,197,115,260,7,9,3  },
		{ 13,141,180,4,217,2,23,202,115,77,5,3,352,10,0,137,1,64,9,269,21,33,317,51,102,11,291,197,128,318,752,341  },
		{ 165,391,125,197,558,120,13,33,380,48,21,900,426,23,386,326,298,77,134,457,961,509,308,221,19,758,450,357,56,1,494,14  },
		{ 15,515,1,120,700,77,82,141,753,21,13,110,202,217,23,51,93,33,260,352,5,137,180,269,326,128,2,102,48,0,318,450  },
		{ 15,23,13,515,700,51,961,753,0,1,457,2,10,115,5,719,569,165,14,453,6,401,197,64,9,3,474,629,7,22,12,38  },
		{ 264,166,9,435,39,93,921,203,190,274,100,33,656,404,110,382,272,254,30,77,363,88,473,128,438,478,625,51,44,18,616,101  },
		{ 100,9,0,166,39,252,88,265,21,1,30,16,18,48,364,13,68,404,520,101,31,49,604,382,329,274,118,24,35,676,419,167  },
		{ 15,515,700,753,4,11,5,141,180,3,13,165,1,40,23,21,202,12,269,64,457,2,197,0,125,32,523,318,352,117,51,128  },
		{ 24,2,18,0,1,16,35,14,9,7,69,67,28,5,46,50,38,68,64,21,71,13,10,12,22,65,108,6,83,133,149,23  },
		{ 289,90,214,64,874,751,312,32,65,194,66,192,835,0,712,288,4,234,247,249,77,5,95,875,173,20,524,38,202,104,59,519  },
		{ 0,9,1,23,28,31,98,127,51,13,49,21,16,137,22,301,24,44,125,18,64,5,371,35,158,737,202,101,159,48,2,242  },
		{ 17,62,136,214,32,292,77,123,129,4,710,128,209,141,153,38,255,249,33,11,618,45,742,37,13,54,64,597,119,106,59,196  },
		{ 5,107,32,581,441,534,279,121,49,132,21,423,7,13,362,493,0,14,147,660,590,298,60,508,786,259,929,356,941,22,97,246  },
		{ 730,51,719,453,899,23,6,386,15,457,12,475,99,523,515,1,13,961,403,401,0,700,5,2,269,141,753,19,308,165,115,21  },
		{ 49,9,28,0,22,159,35,39,95,1,131,272,254,105,68,65,30,55,158,23,374,16,36,24,10,51,21,327,168,13,64,347  },
		{ 15,515,700,753,33,341,317,77,4,141,180,10,13,1,102,901,365,115,117,217,197,23,134,351,752,40,143,137,11,153,21,82  },
		{ 15,13,515,12,700,23,753,134,51,37,474,197,4,961,457,10,569,11,2,99,0,38,165,115,3,82,1,33,5,120,719,64  },
		{ 2,7,20,5,128,14,32,21,6,66,29,43,58,0,97,52,10,337,61,135,23,16,38,202,192,45,12,13,137,46,87,49  },
		{ 77,33,202,128,141,13,342,102,15,403,23,515,269,134,117,318,700,137,21,753,4,153,32,2,5,64,7,494,120,48,196,49  },
		{ 2,1,14,5,6,0,38,46,7,65,29,22,36,13,23,86,10,3,50,12,208,24,21,18,51,25,64,28,67,32,17,283  },
		{ 15,515,700,753,4,1,5,11,3,341,0,2,180,33,12,134,13,77,197,365,10,21,901,102,32,117,37,17,23,961,7,40  },
		{ 206,203,268,417,8,93,499,940,137,120,959,31,44,10,0,202,341,141,638,473,564,260,559,692,326,22,728,13,450,127,23,165  },
		{ 15,82,515,10,120,0,8,700,33,165,753,64,31,110,260,197,22,40,153,93,9,4,23,351,13,44,102,11,196,77,1,326  },
		{ 0,14,196,77,566,154,117,2,153,33,15,7,18,20,608,260,12,515,71,899,703,64,60,958,16,13,341,81,51,19,165,149  },
		{ 80,19,6,27,17,84,504,128,26,2,33,4,45,240,25,5,129,403,106,618,202,12,56,65,99,1,123,76,40,64,14,3  },
		{ 15,515,700,753,77,13,33,4,23,31,44,10,51,8,64,110,93,102,291,0,40,5,11,49,82,180,117,202,177,22,115,457  },
		{ 195,223,98,132,146,1,271,834,167,360,765,541,107,156,807,259,147,407,354,393,591,121,199,697,55,48,126,522,20,18,293,163  },
		{ 6,77,202,210,128,29,42,319,1,342,120,117,82,7,2,260,134,102,318,33,13,422,707,141,122,63,25,526,426,351,180,72  },
		{ 13,4,128,40,23,51,11,33,102,202,64,117,141,59,134,403,0,453,153,77,15,196,475,65,269,12,515,137,22,1,5,57  },
		{ 7,2,14,16,1,24,18,6,22,0,23,10,35,137,20,51,28,13,60,71,92,5,21,128,95,168,165,55,12,143,64,49  },
		{ 15,515,1,700,23,0,13,753,2,51,180,120,21,5,165,33,4,197,9,115,12,141,3,202,523,7,260,6,386,31,8,82  },
		{ 121,132,107,60,146,126,92,195,16,35,199,5,7,13,649,279,150,22,0,21,24,4,653,441,298,246,32,18,156,955,360,10  },
		{ 31,44,98,9,137,1,116,0,276,284,201,93,141,299,144,21,128,39,23,36,22,202,28,935,77,96,49,244,110,203,371,662  },
		{ 13,15,515,23,700,753,0,1,51,2,10,961,457,197,165,4,5,115,12,77,3,202,9,33,120,7,22,719,6,180,21,8  },
		{ 17,123,162,99,184,183,12,257,84,229,3,130,136,4,152,128,14,62,33,80,40,57,119,56,383,475,205,106,453,202,34,266  },
		{ 196,23,117,153,51,453,134,13,33,475,0,40,12,401,15,670,2,14,22,3,21,1,102,64,730,515,4,99,18,700,65,403  },
		{ 187,224,219,258,871,137,574,160,1,36,442,96,202,926,44,385,839,31,131,908,98,836,39,254,860,116,77,944,613,531,127,51  },
		{ 195,121,146,156,590,407,360,132,522,883,259,786,626,55,150,687,941,591,163,5,48,296,379,467,929,1,70,279,21,465,60,178  },
		{ 2,1,14,5,6,29,26,19,25,46,38,17,64,21,12,27,13,10,0,65,23,75,128,96,22,36,3,114,86,45,52,141  },
		{ 15,515,700,82,753,10,0,120,8,197,117,165,260,351,13,1,9,31,64,33,110,22,93,23,457,44,153,2,102,5,77,12  },
		{ 7,97,66,172,2,20,43,29,5,232,6,92,14,74,107,192,52,324,226,16,64,21,135,38,25,32,87,620,35,568,86,65  },
		{ 62,129,123,4,11,162,33,249,183,507,117,64,57,41,153,40,618,128,313,211,77,157,59,152,196,141,86,136,38,328,102,248  },
		{ 15,13,1,515,2,4,115,23,700,77,0,3,341,753,5,217,180,141,51,33,901,197,291,102,317,6,365,177,318,202,165,269  },
		{ 6,26,235,19,145,47,112,27,29,108,78,32,64,42,444,85,236,453,95,630,14,624,25,65,70,648,711,113,632,730,122,99  },
		{ 23,51,13,12,15,10,99,165,515,0,2,64,37,120,31,700,3,117,82,14,1,153,128,93,457,5,753,197,22,38,453,202  },
		{ 16,24,18,5,2,64,71,1,7,10,21,22,146,9,12,247,32,340,156,35,51,118,86,36,15,830,14,199,128,115,60,48  },
		{ 15,515,700,753,0,1,13,2,23,8,3,4,9,51,217,5,115,10,7,341,6,180,317,372,77,457,197,165,22,901,365,11  },
		{ 234,639,49,455,178,77,202,147,142,416,450,5,198,315,557,329,427,0,344,120,113,105,325,518,99,95,884,21,259,318,22,798  },
		{ 1,180,13,36,2,141,115,352,341,55,31,0,165,5,23,64,498,15,4,22,197,10,44,12,137,86,901,3,237,244,752,365  },
		{ 141,15,77,217,13,23,51,1,180,317,120,515,115,137,700,260,269,21,352,291,82,202,64,177,753,5,32,0,351,110,36,450  },
		{ 26,6,19,25,112,42,122,145,396,648,66,27,287,64,32,151,74,45,53,65,113,222,138,624,17,70,0,29,416,5,644,525  },
		{ 5,21,156,49,360,13,522,146,340,271,121,132,60,354,1,727,591,195,32,16,95,165,566,446,279,126,48,141,197,107,31,0  },
		{ 178,259,427,33,4,481,147,612,49,465,77,35,660,929,102,683,344,64,142,120,117,107,61,18,347,263,95,23,450,182,11,5  },
		{ 79,405,94,89,358,468,431,11,37,188,12,111,474,498,734,179,152,413,180,205,115,72,4,13,365,341,752,51,490,339,33,629  },
		{ 16,24,18,35,7,68,0,9,14,1,92,71,2,108,60,22,28,10,55,101,21,118,175,140,69,336,302,65,5,67,12,64  },
		{ 421,386,453,801,730,51,899,33,805,719,514,475,403,523,423,13,457,165,117,102,886,6,494,56,323,576,388,894,15,134,24,7  },
		{ 6,45,113,2,17,5,29,27,311,4,145,80,66,61,74,19,64,614,151,631,491,112,32,209,1,315,7,26,73,25,106,52  },
		{ 188,339,11,79,12,4,33,94,59,471,99,102,37,377,111,77,51,13,474,961,542,40,403,202,23,3,117,128,401,152,184,196  },
		{ 15,4,33,11,515,40,0,8,82,700,10,120,165,110,753,77,93,23,64,260,22,31,13,102,44,197,51,125,12,9,59,141  },
		{ 16,24,35,18,7,0,68,71,14,60,28,1,22,9,5,92,118,21,2,55,10,124,49,13,23,109,65,175,126,101,48,252  },
		{ 17,21,45,3,227,106,62,221,32,48,430,54,209,5,721,38,2,50,400,536,52,56,270,787,207,46,552,14,541,263,29,1  },
		{ 340,354,586,668,658,156,698,9,363,195,296,883,303,18,447,1,98,379,621,48,411,70,51,13,919,846,125,108,163,761,60,5  },
		{ 277,153,12,111,51,474,99,38,23,37,457,79,139,41,453,542,117,13,629,33,188,11,157,14,569,961,89,196,15,401,134,72  },
		{ 16,0,18,9,24,7,35,1,159,49,23,13,2,28,55,68,5,14,60,344,21,137,51,202,101,10,105,128,22,39,424,109  },
		{ 0,9,105,16,18,1,49,21,24,5,23,7,28,13,35,51,320,48,68,202,101,137,39,31,2,170,64,12,158,518,128,55  },
		{ 180,141,1,15,217,317,365,13,341,115,2,515,352,4,0,700,269,5,23,752,3,202,21,753,51,197,901,77,165,64,10,318  },
		{ 4,17,23,33,51,153,19,102,27,196,26,485,300,47,11,77,78,57,40,15,210,880,117,41,5,53,14,342,0,34,12,123  },
		{ 62,56,3,440,184,99,130,229,556,17,152,183,12,136,548,266,14,403,57,305,162,161,775,475,84,202,123,34,128,4,880,361  },
		{ 13,64,23,77,33,0,141,115,51,4,102,21,217,202,269,5,9,180,32,137,318,10,372,291,317,128,117,2,153,7,40,165  },
		{ 1,2,22,36,5,0,13,23,141,28,12,31,64,86,55,10,21,9,51,105,180,7,115,170,165,143,44,341,137,237,67,98  },
		{ 15,515,700,753,0,1,13,2,23,901,82,5,180,8,51,4,9,457,351,120,197,7,260,12,10,3,141,64,898,22,6,341  },
		{ 1,98,39,100,274,265,96,30,190,31,223,909,166,438,382,264,310,530,252,125,21,9,88,593,625,44,812,23,410,254,539,0  },
		{ 1,18,363,212,118,411,447,167,60,478,621,121,16,781,271,647,146,21,354,5,664,13,264,9,48,98,562,223,777,132,23,101  },
		{ 1,7,0,2,24,16,14,28,22,35,65,49,5,21,18,12,9,13,10,55,23,64,95,51,6,159,67,105,158,109,137,128  },
		{ 22,1,36,105,55,131,28,10,0,13,224,98,115,2,286,239,187,86,64,23,180,9,272,31,164,5,533,185,317,197,165,35  },
		{ 28,1,22,0,31,9,23,13,301,36,127,44,98,105,51,2,125,55,141,95,10,5,137,242,21,64,338,395,109,512,86,239  },
		{ 2,1,5,14,58,29,45,46,52,64,17,21,186,6,61,50,7,69,155,151,27,38,75,48,334,12,19,227,13,37,128,24  },
		{ 107,7,2,16,14,97,135,232,43,20,92,35,64,60,38,147,29,192,52,95,5,298,66,0,18,126,362,356,10,387,46,24  },
		{ 20,43,104,7,81,0,784,426,319,414,560,707,52,38,74,819,422,173,97,22,49,64,376,95,861,715,330,32,66,879,526,5  },
		{ 104,66,81,74,636,0,204,65,784,91,64,319,20,145,715,355,194,173,4,879,222,43,25,32,10,6,90,86,97,750,138,29  },
		{ 0,9,101,35,39,68,65,1,30,100,64,88,166,124,28,252,16,21,67,10,22,154,7,24,23,49,83,289,51,364,55,5  },
		{ 14,57,231,236,585,361,4,176,23,13,12,51,719,56,457,369,202,59,38,128,62,300,46,2,11,730,757,34,803,210,342,165  },
		{ 1,2,3,0,141,15,5,515,6,700,180,64,13,128,10,4,269,33,753,77,7,11,202,120,197,12,352,102,17,31,318,117  },
		{ 1,5,259,49,202,178,465,21,23,2,12,48,121,22,13,403,175,132,142,58,6,953,534,269,146,32,3,455,420,90,494,318  },
		{ 79,94,247,11,4,111,205,217,72,37,245,141,12,21,188,59,77,358,115,352,15,405,875,474,76,152,1,23,5,317,515,148  },
		{ 15,515,700,753,0,1,13,2,8,23,4,365,341,3,51,115,5,120,10,31,450,457,961,260,141,44,197,569,55,6,165,9  },
		{ 2,5,1,14,38,17,50,46,45,29,12,58,0,21,13,19,37,3,48,36,23,61,171,6,281,99,27,22,54,67,10,24  },
		{ 457,120,23,64,48,125,795,70,751,761,846,318,96,237,391,165,21,758,291,128,221,202,5,763,77,415,13,87,558,1,260,352  },
		{ 23,51,13,0,12,4,453,40,21,64,33,102,77,10,1,11,2,14,403,65,475,15,153,141,117,180,37,95,196,22,9,7  },
		{ 229,12,99,266,57,152,381,452,313,432,17,4,128,3,37,62,11,157,471,51,453,129,33,202,339,184,59,403,77,775,40,38  },
		{ 49,28,9,131,22,1,35,159,109,36,55,0,39,105,67,254,2,272,13,10,64,175,168,115,95,194,23,83,169,30,31,51  },
		{ 2,1,29,5,17,61,80,45,58,52,6,209,14,106,7,227,64,311,32,243,21,46,75,62,155,496,50,48,3,454,74,38  },
		{ 244,269,352,717,141,110,1,253,137,260,44,30,217,373,276,228,36,341,77,202,839,752,406,318,160,661,180,131,574,219,116,31  },
		{ 12,99,79,453,139,11,474,51,37,277,94,542,196,111,775,401,23,13,33,188,961,40,4,339,313,629,102,485,38,477,15,475  },
		{ 0,9,16,18,35,24,67,1,68,69,64,167,65,7,118,13,21,149,101,212,23,103,230,141,114,5,2,55,71,39,191,28  },
		{ 88,274,30,435,131,190,100,166,613,187,1,960,829,795,530,137,127,382,410,457,219,160,93,39,800,228,264,686,31,367,341,406  },
		{ 18,167,118,16,212,24,9,1,60,71,21,363,0,35,68,375,191,411,48,101,55,589,447,302,13,562,647,92,126,5,121,146  },
		{ 147,77,102,534,465,141,660,120,33,86,581,153,64,612,117,470,107,376,7,97,67,11,134,128,707,448,46,14,1,352,260,202  },
		{ 18,65,403,523,194,475,289,90,102,283,202,214,389,33,217,701,240,421,494,817,0,51,453,64,5,196,899,352,11,3,650,862  },
		{ 13,51,23,15,202,515,120,64,21,5,457,700,165,12,128,0,141,4,403,753,1,115,719,32,2,523,450,318,117,3,401,125  },
		{ 98,223,393,1,271,167,834,791,697,18,541,51,212,5,421,202,446,48,293,284,132,77,807,551,765,360,31,146,801,163,96,386  },
		{ 15,515,700,753,4,11,165,23,110,40,93,51,0,82,180,141,13,64,197,33,120,125,8,10,32,3,22,12,102,31,77,95  },
		{ 15,515,700,753,0,1,13,901,23,2,82,51,8,5,341,180,3,115,351,4,961,9,165,898,10,120,22,12,134,141,260,31  },
		{ 416,234,315,5,639,113,77,325,455,147,198,202,49,142,329,61,450,494,178,43,22,21,427,20,344,318,425,58,858,342,263,112  },
		{ 146,60,156,16,18,10,121,360,199,132,0,271,167,24,340,354,126,522,22,9,118,21,586,296,640,28,92,71,5,33,575,212  },
		{ 4,11,361,14,377,554,161,368,77,300,390,17,78,73,444,210,102,59,56,37,80,38,200,27,19,25,495,341,133,3,53,494  },
		{ 141,82,351,352,120,1,217,260,854,180,13,15,36,21,64,269,752,922,317,515,349,23,372,77,110,700,10,137,373,5,753,177  },
		{ 15,515,700,753,0,1,13,77,2,23,33,51,102,4,5,3,7,9,10,8,6,341,291,217,115,177,11,117,317,180,22,342  },
		{ 15,515,77,13,700,120,753,141,23,180,260,51,1,291,137,365,115,0,202,341,217,197,317,128,269,450,165,110,318,21,9,5  },
		{ 6,174,85,348,138,74,65,25,81,233,91,66,355,63,289,64,42,343,280,7,90,214,104,95,32,192,194,0,204,5,580,353  },
		{ 94,79,497,188,11,111,128,152,216,452,77,12,33,339,59,202,269,474,37,4,38,1,64,99,5,588,102,318,141,115,76,21  },
		{ 417,141,10,244,499,253,8,559,110,260,352,120,564,951,341,206,638,137,752,180,728,901,143,93,642,15,269,717,31,44,373,922  },
		{ 13,23,4,51,33,0,77,128,115,202,11,22,64,59,141,102,40,177,2,137,10,49,90,7,14,1,180,6,269,403,291,32  },
		{ 1,2,0,5,22,12,23,14,51,36,13,10,50,21,7,64,128,28,67,38,86,6,141,137,46,202,9,3,37,49,95,32  },
		{ 17,106,62,3,255,119,5,136,128,378,45,56,64,742,207,84,61,440,655,306,11,32,2,328,10,383,311,80,4,29,14,240  },
		{ 3,1,2,141,5,0,202,128,33,15,64,102,269,515,13,6,318,17,700,120,10,12,51,82,23,77,197,180,11,753,153,117  },
		{ 514,880,328,757,38,57,266,556,361,248,377,11,403,41,471,313,152,130,3,211,305,4,14,157,485,494,369,339,102,54,457,555  },
		{ 1,9,0,264,21,101,100,68,478,88,16,48,167,118,520,39,936,18,13,806,562,777,31,212,24,23,98,191,35,410,124,5  },
		{ 230,689,352,466,213,217,30,699,443,144,418,201,831,1,854,251,840,351,96,855,137,128,539,530,36,203,83,752,957,44,190,82  },
		{ 64,13,128,23,141,51,0,202,77,33,4,15,40,22,269,1,102,515,10,137,95,318,403,2,700,65,115,59,453,180,6,11  },
		{ 11,40,33,51,13,117,542,328,12,134,38,14,23,153,54,37,775,377,111,231,211,139,102,3,485,475,99,266,403,305,453,4  },
		{ 33,141,1,77,64,2,202,128,0,23,3,102,51,13,269,10,15,6,5,40,318,515,117,137,180,153,165,700,134,7,22,82  },
		{ 15,515,700,753,4,11,5,93,1,13,33,21,23,64,82,77,180,141,2,102,32,40,3,98,110,117,341,0,120,10,134,352  },
		{ 1,2,14,0,5,38,67,46,28,24,12,50,36,29,22,21,10,18,65,7,13,64,96,23,83,114,54,103,52,133,6,128  },
		{ 160,137,258,202,295,141,96,44,843,943,276,201,144,261,244,187,219,268,116,860,31,269,1,318,93,55,36,567,82,21,284,110  },
		{ 7,2,14,16,5,46,92,38,75,21,64,29,87,52,1,35,140,24,12,278,70,60,58,32,0,97,37,6,10,48,69,66  },
		{ 13,23,1,2,0,51,4,33,115,141,217,77,180,5,10,15,3,64,6,7,102,317,515,11,9,40,202,197,700,352,22,341  },
		{ 66,74,25,6,145,42,204,26,7,29,192,138,525,337,174,222,746,544,135,43,5,173,287,19,32,415,81,64,20,0,712,1  },
		{ 141,13,23,77,33,202,180,51,4,64,269,15,217,21,102,128,137,0,515,352,115,2,318,11,700,5,10,317,98,32,165,125  },
		{ 187,258,871,219,160,137,574,36,926,202,839,131,442,228,908,531,44,860,201,318,406,224,613,116,800,96,276,494,1,31,902,22  },
		{ 1,372,5,225,349,744,23,21,13,96,291,77,30,303,459,330,189,141,120,144,167,217,166,622,691,521,160,934,686,335,321,88  },
		{ 66,2,7,6,74,222,29,87,135,25,52,145,294,97,172,337,42,331,64,138,70,226,43,26,5,112,1,32,0,22,500,461  },
		{ 17,45,3,2,29,5,106,21,14,48,56,209,243,38,400,207,186,255,270,155,119,62,64,1,290,80,54,46,11,425,50,32  },
		{ 88,30,93,213,120,141,260,373,82,100,459,217,450,321,166,291,77,372,110,180,410,326,131,473,457,351,225,466,908,190,264,115  },
		{ 266,57,152,12,99,381,313,3,471,62,37,157,369,4,339,775,475,38,77,17,162,128,403,59,229,129,56,453,188,11,328,361  },
		{ 317,217,15,352,752,141,515,700,180,753,372,77,365,120,341,349,98,291,21,82,64,244,144,351,102,13,115,10,5,269,901,125  },
		{ 14,514,102,369,51,23,13,719,11,153,403,4,880,377,457,33,40,401,453,328,117,57,134,12,629,670,38,485,730,236,2,165  },
		{ 7,107,14,172,135,92,60,46,64,77,97,2,54,35,278,4,259,312,16,38,33,5,132,126,279,232,32,314,707,330,43,20  },
		{ 0,25,13,23,33,19,12,5,65,4,90,77,51,18,216,26,22,59,21,27,45,102,37,283,145,91,42,141,31,214,32,11  },
		{ 5,49,202,315,197,455,350,450,416,77,21,137,639,408,494,509,318,329,64,344,402,308,347,0,569,13,873,713,194,95,165,734  },
		{ 130,381,47,390,59,200,6,472,29,65,50,90,52,714,214,289,74,85,64,32,648,874,26,122,624,249,751,78,19,881,247,194  },
		{ 453,51,23,719,165,457,13,730,197,386,12,37,120,5,475,64,99,15,961,899,17,202,391,515,523,11,6,115,401,700,177,32  },
		{ 15,515,700,1,13,2,753,23,0,5,3,180,51,12,165,4,21,141,115,457,7,6,197,10,9,352,120,202,8,341,117,37  },
		{ 0,9,1,28,13,35,67,5,16,21,2,23,18,24,22,141,39,65,68,7,12,115,50,64,10,51,30,128,114,48,137,69  },
		{ 1,0,28,22,9,2,105,21,23,16,36,13,49,31,35,24,5,109,7,64,51,95,55,141,98,170,10,12,65,125,127,320  },
		{ 202,51,33,4,102,77,128,13,141,11,403,23,40,0,117,494,318,269,475,153,64,59,15,10,1,134,137,2,515,342,115,22  },
		{ 13,23,0,51,77,4,141,2,1,33,64,10,115,217,11,3,6,102,180,22,7,40,15,5,202,177,269,128,9,515,165,137  },
		{ 456,8,492,116,949,499,391,479,10,203,268,867,506,31,51,386,13,93,23,685,0,417,870,509,341,719,143,762,457,44,1,125  },
		{ 237,180,17,45,498,115,32,106,255,64,62,365,153,136,21,752,247,241,4,864,41,546,15,3,13,482,77,12,117,129,57,23  },
		{ 1,15,180,341,515,4,2,0,901,700,3,352,752,115,317,5,217,13,753,365,141,23,197,21,51,77,11,165,6,202,33,22  },
		{ 205,141,4,79,588,497,452,216,152,77,875,94,59,11,474,23,13,51,1,33,12,247,72,269,188,961,128,111,148,37,217,89  },
		{ 752,64,247,317,237,180,349,352,141,498,217,864,372,579,15,954,365,515,482,437,115,695,191,700,640,753,490,478,269,225,177,33  },
		{ 2,1,0,5,15,13,3,141,33,6,77,180,515,64,7,23,4,700,10,102,117,217,11,197,352,165,40,753,14,115,12,153  },
		{ 11,328,40,38,313,339,41,157,33,12,369,542,457,775,57,719,475,305,377,23,188,14,99,54,4,37,961,248,117,79,51,485  },
		{ 33,4,77,23,40,0,128,51,13,102,10,202,22,15,59,141,269,64,196,177,65,180,153,318,1,137,117,11,36,515,18,210  },
		{ 80,472,34,495,161,4,250,106,469,128,14,176,527,283,2,17,483,297,33,389,53,11,436,255,3,179,194,73,40,6,269,57  },
		{ 141,352,752,217,180,317,15,115,244,515,269,700,253,365,341,372,202,753,197,498,1,143,901,137,10,873,349,318,2,28,64,21  },
		{ 9,39,18,101,16,100,121,265,1,60,30,252,0,520,167,24,254,31,166,553,333,35,364,593,329,118,21,5,404,310,68,7  },
		{ 15,1,515,180,0,700,2,901,753,341,3,4,115,5,365,752,13,317,197,23,141,217,165,6,352,7,33,22,498,77,10,9  },
		{ 39,9,131,1,166,0,829,613,30,100,578,827,98,96,31,716,406,224,254,310,616,137,88,228,36,44,265,219,13,21,51,438  },
		{ 17,352,64,62,41,751,476,954,217,141,106,57,292,237,4,180,211,11,136,117,313,312,129,40,157,38,864,214,86,33,32,54  },
		{ 65,25,42,650,235,6,630,605,389,123,85,736,141,122,63,26,233,343,194,108,19,256,368,416,138,174,444,297,511,249,283,78  },
		{ 184,229,152,57,266,12,432,17,99,452,381,619,128,4,497,313,257,3,59,157,202,205,339,471,129,37,77,11,403,369,64,5  },
		{ 137,202,30,39,9,160,141,22,131,98,36,318,49,800,261,1,187,295,105,10,943,269,77,115,851,276,843,217,127,96,822,244  },
		{ 0,493,125,9,279,14,10,35,64,18,293,55,194,132,49,389,147,48,107,31,612,165,20,289,137,21,453,342,93,43,13,325  },
		{ 15,515,700,753,33,77,13,4,23,93,31,8,102,349,51,5,64,32,10,110,44,117,40,141,21,202,11,82,0,177,291,22  },
		{ 110,253,854,352,811,141,244,951,498,384,143,661,642,10,180,269,317,261,137,752,911,120,638,902,533,206,160,873,959,217,922,559  },
		{ 2,29,26,6,1,19,70,75,52,5,112,25,220,163,145,69,46,21,14,74,331,58,27,7,67,50,38,324,66,12,64,409  },
		{ 23,13,77,33,0,51,141,4,102,115,64,2,177,202,40,128,269,10,1,11,6,291,59,318,32,180,15,7,217,3,22,117  },
		{ 340,478,691,382,897,658,88,363,100,914,156,812,698,1,724,166,264,96,521,30,39,447,303,411,682,404,296,656,9,274,438,410  },
		{ 9,18,101,77,51,16,33,326,7,158,159,363,24,14,121,55,40,4,167,120,310,291,156,50,1,494,48,6,557,195,137,21  },
		{ 57,313,12,99,471,369,157,339,475,38,775,328,37,453,514,152,266,403,40,342,59,77,51,401,361,14,4,880,11,33,377,139  },
		{ 16,7,24,35,60,14,1,18,140,92,2,71,46,69,21,230,189,9,388,0,108,5,48,38,64,150,172,50,121,12,6,13  },
		{ 206,417,93,8,499,959,559,940,473,137,203,728,31,141,260,10,22,564,202,120,44,269,638,318,1,0,244,116,642,450,341,110  },
		{ 15,515,700,753,0,1,13,2,23,4,3,5,7,51,217,8,77,115,9,341,10,33,6,349,317,180,165,291,901,457,11,197  },
		{ 1,2,5,14,0,21,32,7,38,46,17,48,29,45,3,72,50,10,6,36,76,64,23,128,290,22,52,12,155,51,37,16  },
		{ 132,121,354,146,223,1,167,98,18,668,271,463,195,407,447,60,48,212,446,522,360,781,393,156,363,13,21,55,411,5,9,807  },
		{ 131,371,578,219,224,187,105,385,716,36,9,616,23,49,258,737,137,0,51,28,1,761,910,22,39,13,159,916,98,31,96,871  },
		{ 1,24,15,467,398,13,515,117,2,700,97,36,717,801,730,719,33,753,523,51,899,453,153,124,102,66,341,134,302,150,6,5  },
		{ 30,1,190,100,530,539,778,88,96,731,625,960,382,9,410,36,840,274,957,748,223,131,39,264,0,160,669,321,23,144,251,418  },
		{ 1,2,141,0,3,5,64,128,15,202,33,180,515,77,269,13,197,10,102,6,700,82,120,4,23,753,165,318,137,12,11,352  },
		{ 201,44,131,268,224,567,295,116,489,434,219,144,662,110,261,384,187,137,31,699,244,30,77,141,36,1,442,120,228,115,96,613  },
		{ 12,51,15,23,37,99,515,0,13,700,10,753,38,165,453,197,22,82,629,120,569,1,115,401,2,474,9,457,14,3,31,64  },
		{ 7,2,14,16,135,92,5,172,29,35,6,140,66,1,97,24,74,52,38,64,46,21,22,12,60,324,32,278,10,0,571,226  },
		{ 949,963,60,125,23,391,386,118,719,51,193,834,221,791,558,77,801,421,551,36,18,566,474,401,758,91,541,13,165,393,150,6  },
		{ 85,6,42,25,289,64,138,174,222,525,65,235,95,256,280,312,544,214,90,746,19,204,26,194,348,337,32,874,63,22,145,736  },
		{ 1,0,5,14,2,21,24,50,18,67,10,16,9,48,36,23,22,12,13,64,28,7,38,54,46,45,32,37,69,128,58,51  },
		{ 811,351,642,951,752,638,180,253,10,110,352,82,197,341,365,9,499,564,873,22,55,417,282,28,244,901,143,854,559,206,36,115  },
		{ 13,23,51,15,0,523,165,403,515,202,453,719,1,700,457,14,730,197,475,12,120,386,10,4,753,9,2,128,64,33,99,21  },
		{ 120,77,141,13,23,93,217,82,1,260,352,15,180,102,202,51,21,269,137,854,515,351,165,64,110,318,291,5,128,33,752,700  },
		{ 1,0,5,2,22,12,13,23,10,21,51,9,4,36,32,3,202,128,28,141,64,115,37,77,7,48,14,86,137,49,17,31  },
		{ 23,308,51,127,170,165,13,301,98,401,219,55,125,10,242,258,1,36,115,629,143,365,116,31,64,743,395,206,180,0,237,197  },
		{ 64,180,237,498,165,2,34,80,3,365,297,197,250,62,29,27,196,176,115,61,5,153,117,445,58,33,482,231,21,10,316,46  },
		{ 77,23,33,13,1,2,0,141,51,64,102,3,6,115,269,40,15,202,10,7,5,128,180,177,217,515,4,14,318,22,700,17  },
		{ 15,515,450,120,730,51,13,23,700,153,196,523,202,141,753,165,457,719,128,33,386,21,64,4,260,5,453,32,403,0,475,401  },
		{ 2,1,5,14,7,29,32,6,0,45,64,128,3,17,21,76,10,4,58,12,141,48,46,72,38,207,52,263,50,22,186,36  },
		{ 15,515,700,753,4,13,11,23,5,1,21,32,33,3,40,2,141,31,0,117,120,102,44,180,64,51,269,202,17,12,352,37  },
		{ 5,2,17,129,76,123,214,1,45,128,14,460,6,249,90,64,205,99,141,184,618,710,179,257,162,32,519,12,106,3,38,33  },
		{ 1,15,141,23,515,120,202,13,51,700,0,180,137,21,2,352,753,128,102,326,77,269,165,33,5,260,197,82,110,318,9,93  },
		{ 7,2,14,29,135,66,97,52,5,16,172,87,64,20,6,70,43,21,107,92,32,112,46,35,1,58,38,24,337,10,461,262  },
		{ 187,574,926,531,269,860,258,141,384,244,160,434,253,110,261,116,717,219,533,699,902,36,940,224,10,959,871,143,137,318,352,201  },
		{ 156,296,354,586,340,698,18,1,64,379,195,77,48,182,163,937,291,457,202,117,23,850,223,33,153,96,481,751,102,60,21,7  },
		{ 34,250,176,33,80,472,231,585,4,495,56,527,11,14,469,153,161,84,17,64,59,667,833,102,77,141,117,40,297,57,887,814  },
		{ 81,92,192,66,6,97,69,74,140,298,7,172,5,462,24,91,712,314,29,0,715,104,267,20,32,21,14,681,125,63,120,43  },
		{ 44,31,144,116,0,1,268,384,9,98,434,127,206,22,93,203,492,137,918,393,489,10,332,367,911,13,141,105,23,202,51,456  },
		{ 3,1,13,2,141,51,202,128,64,5,120,15,0,33,23,82,403,165,197,515,102,10,269,700,17,318,6,153,12,180,196,4  },
		{ 0,9,1,31,98,28,44,22,127,2,105,23,13,125,21,141,51,5,242,137,49,512,299,36,116,16,202,293,7,24,395,165  },
		{ 7,1,6,18,2,124,97,23,5,21,24,0,14,92,29,66,69,13,28,22,36,25,16,74,67,81,32,118,43,48,20,51  },
		{ 1,67,442,154,284,303,622,202,429,167,919,447,260,64,191,141,120,682,340,335,44,547,82,349,33,237,201,98,917,411,351,180  },
		{ 1,2,15,141,0,515,180,3,13,5,700,33,4,753,64,197,10,77,6,102,165,7,269,11,352,23,120,341,12,752,93,349  },
		{ 99,139,12,453,196,277,215,775,475,401,11,77,40,33,130,14,111,51,211,129,313,15,37,23,266,38,515,719,474,339,700,477  },
		{ 128,33,202,4,141,102,64,77,0,11,23,318,40,269,13,137,1,10,51,153,115,3,403,59,117,22,196,32,2,65,180,90  },
		{ 7,2,14,16,5,128,32,0,21,64,58,70,18,141,23,77,6,1,38,35,112,10,13,46,24,22,202,9,4,177,40,29  },
		{ 1,13,15,2,0,515,5,700,3,23,4,753,51,115,10,180,365,341,11,6,77,7,33,197,12,165,317,9,64,901,14,117  },
		{ 2,1,14,24,6,67,29,16,75,38,52,46,69,18,25,5,103,0,7,83,12,26,87,70,96,36,21,19,65,220,74,108  },
		{ 9,18,137,105,326,39,557,0,310,16,100,33,77,1,102,890,265,128,252,23,51,272,31,21,120,159,49,48,44,938,35,13  },
		{ 6,80,2,45,61,17,209,29,667,64,5,1,27,19,106,255,14,25,26,454,112,151,70,833,56,738,3,483,128,73,378,32  },
		{ 13,23,51,15,515,5,21,700,1,753,141,0,202,12,165,32,180,2,197,120,115,457,4,3,269,128,9,64,33,719,341,10  },
		{ 12,99,453,277,474,37,139,51,38,369,157,339,775,401,328,196,475,188,111,313,266,23,471,11,4,629,153,14,57,102,54,79  },
		{ 7,16,92,60,126,97,107,35,66,232,140,14,104,298,0,64,2,22,289,150,95,24,5,65,21,387,246,38,230,90,132,32  },
		{ 13,23,202,4,318,51,141,33,403,269,11,90,77,32,177,5,342,210,115,7,82,217,14,494,102,0,317,128,31,341,21,3  },
		{ 13,0,2,1,23,141,77,3,51,33,180,5,217,15,6,115,64,4,165,7,515,10,197,102,269,14,700,40,11,352,17,341  },
		{ 15,515,700,753,4,93,110,11,13,1,5,82,120,180,21,33,23,165,2,141,102,10,3,341,197,32,117,0,153,31,901,351  },
		{ 15,515,700,753,1,13,0,2,23,77,51,4,3,5,7,9,291,115,10,341,6,8,33,217,165,11,102,177,180,197,22,120  },
		{ 20,43,198,104,325,173,147,66,904,234,7,319,97,2,450,426,202,77,861,0,712,107,38,422,5,142,81,725,427,192,376,178  },
		{ 0,1,9,28,16,49,105,21,23,7,24,13,22,2,31,35,301,64,51,18,170,125,5,159,65,44,10,48,127,36,55,109  },
		{ 213,88,466,689,30,230,435,321,699,217,352,201,144,854,31,795,418,530,190,831,251,44,96,93,1,662,840,317,443,203,83,855  },
		{ 130,453,4,57,196,47,59,236,14,730,51,77,153,711,23,202,108,412,13,381,117,719,361,128,283,34,11,183,402,210,475,457  },
		{ 1,2,5,0,14,12,22,23,128,36,38,10,13,51,21,7,50,6,64,28,86,3,46,202,137,29,65,141,17,9,37,67  },
		{ 6,19,26,165,730,74,453,14,391,47,50,719,308,13,51,27,78,457,29,2,262,1,108,17,197,558,357,46,386,125,42,34  },
		{ 9,10,20,43,18,49,30,0,104,2,725,858,120,501,137,55,39,174,31,788,414,904,600,455,14,95,37,389,289,194,77,64  },
		{ 15,515,700,0,753,1,13,77,120,23,51,202,9,341,82,5,141,2,10,260,4,137,351,901,8,197,128,180,22,115,450,165  },
		{ 105,131,272,9,187,578,616,286,49,219,22,371,98,31,224,28,320,13,64,23,0,125,36,127,51,258,10,716,910,141,44,1  },
		{ 457,13,23,51,961,719,12,453,15,3,515,99,4,700,11,401,0,753,629,165,2,57,17,14,41,40,37,1,33,62,79,5  },
		{ 120,260,202,403,523,5,33,817,450,318,494,77,351,457,12,82,269,64,165,102,326,23,21,15,17,13,922,475,854,128,32,453  },
		{ 64,141,15,515,269,700,352,217,753,180,372,349,22,317,237,752,36,82,365,95,160,137,197,86,28,922,864,335,143,120,622,437  },
		{ 6,29,26,74,2,145,70,19,112,1,5,75,632,66,52,25,87,7,64,287,409,135,27,294,69,14,396,226,21,17,10,644  },
		{ 82,15,351,515,180,752,898,700,901,352,753,10,115,317,217,141,854,197,341,1,55,160,36,21,498,365,33,120,165,143,110,32  },
		{ 39,9,30,0,310,49,16,100,1,252,105,101,254,18,272,21,190,31,557,166,455,98,625,24,709,265,159,520,333,68,44,13  },
		{ 2,1,29,58,5,7,52,14,151,64,45,186,46,6,113,70,21,32,27,549,75,10,400,128,61,4,112,17,155,48,50,19  },
		{ 141,217,77,317,115,269,64,352,349,180,21,202,102,372,13,752,23,33,137,165,0,9,22,5,365,318,51,15,341,177,32,291  },
		{ 0,9,68,101,35,1,7,24,16,2,28,65,124,18,67,21,14,154,64,36,13,55,149,175,22,51,5,23,69,39,10,12  },
		{ 7,66,2,52,20,14,29,97,112,5,43,0,192,173,6,74,32,21,525,172,90,4,16,58,226,135,216,22,415,77,64,177  },
		{ 31,22,125,1,36,23,44,13,64,116,55,10,0,170,28,51,242,299,180,479,206,558,137,2,164,870,143,456,141,740,506,115  },
		{ 12,79,188,11,99,94,33,377,542,474,40,4,111,453,37,102,51,339,139,775,475,23,961,13,128,277,117,196,403,153,134,152  },
		{ 658,698,340,98,296,303,31,44,919,850,1,363,354,82,586,260,120,10,385,77,30,774,48,478,163,349,291,9,668,854,293,269  },
		{ 15,515,700,753,82,901,4,197,1,165,120,13,180,11,10,5,33,115,365,21,2,77,0,3,217,401,117,642,37,102,342,23  },
		{ 15,515,700,753,4,11,13,5,23,1,180,141,21,3,165,40,0,2,32,64,202,197,12,269,33,352,31,51,125,120,318,117  },
		{ 91,370,718,81,6,233,85,65,256,25,63,42,397,235,74,355,138,511,26,650,64,18,123,87,348,194,343,249,544,0,141,643  },
		{ 13,1,23,120,202,5,21,51,403,260,494,450,2,14,7,31,318,165,82,12,48,197,15,93,457,141,33,9,128,125,16,515  },
		{ 180,317,365,341,752,217,115,352,901,372,482,498,15,515,700,579,753,141,77,253,291,4,1,0,2,21,13,244,3,349,120,96  },
		{ 197,13,9,115,901,341,468,23,180,509,482,22,546,873,857,217,64,28,498,86,317,237,141,837,569,365,352,708,254,165,752,751  },
		{ 13,23,51,120,202,21,1,141,15,5,260,33,165,64,125,180,115,4,197,93,2,515,82,269,32,450,102,128,12,700,457,318  },
		{ 214,289,90,174,65,874,81,6,64,355,85,138,280,91,751,233,194,249,835,312,29,0,343,636,288,875,74,348,104,32,519,247  },
		{ 15,515,700,753,4,11,13,5,23,1,21,33,32,2,3,102,31,77,141,44,40,180,64,22,117,0,37,196,115,134,6,120  },
		{ 13,23,51,141,0,33,15,2,1,217,4,180,77,64,115,515,10,3,700,5,22,40,202,102,11,6,197,352,317,269,165,7  },
		{ 15,515,700,753,33,77,4,102,13,40,117,115,11,134,1,23,217,153,120,317,5,21,3,110,2,196,260,141,32,93,180,51  },
		{ 15,515,700,753,0,1,13,2,217,8,23,9,3,317,10,115,4,5,51,22,341,457,365,180,7,6,31,901,28,197,30,202  },
		{ 7,376,470,14,135,5,2,673,52,20,97,64,147,66,10,22,16,29,192,43,595,107,355,353,21,104,0,331,46,32,4,77  },
		{ 77,132,195,142,202,647,60,146,35,167,121,363,178,16,234,271,102,621,147,33,55,101,318,639,158,18,28,354,212,98,687,109  },
		{ 20,43,7,66,97,173,104,112,216,2,177,58,750,319,269,74,29,0,202,318,52,5,90,81,77,789,32,678,580,337,128,222  },
		{ 107,97,362,43,20,259,147,359,7,414,612,392,465,173,35,356,5,14,298,819,126,319,683,92,729,246,178,279,230,142,132,49  },
		{ 6,14,386,19,165,51,453,401,457,758,26,23,730,366,74,719,391,603,475,29,50,138,308,867,324,27,13,309,47,33,108,133  },
		{ 179,72,94,79,490,205,148,4,11,247,405,245,152,468,59,89,76,37,111,188,352,474,197,498,180,12,452,431,1,317,497,5  },
		{ 107,7,121,0,279,22,14,32,60,97,493,581,95,13,10,314,534,298,35,23,16,147,49,786,12,362,441,178,126,132,172,9  },
		{ 156,354,586,1,340,18,5,13,271,21,121,48,132,195,668,23,70,60,591,658,296,55,698,463,446,51,407,360,221,163,150,58  },
		{ 13,23,51,457,0,15,515,4,165,2,1,700,12,453,961,11,753,10,403,3,475,14,719,5,99,115,40,401,197,64,37,6  },
		{ 125,423,165,92,508,763,441,314,102,386,197,356,13,457,140,120,48,193,23,99,21,31,126,43,858,49,16,758,719,293,279,33  },
		{ 77,142,120,604,195,167,234,147,523,18,682,132,203,615,354,202,419,82,5,692,450,326,10,576,271,252,109,121,102,639,22,178  },
		{ 39,166,30,9,0,101,190,68,21,131,274,404,100,252,1,88,310,158,35,49,36,333,28,13,48,31,22,16,530,344,419,438  },
		{ 15,515,700,753,110,4,93,82,165,1,120,11,180,2,197,5,13,33,0,10,3,21,23,102,115,32,77,352,117,217,317,134  },
		{ 2,29,1,6,5,19,14,26,52,108,21,114,17,27,38,133,12,262,67,218,70,46,112,58,25,103,34,24,487,65,45,236  },
		{ 77,15,515,141,120,13,317,217,23,700,1,260,202,753,291,137,51,180,128,21,269,177,102,0,82,110,318,326,450,165,93,203  },
		{ 255,297,554,358,59,183,33,444,77,123,196,56,122,153,269,108,177,57,117,50,19,605,467,4,130,134,42,275,291,210,152,133  },
		{ 13,23,51,12,117,99,14,153,401,120,165,134,38,453,475,719,15,54,0,197,33,515,403,40,37,2,1,700,386,753,260,108  },
		{ 33,174,348,120,108,64,467,56,554,355,233,343,95,77,29,13,707,319,63,6,0,511,412,312,543,306,256,671,297,450,85,370  },
		{ 120,202,93,23,77,51,260,13,318,64,141,110,326,82,137,450,33,15,1,269,165,102,21,203,515,128,125,177,700,373,197,386  },
		{ 15,515,700,753,4,11,13,5,1,21,23,2,32,33,3,22,64,93,180,82,102,77,40,141,0,31,10,341,6,117,37,115  },
		{ 15,515,700,341,753,141,13,217,33,23,1,4,77,180,0,317,10,21,5,351,365,102,82,137,260,901,115,64,197,202,372,11  },
		{ 105,272,131,28,64,22,286,320,327,9,239,55,109,578,1,49,51,371,10,125,23,98,0,224,13,219,170,164,127,187,95,115  },
		{ 16,18,35,68,60,24,118,9,71,1,0,21,101,92,126,14,7,55,13,107,28,5,49,48,191,10,212,150,154,175,125,121  },
		{ 20,147,43,470,142,904,178,798,427,376,198,0,325,319,858,14,107,97,595,422,61,202,22,173,945,259,263,887,725,392,32,5  },
		{ 13,23,51,12,33,99,128,64,15,453,40,202,102,515,37,141,700,38,5,0,14,403,115,153,3,2,753,139,196,77,21,401  },
		{ 62,383,56,136,17,3,440,84,119,128,504,80,129,123,240,14,548,64,4,38,11,361,555,106,59,5,32,202,12,328,318,162  },
		{ 70,5,13,846,883,668,1,818,518,23,768,562,767,761,21,379,260,64,586,296,120,48,623,125,340,49,558,87,391,269,195,82  },
		{ 66,6,97,74,7,14,278,69,21,135,2,25,841,1,324,189,140,350,335,16,85,38,357,92,24,550,582,5,267,32,462,29  },
		{ 23,51,13,33,40,102,12,202,77,453,64,475,128,10,99,4,0,117,196,403,14,141,139,134,153,65,2,120,22,5,59,1  },
		{ 88,264,100,166,772,1,274,435,96,921,478,639,382,438,897,960,410,909,521,466,329,30,9,190,418,682,321,691,265,411,335,530  },
		{ 62,440,136,56,84,3,548,504,128,555,328,361,202,14,472,4,38,17,161,495,402,27,507,129,33,80,34,514,11,383,215,152  },
		{ 911,141,332,253,244,617,959,206,282,120,951,160,260,384,352,269,110,531,10,143,717,137,373,728,36,417,93,434,533,55,811,559  },
		{ 120,77,260,33,15,82,351,141,450,13,515,102,291,23,700,217,1,110,5,64,326,180,21,269,753,203,177,165,922,523,373,318  },
		{ 15,515,700,753,0,1,2,23,13,51,5,901,82,180,9,120,3,93,8,4,197,141,6,125,110,341,10,730,33,7,260,165  },
		{ 7,107,104,66,97,232,289,14,64,356,560,298,38,65,214,43,20,0,92,5,90,22,707,32,192,874,324,194,95,568,2,359  },
		{ 6,1,2,14,24,66,7,108,67,25,29,65,69,74,36,114,19,451,38,83,458,594,103,26,42,23,13,150,86,711,18,16  },
		{ 13,23,51,719,15,457,64,12,165,515,0,120,523,21,1,141,730,5,202,700,128,99,453,450,3,2,403,10,961,37,753,197  },
		{ 57,4,59,11,412,77,381,53,291,250,14,368,108,369,339,99,27,803,421,23,210,19,17,236,56,40,554,403,444,361,80,78  },
		{ 15,515,700,753,1,0,2,23,13,5,180,51,3,115,82,457,901,6,4,7,141,120,9,719,197,12,110,64,165,8,33,21  },
		{ 146,247,180,929,5,64,522,288,626,360,95,955,32,132,316,4,90,13,317,21,581,60,12,126,77,1,7,11,579,40,177,33  },
		{ 15,515,1,700,13,753,23,0,120,51,180,141,33,77,202,2,5,137,260,165,128,197,21,102,110,9,82,269,318,342,450,7  },
		{ 16,14,2,7,24,35,1,69,46,5,18,38,0,21,60,75,29,50,12,64,140,67,92,48,9,52,71,10,22,70,37,6  },
		{ 98,31,0,127,9,44,1,137,116,299,22,49,276,28,51,293,125,284,202,23,13,105,36,131,456,201,21,144,599,39,141,10  },
		{ 6,27,53,19,297,73,151,436,26,445,34,573,113,25,250,17,200,491,42,315,396,145,881,112,74,45,1,65,611,64,32,58  },
		{ 32,90,788,693,21,56,804,397,81,84,725,18,64,681,526,510,99,65,33,0,115,701,180,690,365,350,289,214,77,835,825,247  },
		{ 7,24,14,2,18,65,1,0,16,6,22,28,69,108,9,64,149,36,35,71,66,21,38,67,13,68,95,10,140,92,23,5  },
		{ 0,9,1,68,101,329,35,83,39,115,100,252,88,69,50,64,114,141,21,702,149,65,23,124,67,265,13,166,4,5,264,103  },
		{ 5,2,17,1,29,45,61,186,52,80,14,21,48,58,155,46,3,171,32,50,6,64,38,106,227,4,209,311,128,243,513,54  },
		{ 15,515,700,753,1,13,2,4,3,0,341,5,23,10,11,33,6,51,7,365,165,901,77,12,115,197,14,9,180,64,40,8  },
		{ 15,13,515,23,700,753,0,51,1,10,961,2,4,165,12,3,197,5,457,33,115,9,77,102,22,202,11,180,64,719,40,403  },
		{ 15,515,700,753,0,13,1,23,2,33,102,5,9,10,4,115,51,3,7,77,6,12,341,217,11,40,18,457,569,117,165,8  },
		{ 39,166,274,190,30,333,36,1,100,88,9,252,539,438,530,0,656,310,21,265,131,625,101,13,23,96,676,158,83,228,254,724  },
		{ 734,148,431,413,89,79,37,94,115,629,308,197,474,179,12,873,341,13,111,11,468,59,180,188,401,152,4,247,205,51,569,901  },
		{ 539,228,219,224,190,816,30,258,840,871,669,957,530,531,160,406,131,187,748,137,88,863,839,36,93,318,1,202,213,39,679,466  },
		{ 393,175,791,801,730,22,110,345,551,51,23,788,13,575,601,126,125,33,4,0,455,120,77,386,421,326,102,68,133,958,21,949  },
		{ 13,23,77,141,4,0,2,33,51,115,3,64,6,1,40,10,180,11,217,128,7,102,177,202,269,318,15,22,165,5,32,9  },
		{ 2,7,14,29,52,1,70,46,5,6,58,16,112,87,25,38,66,75,21,12,64,45,19,32,69,171,220,135,17,37,307,24  },
		{ 88,321,213,30,230,435,100,1,689,382,466,352,217,699,144,36,96,410,190,854,317,795,418,752,83,206,831,203,921,251,201,39  },
		{ 363,101,9,520,411,364,354,96,18,13,765,5,77,1,132,23,156,223,252,905,33,668,146,44,31,195,759,447,98,51,102,121  },
		{ 13,23,51,719,730,453,401,12,403,15,21,457,2,165,515,5,0,523,1,475,197,115,6,700,99,10,32,899,33,386,77,753  },
		{ 72,12,37,4,528,38,76,51,89,308,54,23,99,401,474,431,428,59,184,57,90,205,21,2,11,1,115,405,0,179,152,629  },
		{ 20,43,147,376,97,470,173,107,142,5,319,178,595,7,427,32,414,819,858,61,426,729,14,259,21,0,38,246,798,362,230,104  },
		{ 15,269,515,202,318,137,0,700,141,753,10,77,22,64,182,120,291,36,30,28,128,98,494,33,31,349,352,102,415,195,125,70  },
		{ 202,128,269,318,494,13,23,51,77,15,33,515,102,0,700,2,753,403,342,291,3,137,6,141,7,64,11,22,117,1,12,153  },
		{ 253,951,352,110,499,638,244,10,752,141,811,559,8,854,564,143,642,341,417,901,180,260,206,15,498,197,911,282,515,93,137,922  },
		{ 141,13,180,23,217,4,21,317,352,5,115,51,64,1,269,197,2,498,341,202,752,77,318,32,365,291,33,3,9,901,15,30  },
		{ 16,18,9,0,101,24,35,68,39,252,49,60,118,1,22,7,364,5,71,158,21,28,333,100,10,167,109,329,48,31,30,265  },
		{ 28,0,39,49,1,9,22,109,35,158,2,55,67,175,23,36,30,86,95,51,21,83,13,168,105,10,5,7,64,65,159,24  },
		{ 15,1,515,13,700,2,3,0,4,23,753,5,341,11,33,51,901,6,77,115,197,365,180,40,10,7,317,102,12,217,165,9  },
		{ 173,693,104,422,18,25,102,66,784,397,344,61,49,33,6,0,20,32,707,42,207,22,135,10,510,560,29,5,526,226,91,9  },
		{ 386,801,949,102,51,719,341,117,23,120,958,33,134,13,670,165,730,421,758,365,770,450,15,342,791,67,197,457,21,867,308,260  },
		{ 0,16,1,9,49,24,28,105,18,7,2,35,21,13,23,5,159,14,68,55,158,137,170,10,36,64,65,51,109,95,31,239  },
		{ 2,1,5,14,32,6,29,7,45,207,17,76,64,128,3,0,21,58,61,13,263,72,119,4,38,23,141,90,33,40,10,655  },
		{ 197,125,64,21,33,165,241,509,120,408,115,108,324,6,350,97,511,63,412,713,283,901,715,370,467,391,141,5,841,237,278,77  },
		{ 612,325,107,427,49,376,392,64,362,125,470,98,465,5,788,31,147,14,534,104,43,20,21,660,174,70,904,725,518,422,202,95  },
		{ 1,2,32,21,14,76,5,0,72,37,38,3,155,89,12,221,48,90,17,36,50,46,10,23,4,45,64,54,413,350,99,241  },
		{ 24,7,16,0,14,28,18,1,35,2,9,22,55,10,65,124,68,21,154,149,67,71,12,13,23,51,175,109,108,92,46,36  },
		{ 1,5,14,2,0,50,38,21,10,48,24,67,32,23,64,7,12,46,45,36,51,17,16,128,22,9,54,37,13,72,141,3  },
		{ 37,15,961,13,474,94,629,23,197,515,111,79,700,134,401,12,569,148,901,115,753,51,734,413,405,341,152,117,188,4,59,11  },
		{ 51,23,202,128,33,13,77,102,141,64,40,318,12,99,403,2,1,269,15,0,4,137,153,453,14,120,117,82,515,22,196,180  },
		{ 0,1,9,5,16,24,18,2,23,13,28,67,21,35,7,22,51,12,141,50,69,96,14,64,103,10,115,65,128,48,37,137  },
		{ 384,617,940,206,332,141,253,244,911,282,855,10,959,269,137,352,36,951,417,160,717,143,434,144,187,201,44,318,110,31,811,203  },
		{ 30,31,93,203,190,450,625,473,326,127,166,137,704,144,141,274,131,88,269,110,435,77,116,254,187,800,521,352,120,382,829,219  },
		{ 53,27,19,26,73,250,25,6,42,200,297,34,630,65,17,714,122,611,472,108,14,436,235,106,80,256,283,236,194,57,45,0  },
		{ 1,15,2,0,515,700,3,5,13,4,180,753,141,10,33,11,6,7,77,217,352,134,23,12,341,197,115,64,317,752,102,165  },
		{ 254,180,141,613,31,406,228,137,688,44,13,669,317,202,1,82,33,30,10,530,219,98,131,125,120,23,5,96,77,93,49,960  },
		{ 9,39,30,28,0,35,36,166,158,49,100,88,175,364,1,21,346,190,168,101,22,10,83,64,420,194,68,131,86,23,13,51  },
		{ 62,3,555,56,548,507,161,34,215,527,514,361,136,162,328,440,17,211,14,4,38,383,11,757,130,123,585,205,494,57,84,236  },
		{ 126,107,7,92,60,35,97,279,16,121,493,14,43,132,20,246,356,5,146,298,359,423,21,199,362,173,150,230,508,66,1,18  },
		{ 15,82,515,291,260,351,217,349,120,854,700,922,77,373,753,372,93,326,197,1,450,304,141,102,13,23,961,457,144,64,5,342  },
		{ 141,217,352,115,180,317,752,197,64,269,102,13,9,237,244,864,365,165,21,77,291,341,1,351,23,28,137,82,51,33,10,308  },
		{ 78,47,453,108,390,730,130,711,19,813,283,412,27,444,14,196,236,128,123,650,183,389,65,34,690,17,73,719,57,51,250,269  },
		{ 34,472,250,495,297,80,64,3,17,431,243,90,176,148,4,469,527,352,45,161,751,483,667,231,383,194,62,405,53,32,180,141  },
		{ 33,77,551,51,102,120,326,260,13,115,23,153,117,453,421,180,958,16,523,899,196,82,14,791,801,692,18,615,475,308,218,197  },
		{ 98,223,393,363,411,478,1,156,284,691,664,834,791,914,447,293,724,18,354,264,9,697,51,759,48,807,586,195,421,125,848,23  },
		{ 14,7,107,135,46,77,192,92,5,16,13,2,23,60,32,172,220,52,21,20,232,121,359,291,115,304,126,50,24,10,872,33  },
		{ 1,2,32,14,21,5,76,72,12,0,38,37,48,241,90,99,148,89,17,46,45,10,7,179,29,129,50,155,3,64,23,128  },
		{ 15,515,700,753,33,77,4,102,13,0,23,11,8,51,202,110,117,40,165,10,1,5,3,141,93,31,82,180,326,22,453,457  },
		{ 6,66,2,1,74,25,29,14,135,69,7,19,64,22,97,380,38,52,24,26,278,87,138,108,18,85,10,95,267,0,32,75  },
		{ 152,4,79,59,94,188,77,471,33,11,111,339,12,102,128,13,529,99,542,40,474,202,452,117,51,15,377,134,37,23,5,402  },
		{ 15,515,700,753,1,0,13,2,7,9,10,23,5,33,14,3,6,115,117,196,457,4,386,77,40,12,16,21,134,165,730,217  },
		{ 17,209,207,106,45,3,5,255,62,2,119,56,32,21,655,742,29,14,263,136,306,84,38,425,383,80,64,1,378,440,61,128  },
		{ 120,450,260,15,13,23,82,817,523,515,326,33,51,700,102,93,31,77,753,64,98,32,5,1,165,110,141,125,116,21,61,44  },
		{ 116,492,0,206,8,268,23,13,10,51,499,341,31,417,93,125,949,120,791,918,22,203,551,523,180,391,137,901,940,730,1,9  },
		{ 15,515,700,753,165,197,13,120,23,180,82,4,341,260,386,117,523,719,901,0,141,11,351,730,450,509,752,758,922,317,10,854  },
		{ 14,2,7,24,6,1,66,0,22,29,108,18,65,69,38,28,36,10,86,67,16,64,95,97,52,83,74,71,46,150,5,25  },
		{ 523,96,330,367,662,335,839,615,244,922,717,141,1,443,403,418,692,372,269,352,498,576,854,217,144,98,201,873,284,69,752,64  },
		{ 57,184,229,152,90,17,266,257,205,5,32,1,245,2,128,12,141,3,99,64,4,45,313,21,59,77,37,524,38,106,339,432  },
		{ 7,14,2,16,128,0,202,58,77,13,5,107,10,1,64,18,70,23,20,307,141,137,32,9,318,46,177,35,24,4,269,22  },
		{ 7,66,16,14,97,140,24,69,92,267,2,172,189,21,6,380,38,35,60,150,74,135,357,451,29,64,22,71,67,48,5,65  },
		{ 121,147,167,132,55,146,101,20,354,199,18,259,212,271,407,5,7,446,195,142,125,178,120,191,98,107,0,68,43,16,14,13  },
		{ 76,21,90,32,5,2,184,45,1,57,12,257,152,179,205,72,241,48,288,245,148,38,229,128,4,37,316,89,358,14,460,99  },
		{ 147,259,178,581,427,465,142,798,878,534,786,35,198,929,362,107,325,20,70,279,132,376,43,5,77,33,21,470,481,345,590,7  },
		{ 778,473,450,93,30,466,855,141,530,203,201,523,839,39,372,330,144,704,617,326,459,435,254,82,717,344,321,44,36,934,217,86  },
		{ 475,523,15,453,403,730,515,51,899,719,700,4,753,33,99,23,120,108,3,21,11,457,421,128,13,450,196,260,202,32,494,102  },
		{ 15,515,13,1,0,2,700,23,753,5,317,4,115,341,3,10,180,217,64,11,117,33,77,197,365,165,141,7,6,134,102,40  },
		{ 19,33,4,202,40,77,102,25,84,63,757,27,23,56,119,361,59,494,32,73,11,402,128,12,26,13,80,210,485,99,196,300  },
		{ 2,20,32,13,5,12,6,23,38,21,43,29,7,51,207,61,147,90,1,115,48,52,17,202,178,37,0,77,362,66,64,19  },
		{ 339,79,188,94,11,12,4,99,111,377,474,542,37,33,102,51,117,77,40,13,453,152,134,59,23,775,57,403,961,475,342,64  },
		{ 34,128,283,176,495,318,231,503,275,432,527,529,161,53,3,245,291,73,719,250,202,381,469,27,389,56,412,14,585,17,200,402  },
		{ 15,217,515,13,141,365,317,180,700,1,115,341,77,23,291,753,51,120,0,349,137,64,5,36,21,269,202,110,2,10,260,33  },
		{ 13,15,961,515,700,753,4,12,2,3,11,457,51,37,197,115,5,6,569,10,0,99,1,196,23,72,165,59,134,300,111,405  },
		{ 15,515,700,753,13,1,0,2,23,33,5,10,3,115,4,102,9,7,6,40,51,217,11,569,12,117,77,457,14,719,317,64  },
		{ 2,5,1,76,32,214,292,45,129,29,14,90,64,123,128,17,21,519,179,6,141,72,205,710,77,33,48,202,15,3,249,23  },
		{ 72,12,99,23,76,38,13,14,89,4,21,2,54,51,32,128,57,5,37,1,11,17,115,401,3,474,148,59,90,488,15,10  },
		{ 98,223,393,1,264,834,284,791,772,293,697,421,724,363,478,51,541,48,909,682,447,765,411,807,96,9,730,31,905,23,821,5  },
		{ 509,762,341,638,13,506,873,8,165,569,242,23,391,901,10,15,629,180,197,961,1,499,143,515,642,338,116,2,965,0,498,456  },
		{ 1,2,5,0,14,22,23,50,21,12,10,51,38,13,36,64,86,46,65,17,6,114,137,7,29,48,3,18,37,9,28,128  },
		{ 481,878,5,142,557,13,182,640,77,1,21,929,120,626,35,23,259,146,132,33,2,291,590,32,465,534,318,178,518,109,10,61  },
		{ 15,515,700,1,753,4,0,2,5,13,11,3,341,12,33,180,21,10,77,197,32,317,134,23,6,7,365,117,37,40,9,165  },
		{ 25,0,6,26,42,19,119,22,17,33,10,122,202,814,27,128,4,113,64,102,790,49,209,84,12,2,73,45,1,483,469,77  },
		{ 2,7,14,1,24,6,0,5,65,16,22,23,13,18,21,86,64,12,10,32,67,51,38,28,69,9,36,124,66,46,20,49  },
		{ 51,13,23,128,33,12,202,3,15,64,1,5,141,120,0,10,403,82,2,515,102,99,117,37,153,700,197,318,21,269,17,196  },
		{ 0,16,9,1,24,18,35,13,64,21,23,7,68,141,69,5,10,28,217,2,96,335,115,67,22,65,39,14,12,51,48,71  },
		{ 1,2,14,5,50,0,46,36,38,67,29,24,21,10,18,28,58,12,96,64,65,45,13,83,17,6,103,22,218,114,23,128  },
		{ 23,13,32,2,51,5,21,1,3,0,10,12,4,17,14,72,76,15,64,115,99,38,54,453,421,137,89,86,36,128,22,515  },
		{ 434,384,144,268,141,137,855,206,940,244,332,93,10,617,269,911,116,253,36,203,282,160,110,489,959,120,352,202,44,417,318,1  },
		{ 0,2,1,13,15,5,3,23,515,180,141,6,700,10,7,217,77,64,4,753,197,165,352,33,341,11,117,317,115,9,40,752  },
		{ 2,6,113,25,1,5,32,7,61,29,0,14,177,128,33,77,21,13,102,27,4,65,19,20,10,74,210,22,15,49,64,95  },
		{ 116,268,8,499,22,206,0,417,918,203,120,23,421,51,551,13,165,31,403,10,1,791,93,692,386,326,940,202,137,9,805,450  },
		{ 107,132,126,362,146,20,199,43,279,590,121,612,147,35,259,16,60,376,7,49,470,941,534,5,595,18,97,660,683,13,493,21  },
		{ 15,515,700,753,13,1,0,23,2,77,33,4,5,3,51,102,115,10,9,7,6,217,341,11,342,569,12,317,8,457,22,180  },
		{ 53,27,17,73,161,19,469,527,136,378,250,383,26,56,862,34,84,200,62,14,80,128,361,4,514,106,495,585,297,3,119,440  },
		{ 17,209,106,207,5,45,3,119,21,2,62,243,290,14,255,454,61,425,84,29,32,56,263,186,64,54,38,48,408,1,46,136  },
		{ 152,79,59,452,128,4,216,12,11,99,188,94,339,529,318,291,471,77,202,349,51,402,23,13,474,111,542,32,37,33,377,15  },
		{ 15,515,700,753,1,0,2,13,3,23,5,4,180,115,51,33,12,8,9,77,7,197,6,961,10,22,141,110,901,752,134,120  },
		{ 951,752,638,811,253,10,351,642,341,180,901,197,873,15,244,352,110,515,143,165,8,700,365,762,55,564,499,753,82,141,417,854  },
		{ 99,6,197,262,236,74,711,47,38,26,3,509,115,350,50,583,841,19,165,331,675,324,130,223,34,52,4,13,453,235,2,138  },
		{ 125,165,391,386,558,457,23,867,221,51,758,21,77,791,134,197,401,603,719,13,963,961,308,949,217,450,120,115,696,403,670,291  },
		{ 1,14,2,0,16,5,7,24,46,38,64,18,21,50,10,9,23,12,58,22,35,13,48,141,128,37,32,67,54,28,36,69  },
		{ 13,23,51,15,12,515,700,457,0,1,165,2,115,753,64,453,4,202,5,3,21,10,403,197,719,961,37,120,475,401,33,141  },
		{ 84,17,495,27,129,19,56,80,378,26,40,469,128,73,161,0,4,361,6,123,106,162,3,53,548,504,618,202,22,12,184,136  },
		{ 1,28,9,0,13,23,49,22,67,39,64,109,10,2,36,115,51,86,35,5,141,83,55,128,12,21,158,50,69,137,30,202  },
		{ 391,242,456,13,341,479,762,23,8,638,509,165,10,116,338,901,51,499,492,1,206,401,197,867,417,93,642,0,873,457,22,569  },
		{ 211,248,57,162,41,361,4,266,556,130,305,38,152,328,62,11,514,507,183,440,3,339,313,229,471,117,129,128,157,457,494,136  },
		{ 7,92,16,97,0,126,35,5,173,232,107,60,246,140,66,279,423,38,104,43,508,298,14,21,20,48,24,22,607,230,81,189  },
		{ 15,515,700,753,1,0,2,13,5,180,23,3,901,4,51,6,12,7,9,115,82,457,8,64,10,141,31,120,110,165,22,93  },
		{ 0,25,18,403,6,102,91,42,397,95,273,49,74,64,673,85,701,283,750,389,289,193,81,861,523,138,125,104,942,880,879,847  },
		{ 56,6,33,554,65,343,84,90,19,289,214,240,431,27,370,233,194,32,701,72,26,18,85,287,207,77,25,751,112,467,108,102  },
		{ 0,9,31,1,98,127,44,22,105,293,137,28,395,23,299,49,13,116,51,2,21,242,125,202,36,141,5,7,276,16,18,685  },
		{ 1,2,14,5,0,7,38,21,50,32,46,64,45,16,24,10,23,13,6,48,22,128,58,36,61,9,12,54,141,17,3,29  },
		{ 13,23,457,51,719,453,12,730,961,15,4,99,0,165,515,2,11,328,700,33,475,115,5,629,1,401,37,40,753,494,341,197  },
		{ 968,967,966,965,964,963,962,961,960,959,958,957,956,955,954,953,952,951,950,949,948,947,946,945,944,943,942,941,940,939,938,937  },
		{ 2,1,6,29,14,67,5,26,52,25,103,83,24,70,7,65,21,108,46,133,12,38,36,74,75,23,13,0,19,218,64,114  },
		{ 7,24,92,150,16,14,71,35,97,60,43,18,189,0,20,230,2,140,517,21,125,81,69,399,508,10,28,149,423,298,251,38  },
		{ 77,120,102,51,23,13,1,260,15,202,33,291,141,5,342,128,21,137,82,32,269,165,515,318,450,494,349,125,64,2,180,700  },
		{ 77,64,13,51,23,141,33,128,4,40,0,202,1,102,137,177,6,2,115,318,269,11,10,22,217,180,15,59,7,453,95,291  },
		{ 9,18,101,264,363,1,16,271,682,411,166,118,121,676,167,604,520,100,621,905,0,21,364,5,39,60,781,821,252,88,146,13  },
		{ 144,203,326,166,418,88,382,96,822,93,744,859,438,921,521,141,435,274,110,1,494,77,772,403,576,264,269,120,691,83,909,13  },
		{ 21,13,350,199,408,16,459,522,241,818,228,12,569,640,93,5,375,118,60,24,466,110,308,191,120,18,1,934,146,64,2,839  },
		{ 15,515,700,753,13,23,8,51,165,102,82,110,0,180,197,77,1,326,33,10,4,5,373,12,120,898,2,457,202,351,403,115  },
		{ 77,33,64,128,202,102,1,51,141,23,13,2,40,0,318,10,6,22,3,269,117,95,15,177,14,4,137,115,180,5,134,196  },
		{ 174,544,66,29,25,6,525,74,104,636,2,0,45,5,222,204,81,113,789,33,90,151,19,355,135,128,77,319,61,58,192,644  },
		{ 141,372,352,304,947,954,217,437,269,349,177,13,64,291,202,86,77,7,950,128,751,98,21,180,23,678,75,33,872,318,195,137  },
		{ 200,53,161,17,27,34,73,714,472,585,62,136,106,440,80,56,3,383,514,19,361,78,14,250,377,322,84,862,176,202,527,494  },
		{ 32,14,12,2,21,38,72,76,5,37,23,1,99,0,54,115,89,4,148,90,64,17,13,10,3,46,221,308,51,181,241,179  },
		{ 23,141,13,128,33,202,64,51,269,77,102,1,2,318,5,3,15,165,0,153,180,12,10,196,137,40,197,117,403,6,515,120  },
		{ 0,96,30,137,9,39,840,613,180,141,669,406,202,88,22,28,403,160,10,15,679,100,49,576,228,1,530,856,269,219,31,77  },
		{ 180,141,1,352,217,115,341,752,365,15,317,13,2,4,0,515,901,197,23,21,3,165,700,5,269,498,31,51,753,77,202,98  },
		{ 1,2,0,28,14,5,9,24,50,46,22,67,36,13,7,12,38,65,18,23,21,16,10,103,64,55,83,69,51,114,29,37  },
		{ 180,115,317,365,217,15,352,901,752,515,141,341,700,253,1,753,244,0,4,2,873,33,291,77,5,308,165,137,260,569,202,197  },
		{ 32,60,5,296,77,850,4,126,652,347,260,534,379,21,102,195,33,1,929,49,13,883,809,660,95,28,23,713,638,241,197,153  },
		{ 180,901,15,515,365,341,700,752,115,753,317,217,351,197,141,873,110,82,1,244,0,951,253,564,2,165,77,352,308,125,3,638  },
		{ 17,3,38,45,32,54,62,2,106,12,587,5,794,21,14,155,721,540,37,770,181,221,41,46,1,328,243,552,165,56,128,741  },
		{ 16,24,0,18,35,7,9,13,50,1,2,14,21,12,5,23,60,69,64,10,128,141,75,51,67,48,22,98,28,223,71,77  },
		{ 165,13,308,127,23,98,286,401,391,237,180,64,51,36,293,15,479,258,55,629,239,115,964,197,457,365,338,341,395,261,206,317  },
		{ 539,957,30,213,840,669,748,466,863,88,190,230,251,137,217,530,144,93,228,679,617,82,352,317,96,418,831,800,321,203,160,219  },
		{ 5,1,0,2,21,14,36,12,23,32,10,48,13,22,51,17,38,99,115,9,64,54,3,45,72,50,128,37,28,24,181,46  },
		{ 13,23,0,51,33,4,1,2,180,141,77,115,10,102,197,217,317,202,9,3,15,40,165,5,7,11,352,22,515,64,269,403  },
		{ 15,13,515,700,23,753,457,54,12,38,37,165,14,51,10,134,64,0,117,719,82,3,1,961,197,115,89,120,99,2,308,4  },
		{ 5,2,1,21,0,10,32,23,13,51,3,12,14,22,64,36,17,72,38,37,165,48,4,115,54,403,128,45,86,89,9,137  },
		{ 128,291,318,202,77,402,275,678,33,269,102,342,20,0,104,494,210,43,319,177,66,416,112,141,7,5,2,155,87,64,25,285  },
		{ 2,1,24,14,0,67,5,46,18,16,69,35,7,9,38,83,21,29,12,96,50,64,10,103,28,75,36,13,6,52,22,37  },
		{ 15,515,700,1,0,753,2,13,23,5,180,3,4,457,12,51,165,197,6,9,7,115,141,21,33,120,752,901,10,110,77,8  },
		{ 2,0,14,1,7,28,9,24,65,67,16,22,55,124,5,36,46,35,10,64,18,69,21,23,12,86,13,83,51,154,6,38  },
		{ 403,775,99,880,128,56,475,17,40,161,361,527,162,453,14,3,202,494,12,402,108,757,23,51,129,65,34,383,19,556,27,5  },
		{ 2,29,6,151,58,45,7,5,1,112,52,113,66,70,64,27,61,186,17,19,74,311,315,80,14,25,32,128,26,4,243,135  },
		{ 6,29,1,74,70,2,26,75,25,65,66,52,14,19,357,138,108,64,220,85,86,24,42,36,114,102,133,67,33,95,38,324  },
		{ 15,515,700,753,0,1,180,120,23,13,51,102,2,9,260,202,77,5,197,141,33,165,21,450,110,115,7,137,901,10,269,6  },
		{ 14,5,17,2,45,46,3,50,38,181,21,12,48,29,54,32,1,13,10,61,540,62,6,227,106,37,155,19,52,186,328,80  },
		{ 16,18,158,1,60,35,21,39,265,23,9,329,120,82,7,132,121,5,137,260,55,49,48,20,22,13,33,24,77,51,167,2  },
		{ 108,283,467,389,56,412,650,123,177,216,269,33,349,475,899,670,619,453,775,196,65,543,401,503,13,128,730,523,84,789,51,678  },
		{ 514,328,3,361,377,403,14,507,880,130,57,11,4,38,236,211,152,757,215,485,176,556,56,102,585,54,555,62,494,34,266,229  },
		{ 3,62,514,99,555,266,130,12,215,403,507,56,14,361,152,38,229,328,139,471,475,57,440,305,775,313,880,377,757,123,40,11  },
		{ 120,202,1,33,77,260,318,5,51,102,450,40,269,13,494,141,15,23,21,351,82,515,177,115,922,128,817,700,36,48,31,7  },
		{ 15,515,1,700,0,23,13,2,753,51,180,5,3,165,21,12,120,6,197,115,9,4,7,141,33,82,457,202,31,341,386,110  },
		{ 180,15,82,351,515,700,115,10,898,317,217,141,13,33,753,901,23,365,854,77,1,197,752,4,110,341,143,51,352,21,102,40  },
		{ 104,289,64,97,20,214,90,43,707,173,66,0,65,194,32,7,414,147,312,712,22,874,38,107,5,95,376,835,426,21,568,81  },
		{ 84,65,249,56,123,19,416,403,73,27,0,289,26,847,453,370,33,63,643,80,45,42,9,554,736,357,194,630,524,90,183,76  },
		{ 570,346,826,101,68,13,9,350,197,352,28,100,694,21,165,0,55,88,212,610,30,39,535,569,23,308,124,509,125,115,35,841  },
		{ 16,18,24,7,92,60,5,35,1,21,50,71,2,77,10,64,14,571,126,75,121,32,9,4,46,140,13,12,22,217,132,23  },
		{ 15,515,82,700,898,753,351,33,180,10,341,365,77,55,901,4,21,115,120,5,102,117,141,197,165,260,32,11,854,317,13,752  },
		{ 16,24,18,1,35,2,9,0,21,71,7,5,50,64,23,68,13,69,14,60,189,10,103,48,140,12,46,118,167,86,36,230  },
		{ 60,13,33,71,0,20,117,77,23,16,326,153,10,115,35,22,7,15,43,18,4,197,134,21,628,515,118,81,165,375,356,102  },
		{ 187,258,871,219,295,201,224,489,434,141,110,268,160,839,228,131,36,116,261,244,44,384,406,699,253,137,567,574,531,144,940,31  },
		{ 66,7,97,192,172,43,20,232,712,204,74,0,324,22,107,64,104,65,426,387,173,5,38,729,448,526,14,95,32,289,10,500  },
		{ 15,515,700,753,1,0,4,341,13,5,2,3,77,33,11,134,12,23,217,8,10,40,7,961,6,365,317,51,901,21,197,32  },
		{ 24,0,16,9,35,7,28,2,14,65,1,68,18,39,22,55,49,124,13,109,10,23,21,71,149,12,95,51,154,158,5,67  },
		{ 7,16,14,92,2,24,60,35,46,140,18,38,64,220,1,21,107,5,12,50,126,54,71,32,121,9,0,4,29,87,75,10  },
		{ 7,16,92,2,14,60,126,35,24,140,107,172,18,0,5,21,64,46,38,278,314,121,66,1,135,150,32,22,232,29,12,330  },
		{ 26,6,53,19,27,25,64,90,73,235,113,289,42,65,297,436,34,32,214,194,45,445,250,17,200,614,122,3,85,611,491,624  },
		{ 352,854,351,217,82,110,752,141,661,219,224,1,180,258,816,244,295,922,36,260,93,567,269,144,160,317,44,120,373,201,116,230  },
		{ 107,16,18,35,20,126,14,7,60,43,68,0,92,10,28,55,21,598,279,118,5,22,191,49,121,167,97,493,446,101,212,566  },
		{ 1,15,2,4,515,13,0,3,5,700,23,341,77,753,115,11,33,51,7,6,180,10,197,141,901,165,40,365,102,217,12,317  },
		{ 23,13,51,5,120,15,21,202,1,125,2,33,515,64,7,12,165,128,137,180,700,141,453,6,32,403,523,475,753,450,197,4  },
		{ 131,224,371,187,385,9,716,219,137,616,98,737,160,31,836,0,13,202,23,258,105,39,49,36,916,127,254,51,44,924,1,55  },
		{ 15,1,515,2,5,700,4,0,753,3,11,13,33,10,77,6,180,7,341,141,217,32,197,12,40,134,21,17,165,102,352,365  },
		{ 7,66,74,20,43,0,173,2,222,29,174,104,97,64,6,65,32,226,138,5,52,353,712,192,204,426,81,22,90,355,25,21  },
		{ 5,13,49,590,259,786,21,35,534,279,493,23,147,465,32,132,581,929,121,941,178,48,626,612,18,146,107,713,362,150,771,61  },
		{ 2,16,14,7,24,278,35,69,5,140,92,135,46,38,6,29,21,1,60,18,52,64,267,0,189,71,12,32,74,10,87,75  },
		{ 165,3,391,197,17,34,15,14,758,552,13,961,80,509,23,11,56,40,38,515,51,540,4,457,62,46,2,700,153,719,41,33  },
		{ 1,2,0,22,5,14,12,7,28,13,23,36,67,21,24,65,51,49,64,10,9,95,35,16,6,83,105,46,50,37,168,32  },
		{ 34,3,453,47,130,196,11,236,361,322,730,514,4,711,57,377,51,14,59,440,162,153,62,77,176,412,328,161,202,17,880,56  },
		{ 18,16,23,21,48,24,35,121,60,13,156,51,132,7,5,221,163,141,1,202,271,115,71,125,46,447,43,781,142,761,360,137  },
		{ 165,457,961,13,197,629,23,54,569,41,401,37,12,38,157,188,901,32,17,341,15,421,99,734,719,117,57,51,21,721,515,339  },
		{ 1,2,77,141,33,3,64,5,0,23,13,15,6,102,128,202,515,51,180,7,269,10,40,700,137,4,318,165,753,197,217,291  },
		{ 68,9,21,0,212,101,16,264,100,562,124,1,35,154,13,350,191,65,167,48,51,722,818,520,23,24,149,841,67,10,71,302  },
		{ 598,293,98,386,0,23,407,121,48,7,259,51,783,125,393,126,1,326,43,963,949,719,541,107,21,20,670,203,199,77,33,325  },
		{ 21,586,13,167,781,647,23,5,165,77,33,82,447,411,391,623,363,120,115,118,16,156,146,117,102,65,49,48,591,459,93,761  },
		{ 2,1,7,6,5,61,14,29,64,32,58,0,45,128,21,4,141,10,16,72,40,52,207,17,33,77,38,655,86,22,66,13  },
		{ 39,265,1,9,333,156,100,447,18,264,166,286,101,363,411,30,93,31,404,98,639,203,682,310,327,13,16,33,593,272,21,254  },
		{ 6,2,1,19,29,25,5,26,51,42,114,719,103,457,388,74,309,133,23,386,516,138,64,453,96,70,324,117,220,165,52,17  },
		{ 20,49,43,0,356,858,5,107,319,414,595,359,7,422,246,612,22,819,97,14,945,33,713,427,392,230,376,347,197,95,4,21  },
		{ 0,9,1,35,68,65,2,7,64,101,23,16,67,28,24,13,83,50,124,69,18,51,5,12,36,22,39,336,103,10,114,96  },
		{ 13,23,15,51,515,165,700,0,1,457,202,753,2,115,5,12,197,120,141,4,21,64,180,318,9,10,7,453,269,6,3,77  },
		{ 121,16,60,1,107,195,146,126,98,35,132,20,223,199,271,167,43,18,191,407,5,92,7,493,279,55,393,24,21,14,0,49  },
		{ 31,44,116,299,0,22,393,144,9,1,456,268,105,492,51,127,13,384,23,98,125,206,434,28,36,137,141,93,367,918,10,963  },
		{ 23,165,401,51,457,758,13,719,832,197,739,14,453,3,12,15,828,838,670,961,494,34,629,514,308,33,515,29,386,341,176,700  },
		{ 341,36,1,115,180,143,64,141,13,164,365,131,55,105,317,169,197,752,10,160,127,244,98,22,498,31,873,0,86,901,569,352  },
		{ 6,1,2,25,5,14,19,64,108,66,65,29,114,38,51,23,52,13,26,17,21,386,22,42,74,7,67,421,86,27,886,602  },
		{ 51,453,386,719,730,23,6,457,758,899,47,13,670,17,894,108,754,285,2,33,14,657,236,29,19,130,197,133,421,475,165,34  },
		{ 121,16,18,252,132,9,419,101,0,146,5,10,31,167,49,364,60,68,109,28,265,1,21,158,39,35,159,107,23,604,647,33  },
		{ 283,503,193,128,26,269,432,102,63,275,122,389,6,529,342,789,678,862,445,25,318,573,18,605,65,4,0,57,27,177,643,216  },
		{ 2,6,1,7,29,69,14,16,5,75,24,46,25,52,21,74,87,38,64,19,220,67,66,32,35,26,70,10,92,0,278,22  },
		{ 97,7,298,172,66,6,423,24,18,2,140,69,150,43,14,117,36,501,0,273,71,861,526,426,21,5,302,134,20,77,165,52  },
		{ 475,899,958,805,801,817,421,615,494,120,403,523,730,453,51,77,117,326,260,576,386,153,202,450,23,401,196,361,341,15,165,670  },
		{ 7,20,16,14,269,177,77,318,202,97,128,275,414,43,18,2,35,210,291,141,10,23,24,403,134,4,560,192,107,38,37,121  },
		{ 2,1,7,14,0,24,16,28,22,5,6,18,10,12,21,49,65,64,35,23,13,95,51,9,67,108,124,168,32,36,86,109  },
		{ 26,25,19,122,6,80,42,17,27,73,209,684,573,445,65,64,4,297,45,680,106,0,483,113,128,59,667,255,85,53,361,690  },
		{ 259,107,465,20,362,147,376,43,470,595,534,49,660,683,581,35,5,0,858,178,246,14,612,427,97,7,356,230,786,279,142,423  },
		{ 30,131,190,228,88,856,406,530,224,863,219,778,274,39,613,944,160,100,730,187,816,1,166,531,258,137,539,31,36,44,367,492  },
		{ 6,25,113,45,311,26,27,17,64,80,42,32,85,5,4,122,73,491,90,611,19,2,1,151,209,0,396,667,145,29,66,74  },
		{ 15,515,700,0,753,1,23,2,13,82,51,5,120,9,77,341,4,260,10,180,901,115,141,93,7,342,351,12,8,102,450,197  },
		{ 219,98,127,258,395,276,421,201,0,293,453,924,284,137,567,242,386,1,944,860,206,13,9,475,55,116,23,299,295,512,202,365  },
		{ 141,15,180,352,82,217,317,752,1,115,515,351,854,260,341,36,700,10,120,110,753,160,21,13,143,365,23,898,64,137,498,244  },
		{ 129,123,17,162,184,257,5,99,205,4,249,183,3,57,128,12,2,769,229,14,130,40,77,45,80,59,119,90,202,152,19,11  },
		{ 23,51,64,33,128,13,202,102,141,0,77,10,15,22,269,1,403,40,4,2,137,117,120,115,318,165,99,86,12,95,65,475  },
		{ 7,14,107,2,16,46,5,172,92,232,20,87,32,43,21,97,64,22,60,294,135,54,38,220,66,35,356,24,337,52,29,132  },
		{ 403,576,615,523,817,33,805,326,202,475,15,859,77,137,515,700,23,421,753,120,450,402,260,13,4,51,480,351,118,65,0,958  },
		{ 141,217,23,349,180,115,51,202,137,0,352,13,269,341,9,372,317,82,15,365,515,351,291,93,18,854,700,88,44,221,753,120  },
		{ 23,1,13,120,5,141,51,21,202,15,165,102,2,33,260,180,450,12,64,48,515,125,269,128,197,137,82,93,0,523,700,9  },
		{ 6,25,74,66,29,2,7,138,122,81,26,174,145,151,42,348,19,287,396,194,45,280,1,32,4,77,416,52,243,0,104,614  },
		{ 166,100,382,30,254,190,731,264,93,88,131,9,1,438,829,578,274,31,265,36,921,160,44,33,795,77,625,716,404,39,203,613  },
		{ 132,13,5,21,1,23,121,195,146,296,850,518,48,883,407,379,32,623,49,33,4,82,70,51,120,845,626,125,761,522,652,260  },
		{ 9,0,254,49,131,272,159,101,105,39,1,21,31,23,13,578,224,51,518,28,688,98,22,68,158,48,228,36,16,286,44,18  },
		{ 16,18,60,35,126,7,68,20,0,107,92,24,118,55,14,10,9,22,43,101,28,71,154,49,252,279,2,1,95,97,23,121  },
		{ 15,515,700,753,341,1,0,13,2,4,11,10,3,5,33,23,128,77,901,12,197,8,317,117,21,202,141,217,180,365,6,115  },
		{ 78,19,47,444,26,390,453,27,813,108,130,730,412,14,711,122,236,65,113,680,235,690,51,283,200,128,196,297,368,34,3,445  },
		{ 2,7,6,128,29,32,64,21,16,14,61,0,45,52,1,113,5,141,20,66,315,13,10,74,22,177,77,738,59,25,90,43  },
		{ 66,145,74,6,26,112,19,29,25,396,87,2,287,70,7,5,135,644,138,58,222,122,64,1,27,849,42,32,226,151,14,307  },
		{ 16,60,92,7,126,24,35,121,132,140,107,146,14,2,71,18,1,46,246,64,21,172,22,156,150,451,267,108,38,232,32,0  },
		{ 197,55,365,341,638,538,286,169,873,13,237,10,165,0,901,1,762,206,219,752,258,844,509,44,282,569,923,601,180,170,164,64  },
		{ 151,27,53,34,58,17,396,287,74,5,26,29,19,6,2,73,445,1,315,52,113,46,75,297,651,70,3,45,80,112,64,14  },
		{ 289,214,90,874,104,751,64,65,835,312,249,81,194,750,32,288,519,0,204,247,74,6,875,784,174,29,715,192,173,138,95,348  },
		{ 9,39,30,35,64,0,1,28,36,10,86,180,175,23,166,51,141,49,22,158,237,352,67,346,190,88,13,55,100,439,83,217  },
		{ 341,15,901,515,700,753,365,1,10,0,569,2,180,115,31,22,44,317,3,9,5,4,197,165,93,217,116,13,143,55,951,30  },
		{ 120,202,15,450,260,128,515,494,700,403,753,13,817,318,137,77,23,33,0,269,82,141,1,5,64,51,102,21,32,4,95,859  },
		{ 115,197,22,77,32,95,509,191,33,141,241,4,120,841,546,522,341,64,13,698,102,35,23,459,167,93,28,10,695,180,118,16  },
		{ 16,24,1,35,7,2,18,14,46,60,69,21,0,5,71,140,108,64,9,50,12,92,189,48,38,267,13,23,230,335,67,10  },
		{ 15,515,700,753,180,901,898,197,341,638,10,165,1,33,365,115,77,317,4,117,253,82,13,5,217,2,102,0,21,134,762,569  },
		{ 193,523,233,18,4,56,59,33,403,65,84,63,11,561,102,289,90,240,40,511,204,202,196,120,96,66,643,165,77,135,117,74  },
		{ 2,74,29,6,112,66,7,222,145,151,52,5,0,128,45,64,4,624,33,204,287,20,32,77,25,1,102,43,19,59,141,10  },
		{ 0,13,1,2,23,33,3,217,4,5,141,77,51,10,6,115,64,180,15,7,40,11,515,102,22,352,341,165,9,317,197,700  },
		{ 1,0,28,2,9,67,65,22,7,50,5,12,23,14,36,13,24,21,83,64,10,55,51,69,16,46,18,103,114,160,38,35  },
		{ 121,18,132,167,271,146,16,9,363,101,212,1,354,621,60,806,31,411,55,0,195,68,446,33,932,98,35,463,10,24,7,28  },
		{ 6,26,85,25,122,19,396,42,64,194,624,90,214,289,174,65,445,573,45,680,436,283,138,32,0,113,81,389,348,297,235,665  },
		{ 16,146,18,7,121,156,92,1,132,953,199,71,24,60,21,95,271,32,108,640,10,246,14,458,823,522,195,5,674,354,12,314  },
		{ 51,23,453,475,13,730,3,719,523,403,15,115,6,4,33,899,117,141,64,12,457,401,19,308,128,99,153,386,95,11,56,21  },
		{ 53,6,27,34,73,151,26,58,17,2,29,19,396,287,113,70,74,64,315,297,45,5,112,138,436,1,200,52,61,250,95,322  },
		{ 260,1,202,269,98,385,223,141,349,730,318,96,421,863,751,393,5,453,418,120,291,7,922,30,854,64,21,13,87,352,774,697  },
		{ 16,60,92,35,121,7,126,1,195,107,98,18,24,97,150,223,167,14,191,246,71,146,21,0,48,43,20,132,22,271,598,356  },
		{ 1,22,0,28,2,23,36,9,13,31,105,55,5,51,21,12,64,95,170,7,141,35,239,98,49,127,44,237,14,125,301,115  },
		{ 2,6,1,5,64,32,14,17,29,128,4,0,10,76,7,45,119,207,61,292,141,25,22,19,58,306,40,3,106,790,27,33  },
		{ 51,23,221,254,13,438,15,541,125,33,670,228,386,159,48,39,530,960,515,49,21,77,679,421,219,115,83,453,688,406,700,131  },
		{ 1,0,5,2,22,12,10,21,13,23,32,4,36,51,14,3,28,9,48,37,86,7,202,64,115,6,54,17,165,137,197,128  },
		{ 23,447,182,363,93,478,914,110,668,149,698,340,296,18,379,284,60,658,223,180,70,724,156,67,107,664,433,375,125,203,1,626  },
		{ 38,115,17,498,54,15,197,106,41,515,546,873,117,62,428,45,32,700,180,457,509,468,341,328,753,587,243,165,721,155,37,57  },
		{ 32,241,92,64,13,95,22,316,115,5,126,180,626,49,246,21,60,237,146,23,379,132,125,7,468,365,230,48,10,360,4,594  },
		{ 15,515,700,753,341,217,33,4,13,317,141,10,77,23,180,82,1,115,351,365,102,137,21,352,5,901,40,11,854,197,64,117  },
		{ 1,217,15,141,260,82,77,13,120,93,515,352,110,180,317,700,21,351,349,137,269,64,36,128,291,753,202,23,5,10,752,0  },
		{ 23,13,77,141,51,33,115,0,64,4,217,202,2,102,269,10,177,128,40,32,21,22,117,1,180,318,352,7,6,291,9,11  },
		{ 478,1,264,98,520,682,5,9,21,223,724,604,0,48,100,759,13,821,23,88,96,411,772,664,265,363,447,293,166,905,101,39  },
		{ 7,20,2,6,43,128,29,33,0,416,81,102,66,5,77,74,45,104,14,202,173,13,52,16,64,122,10,21,137,177,174,49  },
		{ 2,1,7,14,5,0,6,21,64,32,16,29,61,38,45,46,58,128,23,13,24,17,4,141,10,290,22,52,18,9,3,40  },
		{ 6,80,26,19,17,209,64,25,106,2,483,65,833,27,90,113,32,128,5,45,14,469,378,255,76,0,495,141,161,61,445,42  },
		{ 98,223,393,1,354,834,195,791,697,447,360,284,156,541,421,18,293,781,51,163,121,807,765,664,411,363,132,591,883,48,801,386  },
		{ 679,406,669,816,228,141,36,876,180,1,144,137,332,351,269,219,187,96,855,752,21,839,473,352,345,317,202,64,831,5,251,613  },
		{ 15,515,13,700,1,2,753,3,341,5,0,4,23,11,33,51,10,6,115,197,12,165,217,7,64,569,317,14,901,141,180,453  },
		{ 202,13,450,523,120,165,5,403,64,23,141,51,21,494,817,197,33,0,12,457,10,9,95,15,125,899,475,180,102,4,386,93  },
		{ 16,60,24,18,146,199,71,92,7,121,140,64,9,230,126,108,5,98,132,388,69,1,246,640,330,21,35,0,95,125,340,156  },
		{ 177,269,678,349,141,77,947,291,128,318,202,102,120,461,13,33,304,609,403,40,137,450,372,597,342,23,75,854,134,0,576,326  },
		{ 16,18,24,60,35,71,92,7,1,21,167,191,14,9,0,246,108,118,68,126,121,5,150,140,13,22,48,149,10,841,197,273  },
		{ 2,14,1,29,7,5,46,52,16,75,69,70,38,58,24,64,171,21,67,12,163,35,6,18,0,45,32,54,112,10,155,17  },
		{ 88,100,265,1,9,166,382,252,404,0,329,274,812,39,23,264,30,96,520,593,51,21,604,48,101,639,13,18,118,411,5,435  },
		{ 16,18,35,0,24,60,7,5,55,49,13,109,2,14,158,22,23,1,28,10,9,68,21,51,71,202,329,105,137,12,159,128  },
		{ 15,515,13,700,753,1,23,0,2,51,4,961,3,197,165,77,5,10,115,457,9,202,120,12,6,180,22,8,33,177,11,141  },
		{ 93,160,1,137,180,317,251,36,217,120,352,752,617,332,96,345,10,679,816,269,531,318,365,202,498,341,83,901,141,968,35,82  },
		{ 6,128,25,59,269,85,42,4,19,283,65,318,611,26,27,0,138,33,122,177,80,77,233,91,64,11,102,17,614,216,202,503  },
		{ 95,64,81,7,51,74,20,204,52,38,29,180,23,347,32,91,65,348,237,370,312,43,554,56,33,343,87,14,580,368,280,19  },
		{ 326,260,817,120,494,450,137,202,523,859,128,704,77,403,15,142,147,515,234,7,615,351,968,700,553,198,82,178,158,5,318,285  },
		{ 43,92,20,107,5,595,356,126,7,0,359,362,422,858,392,259,493,319,945,49,21,35,16,1,441,22,279,32,97,60,804,623  },
		{ 102,33,77,690,4,6,153,42,117,59,134,91,25,0,343,483,210,196,122,27,684,833,40,348,342,300,202,21,12,128,111,73  },
		{ 31,0,44,22,116,599,299,1,28,125,9,36,242,10,456,393,13,23,144,963,2,93,492,55,141,206,51,143,301,98,64,253  },
		{ 410,521,686,88,662,367,96,321,335,144,1,435,274,201,225,921,120,934,443,744,284,33,960,418,897,692,772,98,326,203,110,77  },
		{ 142,178,878,234,786,195,132,259,167,522,929,416,147,146,271,77,202,639,450,198,687,481,626,590,771,465,212,5,534,315,35,325  },
		{ 131,0,254,39,9,224,272,578,1,31,219,105,30,228,21,49,23,716,160,613,310,137,827,98,890,100,13,36,187,166,829,616  },
		{ 854,351,699,230,450,473,352,217,855,704,831,137,498,206,144,202,332,251,752,160,82,800,203,201,1,317,180,253,141,96,36,418  },
		{ 202,403,128,494,33,77,23,51,342,0,137,141,102,64,402,318,269,117,15,515,475,134,13,700,180,153,753,18,95,120,114,65  },
		{ 23,182,44,98,144,291,125,116,39,110,82,107,77,367,100,197,120,93,411,202,264,96,33,905,154,30,203,141,102,1,658,88  },
		{ 15,515,700,77,1,753,120,0,23,13,141,202,180,51,260,2,137,5,128,365,115,269,450,21,9,197,318,342,102,165,12,110  },
		{ 0,193,784,104,29,693,95,577,510,32,81,397,474,138,102,91,18,671,207,715,901,344,174,42,681,643,77,25,887,280,64,49  },
		{ 0,9,101,68,100,39,166,252,88,16,124,21,1,24,13,35,265,30,65,154,18,329,212,71,23,364,96,274,48,125,7,5  },
		{ 16,24,35,18,1,71,118,21,9,48,191,149,167,0,68,101,10,13,212,60,92,22,5,7,23,350,108,841,589,363,755,69  },
		{ 2,14,1,24,16,7,69,38,29,46,67,5,35,18,0,6,21,135,267,103,189,36,52,9,60,83,12,108,64,71,66,65  },
		{ 13,1,23,0,4,2,180,51,115,33,15,3,5,77,515,197,141,165,11,700,202,10,9,217,317,102,365,341,7,753,22,6  },
		{ 447,698,411,1,759,98,156,459,77,857,30,4,225,848,293,125,102,839,363,354,120,82,33,5,914,919,217,922,321,691,668,88  },
		{ 141,180,854,82,352,351,752,15,244,217,515,10,898,700,317,1,753,922,22,21,36,35,372,64,365,110,4,115,260,77,11,237  },
		{ 0,1,82,5,13,120,2,10,9,33,4,260,8,351,77,23,7,102,117,3,457,450,134,110,12,854,6,11,165,898,93,40  },
		{ 51,23,403,13,475,115,453,2,12,0,95,202,523,64,7,1,120,22,21,494,386,37,15,899,515,33,308,125,65,49,10,6  },
		{ 752,352,180,317,217,864,230,30,141,88,39,64,498,0,36,901,9,83,1,365,702,144,930,854,689,579,699,35,166,482,418,201  },
		{ 16,7,24,2,14,18,0,1,22,35,28,5,6,49,21,10,71,23,9,13,60,12,168,68,158,109,20,92,64,51,95,105  },
		{ 15,515,700,753,0,341,23,13,1,77,4,33,51,120,141,137,291,180,260,82,202,2,9,10,5,115,351,165,901,22,40,11  },
		{ 0,24,7,68,16,9,18,1,35,14,2,149,67,69,28,65,189,21,108,64,13,23,101,140,12,46,114,83,55,10,71,22  },
		{ 197,13,308,115,569,391,509,165,9,629,125,903,386,438,159,39,23,468,237,254,734,36,546,656,49,28,317,558,530,1,749,217  },
		{ 33,90,77,32,217,64,102,437,875,86,5,21,153,117,13,173,95,61,14,4,182,44,147,356,115,48,947,345,216,134,23,352  },
		{ 1,2,0,22,36,5,23,13,12,28,21,51,141,9,10,64,67,55,105,31,49,7,180,115,83,165,14,95,128,37,3,202  },
		{ 9,18,16,0,159,49,101,24,7,1,5,105,2,35,252,21,39,68,60,137,310,272,265,13,118,51,98,31,170,28,128,100  },
		{ 129,17,128,123,5,2,64,214,90,205,202,184,12,162,618,249,1,99,257,76,3,106,45,460,4,130,40,10,23,141,183,15  },
		{ 457,51,719,453,899,23,13,730,475,15,4,386,515,12,196,153,961,3,670,700,11,753,401,117,523,99,32,59,57,130,403,134  },
		{ 173,66,20,104,192,289,74,204,7,43,65,81,636,426,0,214,194,97,64,825,560,90,22,29,32,712,874,835,52,414,77,312  },
		{ 1,23,13,51,141,5,15,120,2,21,202,515,165,82,700,180,12,125,93,64,260,753,0,269,197,7,318,110,48,33,9,32  },
		{ 200,34,322,472,78,27,714,390,14,19,136,236,161,108,128,862,283,176,412,453,47,444,57,53,59,73,26,65,813,361,62,250  },
		{ 33,66,347,204,681,180,56,426,368,135,554,498,95,808,97,353,63,546,580,42,5,197,19,901,6,4,117,77,237,233,172,25  },
		{ 224,131,219,187,258,871,385,442,908,31,254,574,98,0,371,39,836,1,137,924,44,127,944,77,737,96,36,160,269,201,115,13  },
		{ 1,2,4,180,15,13,5,3,141,515,341,0,115,23,700,77,217,901,33,753,51,317,365,21,352,165,6,752,197,7,102,11  },
		{ 370,91,74,718,397,66,510,81,636,511,289,278,681,18,6,240,64,582,701,355,138,5,84,750,214,643,90,42,27,847,75,65  },
		{ 15,515,700,753,120,165,13,197,23,260,180,51,386,341,82,326,4,1,77,217,141,351,0,8,317,450,391,457,153,64,2,115  },
		{ 2,1,5,32,76,14,72,90,21,64,45,17,3,29,214,4,48,292,129,12,123,99,241,128,179,7,38,0,148,476,10,141  },
		{ 165,457,17,13,197,41,115,509,569,54,32,659,106,62,536,23,428,15,155,961,308,391,117,734,45,157,873,401,123,38,629,528  },
		{ 24,68,0,9,16,35,101,1,7,124,18,65,71,28,21,118,22,154,13,14,55,175,39,5,10,92,149,36,2,67,60,48  },
		{ 0,1,9,13,141,217,23,352,180,83,21,101,36,69,230,64,128,88,5,115,317,68,12,96,51,4,39,48,35,160,30,10  },
		{ 265,100,88,593,909,1,213,812,30,352,410,382,321,9,39,230,252,689,166,264,217,676,21,98,48,0,101,466,96,752,190,854  },
		{ 904,43,113,0,37,725,20,61,204,222,198,389,22,174,690,453,319,2,819,422,329,325,288,247,115,122,95,5,887,470,58,46  },
		{ 140,16,141,102,33,13,349,77,18,217,269,498,352,24,180,88,246,120,15,330,98,31,9,752,202,108,71,44,23,199,64,36  },
		{ 121,167,60,271,146,1,18,132,199,191,16,354,21,212,35,446,5,98,107,223,48,126,195,955,463,156,0,598,575,640,9,566  },
		{ 115,217,15,317,515,13,341,23,700,82,180,365,33,120,141,110,753,10,21,51,36,4,1,260,351,854,77,752,64,137,352,102  },
		{ 7,173,20,43,356,107,97,104,387,232,32,81,0,426,560,392,729,359,49,5,414,126,22,595,319,66,147,246,230,885,707,861  },
		{ 15,515,700,753,13,23,82,165,197,51,120,351,260,33,196,180,386,326,453,110,217,141,457,77,4,1,8,115,0,102,2,125  },
		{ 77,120,82,260,33,264,166,296,39,100,341,102,291,197,156,9,326,217,578,202,351,40,795,373,18,936,141,395,254,165,937,340  },
		{ 2,1,14,24,0,18,7,28,46,67,65,9,5,16,36,38,69,108,22,6,64,114,12,21,29,10,83,86,13,50,35,55  },
		{ 7,14,2,6,66,24,69,16,1,0,38,267,65,64,29,60,71,97,18,189,172,67,86,36,74,140,35,10,150,22,21,388  },
		{ 15,515,700,753,1,13,2,0,4,5,341,3,23,10,365,11,12,180,117,33,77,115,134,317,217,197,21,7,102,6,165,901  },
		{ 1,5,0,12,22,2,13,23,21,10,36,51,3,28,141,9,115,37,4,64,202,32,49,31,7,165,197,341,86,180,128,48  },
		{ 605,736,123,630,65,650,63,25,122,108,368,389,19,561,444,194,619,42,27,183,53,597,51,33,73,216,84,26,17,349,297,249  },
		{ 39,9,98,0,1,127,31,44,30,254,371,21,77,23,13,16,395,137,187,385,116,51,125,284,131,28,5,166,100,96,244,202  },
		{ 2,6,1,29,45,128,64,61,7,4,32,5,0,21,141,202,14,40,33,23,12,25,17,77,655,207,86,27,90,833,13,10  },
		{ 2,5,17,46,34,29,1,3,27,14,51,38,23,114,52,453,108,603,133,65,401,218,45,21,6,64,19,53,48,57,236,99  },
		{ 1,22,31,2,0,13,36,28,170,23,55,5,44,10,51,141,98,9,127,105,301,165,21,180,125,115,137,143,239,12,86,197  },
		{ 1,2,14,5,0,21,32,38,48,50,17,46,23,36,76,10,7,45,3,72,13,12,54,22,51,37,6,9,128,270,64,89  },
		{ 17,106,119,3,62,378,64,128,56,240,84,306,80,5,136,790,383,4,14,32,11,207,2,57,361,12,328,440,742,90,141,54  },
		{ 13,15,1,23,2,515,0,4,115,700,3,5,180,33,753,341,51,10,11,77,165,317,197,365,6,217,40,7,117,22,102,9  },
		{ 772,744,686,335,521,1,662,367,303,410,96,897,652,88,520,31,909,274,919,340,321,264,191,116,336,551,225,914,363,202,960,589  },
		{ 0,1,5,22,2,28,9,12,10,21,36,24,23,51,18,13,65,14,37,50,67,83,48,64,32,137,7,115,141,54,55,96  },
		{ 25,6,81,42,138,74,26,174,85,525,91,348,66,544,145,280,648,104,0,396,636,45,29,204,7,122,63,194,64,90,287,214  },
		{ 16,0,24,7,1,18,2,49,22,14,9,35,28,5,21,158,68,55,13,159,23,105,12,10,64,95,109,51,6,65,60,48  },
		{ 352,854,230,93,699,137,689,217,160,251,144,351,202,120,617,669,855,752,82,36,203,332,30,831,450,748,201,180,141,345,418,317  },
		{ 13,1,2,15,5,3,0,23,4,515,700,11,180,115,51,33,317,77,753,217,341,10,6,197,165,40,7,141,64,17,14,102  },
		{ 20,104,43,173,66,7,198,0,202,580,77,97,319,52,234,155,2,904,226,355,204,174,74,5,544,112,4,426,58,325,712,450  },
		{ 15,13,23,515,51,700,1,0,753,2,5,141,165,115,457,4,21,3,12,197,32,10,269,120,6,9,180,202,7,64,719,11  },
		{ 15,515,700,753,13,1,0,2,8,23,317,115,4,9,51,3,341,5,10,217,22,365,457,180,31,901,120,7,6,165,197,33  },
		{ 15,515,700,753,1,0,2,3,4,365,11,5,82,217,13,141,64,898,317,36,23,341,16,12,457,10,269,21,180,318,752,6  },
		{ 2,1,5,14,38,21,29,50,17,46,3,12,0,23,13,64,45,10,6,4,51,48,128,114,133,32,36,86,22,181,165,19  },
		{ 9,0,68,16,65,101,1,24,13,100,39,30,149,23,21,35,71,212,124,88,18,336,189,55,28,5,265,562,51,2,67,64  },
		{ 1,2,14,7,0,5,22,64,23,12,13,128,28,24,6,51,46,36,67,10,86,9,21,38,65,16,95,50,137,49,32,115  },
		{ 13,15,23,515,0,700,51,753,1,961,10,457,2,12,9,115,3,4,197,5,33,165,719,453,14,22,64,403,37,7,102,11  },
		{ 15,515,700,753,0,1,2,23,901,13,5,51,82,9,8,180,719,120,3,7,4,31,10,457,197,6,260,22,115,341,12,141  },
		{ 100,252,88,9,265,101,0,1,352,676,382,30,213,48,321,39,724,410,21,230,593,23,812,553,909,329,166,217,419,699,221,689  },
		{ 5,2,1,14,58,29,171,45,46,50,38,17,21,52,48,67,186,12,61,281,54,0,155,6,36,7,27,64,96,32,3,151  },
		{ 23,13,120,202,1,51,21,82,260,141,128,15,5,33,137,77,64,165,515,318,180,269,854,93,197,700,48,450,2,342,102,351  },
		{ 901,341,10,197,15,8,13,638,1,180,479,515,165,873,569,642,700,0,143,2,5,242,753,509,116,951,23,4,115,82,898,456  },
		{ 15,1,515,23,21,700,120,51,141,13,753,202,180,5,2,165,33,0,197,82,137,260,12,93,128,352,110,102,403,269,7,4  },
		{ 2,29,50,46,14,6,1,27,5,34,53,17,38,262,26,58,96,52,19,151,73,324,113,67,64,45,181,171,309,223,3,74  },
		{ 13,141,23,51,202,4,115,33,77,180,0,217,64,15,317,269,2,128,10,5,137,21,1,318,515,352,102,9,11,3,700,197  },
		{ 1,0,5,2,24,9,14,16,18,50,67,12,10,7,21,22,64,28,35,141,96,69,48,23,54,13,36,83,38,37,65,128  },
		{ 13,23,141,51,64,77,33,128,4,102,10,202,0,180,21,32,137,269,115,217,11,5,22,2,9,6,31,93,318,165,120,197  },
		{ 180,115,317,498,341,365,482,217,873,143,752,901,352,165,569,13,346,36,457,868,197,141,9,10,896,30,23,1,185,22,39,509  },
		{ 184,257,17,205,229,12,152,57,5,99,128,3,266,2,524,432,313,497,23,452,4,339,45,157,64,471,381,37,77,619,32,51  },
		{ 13,1,0,23,2,15,4,51,3,515,180,10,115,33,5,700,365,11,341,317,753,77,217,6,9,197,7,141,40,102,165,22  },
		{ 70,626,771,379,687,767,163,195,878,518,846,845,761,591,481,125,786,590,31,87,49,82,407,557,296,142,120,44,929,371,883,98  },
		{ 264,1,909,772,335,897,410,686,521,96,639,478,691,98,284,44,744,9,724,31,363,914,682,662,475,765,443,223,116,69,321,382  },
		{ 13,1,23,2,0,51,5,15,115,180,4,10,3,77,6,515,317,33,217,7,141,40,9,700,165,11,197,341,64,22,753,14  },
		{ 77,13,23,141,64,21,5,115,102,32,33,269,217,48,11,4,202,51,291,10,2,137,177,0,15,165,352,318,515,36,180,700  },
		{ 13,15,23,515,700,51,753,0,961,2,10,1,115,453,457,33,9,4,165,40,197,719,14,12,11,3,401,569,64,22,475,5  },
		{ 1,0,13,2,5,141,22,23,36,115,31,4,12,51,21,3,180,9,10,28,15,197,165,202,137,341,44,269,352,64,128,86  },
		{ 88,100,0,101,9,252,39,30,213,265,21,352,13,689,562,230,329,35,1,321,166,68,694,264,759,699,217,382,124,570,410,909  },
		{ 539,88,30,190,530,321,840,96,144,957,669,435,100,748,418,778,203,1,213,131,466,228,410,822,335,36,613,382,274,352,863,219  },
		{ 7,97,92,107,43,298,20,173,16,126,140,0,729,232,14,22,314,387,362,359,356,60,5,49,501,104,35,246,1,426,81,279  },
		{ 7,2,14,1,16,5,58,38,24,0,64,23,128,46,29,141,45,32,10,6,21,13,35,75,18,70,22,36,17,9,155,48  },
		{ 447,411,363,98,1,664,18,271,223,354,360,478,647,777,621,156,936,121,293,9,132,759,264,781,146,691,463,195,13,48,125,101  },
		{ 2,1,14,5,7,0,6,23,36,12,13,65,28,67,64,22,51,46,38,24,21,128,86,29,10,18,69,3,4,137,50,16  },
		{ 958,791,386,801,421,615,165,453,77,730,117,115,51,697,551,33,102,523,120,842,450,153,576,899,23,566,457,24,670,134,108,260  },
		{ 0,104,319,422,945,20,81,715,43,784,879,693,32,52,2,7,397,74,61,29,18,671,95,22,681,192,207,6,904,306,173,76  },
		{ 2,29,1,14,26,46,6,5,67,75,52,19,50,103,70,262,24,96,38,65,17,58,309,27,83,25,112,7,220,223,45,133  },
		{ 771,590,178,259,465,687,929,626,786,941,5,70,35,534,21,13,132,107,146,48,121,518,31,108,279,147,846,44,379,125,878,767  },
		{ 5,2,17,14,45,1,29,61,48,186,3,46,50,38,155,58,54,400,430,52,80,171,227,21,6,32,13,12,115,209,106,281  },
		{ 0,64,95,32,194,389,453,207,365,494,312,403,817,316,180,237,342,289,848,577,202,690,671,450,482,102,241,401,61,137,18,757  },
		{ 23,13,15,51,515,700,753,202,12,0,165,4,77,115,1,457,2,128,5,33,10,197,64,117,120,21,318,9,3,453,141,403  },
		{ 2,6,5,0,17,1,4,64,119,45,128,76,292,32,3,306,65,19,26,29,22,27,14,90,10,61,25,56,12,240,80,40  },
		{ 15,515,700,753,1,0,13,180,23,2,51,120,33,5,197,165,9,77,4,102,12,141,7,82,260,202,115,450,901,523,21,6  },
		{ 6,74,138,280,222,42,25,85,66,226,87,64,32,19,65,235,135,294,26,29,174,95,337,204,630,22,5,122,605,256,0,52  },
		{ 9,39,0,101,49,13,333,16,158,18,23,1,254,30,24,310,272,21,252,286,68,51,344,159,105,455,22,627,7,35,33,31  },
		{ 1,21,2,14,5,0,32,38,23,10,3,51,12,13,76,54,17,72,46,36,115,48,64,37,22,4,99,45,50,421,89,221  },
		{ 260,120,450,141,202,15,137,515,269,318,700,77,753,922,494,291,82,5,351,1,342,326,523,704,90,177,13,854,128,21,32,64  },
		{ 16,24,18,68,35,1,9,71,167,0,67,149,118,212,191,60,69,65,10,21,64,22,246,48,189,399,124,12,50,28,7,108  },
		{ 0,1,28,9,22,2,49,64,23,55,67,5,36,109,12,13,7,39,51,10,86,21,65,69,128,35,50,115,24,83,160,30  },
		{ 325,198,147,178,427,142,5,798,202,315,61,49,43,234,70,259,113,534,20,77,0,159,318,21,7,416,725,170,904,465,455,344  },
		{ 0,9,28,1,65,22,2,7,14,24,35,36,67,23,39,55,16,13,109,64,51,10,21,12,18,69,49,30,5,86,124,95  },
		{ 180,13,141,115,23,317,1,217,4,15,365,2,5,269,197,51,352,0,515,341,165,3,752,202,77,33,21,64,700,318,10,308  },
		{ 15,515,700,753,0,1,2,13,23,9,5,51,93,901,4,33,82,180,120,197,8,341,3,64,141,260,110,77,165,10,7,115  },
		{ 6,74,25,66,380,42,841,1,19,324,197,85,138,29,509,26,75,87,350,903,21,500,38,64,226,278,394,309,135,70,237,97  },
		{ 13,23,51,457,15,12,165,4,515,0,1,700,453,33,64,3,719,197,753,11,37,10,21,730,40,32,523,403,961,2,115,5  },
		{ 788,180,83,319,314,5,693,498,4,21,64,17,11,24,12,526,33,804,3,0,160,32,117,102,942,817,134,961,104,671,595,153  },
		{ 15,1,515,2,13,700,4,23,3,0,753,5,341,51,11,33,77,6,901,10,7,115,217,102,141,40,12,197,165,180,569,202  },
		{ 101,9,18,16,0,60,520,167,24,1,21,5,694,35,364,264,604,166,146,118,917,121,13,212,100,68,71,28,48,252,55,39  },
		{ 13,23,51,33,77,115,141,0,64,4,102,2,217,9,128,202,15,21,269,180,10,7,22,515,5,11,137,3,40,317,32,16  },
		{ 66,6,135,97,74,204,172,278,7,85,25,174,2,22,64,29,138,324,95,65,42,52,26,69,38,140,380,5,192,21,353,87  },
		{ 2,1,7,21,24,0,33,165,120,97,29,69,18,14,6,83,67,423,450,386,117,19,809,5,197,102,91,66,25,783,298,150  },
		{ 0,9,39,16,158,68,49,1,35,24,22,21,30,10,109,18,101,333,7,2,13,344,254,5,65,23,272,124,31,28,36,159  },
		{ 15,515,700,10,753,33,180,77,115,341,197,365,4,901,317,13,1,23,102,141,40,117,217,165,5,11,55,143,253,569,21,137  },
		{ 100,166,382,88,478,264,98,265,39,1,274,921,438,363,404,96,593,447,724,9,411,639,682,435,812,393,31,30,410,13,144,116  },
		{ 19,283,128,436,53,297,42,27,26,25,813,432,390,503,122,389,736,605,690,269,63,78,65,123,381,73,108,235,444,250,216,630  },
		{ 128,0,51,137,494,1,269,33,2,13,6,450,202,102,25,15,141,117,65,49,18,817,551,515,29,615,95,77,523,475,318,208  },
		{ 16,18,60,101,9,35,68,121,0,1,191,55,107,118,167,7,647,126,24,5,21,14,92,146,13,49,10,22,48,28,212,199  },
		{ 352,230,531,217,160,854,669,93,748,351,36,137,251,202,228,871,82,689,258,144,699,717,318,728,752,219,539,120,816,839,533,574  },
		{ 15,515,700,753,13,23,51,0,8,110,165,77,4,10,82,1,180,22,197,202,93,326,31,5,403,11,33,373,49,260,120,351  },
		{ 217,9,0,88,352,175,100,35,101,752,317,30,39,197,213,141,562,252,68,854,180,115,83,1,64,194,321,756,509,208,901,289  },
		{ 32,64,288,147,470,312,519,182,835,95,90,178,247,387,20,481,356,43,316,13,259,97,864,819,237,120,5,2,33,298,107,874  },
		{ 16,0,7,14,24,1,2,5,18,35,9,21,10,50,141,12,128,48,64,22,69,37,13,46,67,23,28,54,51,6,36,32  },
		{ 18,9,411,132,77,195,101,121,265,252,39,146,33,5,363,167,16,354,13,364,1,100,271,60,24,203,156,31,102,520,159,21  },
		{ 4,13,115,23,2,1,77,217,180,141,5,33,0,51,3,341,202,317,21,365,15,11,318,197,102,269,9,10,515,64,165,6  },
		{ 7,14,16,24,18,92,35,108,71,2,189,140,1,149,60,65,69,68,0,38,97,66,150,36,230,21,64,22,46,67,10,28  },
		{ 1,0,2,180,31,13,5,22,141,36,115,23,12,44,21,197,4,352,341,15,901,8,3,64,98,86,165,10,9,105,128,51  },
		{ 43,20,97,147,107,7,2,66,192,104,74,173,52,135,64,29,560,414,202,142,178,750,356,16,174,77,14,298,357,32,825,194  },
		{ 0,9,68,101,39,16,24,30,35,100,166,88,1,21,154,124,65,23,252,13,694,22,28,7,125,18,67,364,274,48,51,49  },
		{ 9,100,0,30,856,166,264,120,1,88,260,39,836,827,737,254,93,44,31,141,137,82,13,77,373,131,5,863,98,23,931,33  },
		{ 17,14,3,45,21,5,2,32,1,23,328,13,106,51,12,62,48,38,543,37,155,133,99,54,46,137,128,56,6,209,80,4  },
		{ 131,613,30,100,228,406,274,224,88,716,39,856,219,1,827,190,9,166,31,863,137,96,0,44,160,829,187,93,98,36,944,924  },
		{ 352,217,752,864,954,437,64,180,141,372,269,579,349,317,318,15,9,128,36,33,0,120,515,202,700,137,86,13,93,30,16,237  },
		{ 180,141,217,317,115,352,15,64,23,515,13,341,752,1,700,498,372,365,0,10,753,269,5,349,197,143,21,9,165,2,137,51  },
		{ 5,17,2,45,1,3,14,21,13,51,23,48,4,32,114,6,361,133,12,38,457,36,50,19,29,128,86,46,27,64,514,0  },
		{ 6,2,25,0,1,29,128,4,26,10,45,32,19,119,76,7,22,40,790,17,65,202,64,483,112,14,42,13,9,77,141,59  },
		{ 13,23,2,0,1,33,141,51,115,77,4,180,3,202,5,128,102,6,217,7,317,269,197,11,137,40,9,10,64,365,352,21  },
		{ 13,23,51,120,15,5,1,202,165,141,21,2,515,457,64,700,12,33,197,386,180,115,0,318,95,6,10,93,260,719,403,7  },
		{ 1,9,0,31,39,44,127,385,100,30,276,187,98,131,137,442,77,23,13,21,93,908,88,96,33,219,116,110,115,827,202,166  },
		{ 1,22,9,49,28,36,35,131,141,185,13,23,0,95,105,67,86,109,39,98,352,159,21,31,12,237,83,10,64,55,2,272  },
		{ 0,5,1,21,2,10,22,12,51,23,13,32,36,4,37,14,48,3,17,115,128,202,86,64,9,197,165,38,137,54,28,403  },
		{ 15,515,82,351,700,854,141,922,753,217,260,752,269,372,352,120,77,291,898,317,1,954,349,247,318,64,177,13,457,93,110,51  },
		{ 144,203,613,326,418,137,96,406,494,840,83,669,228,1,36,817,822,855,859,160,944,576,679,856,863,251,44,816,831,317,202,31  },
		{ 15,515,13,23,700,1,753,51,2,5,0,21,180,141,120,82,165,352,12,197,3,4,202,115,33,260,48,32,6,269,7,64  },
		{ 13,23,1,4,115,51,0,77,141,2,33,5,202,3,15,180,217,341,11,317,10,365,515,102,9,197,165,64,700,269,494,318  },
		{ 531,261,269,160,295,943,384,728,843,137,717,373,332,110,260,206,93,559,533,365,244,617,141,120,699,959,318,940,911,964,10,317  },
		{ 1,31,36,2,22,0,55,13,5,10,180,86,141,23,44,64,12,170,51,21,164,143,165,197,127,237,98,125,116,115,341,3  },
		{ 13,141,23,202,4,51,64,32,269,77,33,0,318,128,10,115,7,102,9,180,11,137,5,1,291,15,21,352,14,86,40,18  },
		{ 120,202,260,82,450,77,141,15,33,23,318,515,269,351,64,4,1,700,40,51,203,128,102,753,326,13,165,180,110,5,817,137  },
		{ 102,33,117,15,153,523,899,515,730,700,196,753,77,13,51,23,342,300,40,450,817,202,120,49,4,128,403,318,64,59,139,134  },
		{ 450,120,15,817,523,494,202,403,515,33,700,576,77,753,102,475,260,128,318,453,402,342,196,51,13,615,137,5,326,10,457,14  },
		{ 2,7,29,66,52,112,6,87,5,64,14,70,1,58,74,135,25,151,32,0,226,4,22,19,16,97,20,45,46,43,21,10  },
		{ 1,77,291,652,102,349,120,39,5,9,342,260,340,33,296,98,13,23,385,698,71,850,293,121,100,64,50,638,371,92,21,2  },
		{ 1,2,0,15,13,141,5,515,23,4,341,3,180,700,51,115,269,901,77,753,217,352,365,197,317,33,202,6,11,318,7,21  },
		{ 7,14,16,2,0,5,64,1,24,9,46,18,35,21,10,22,141,58,128,23,38,70,37,60,13,48,12,92,32,163,77,75  },
		{ 2,7,6,66,226,87,29,74,135,25,5,52,1,278,97,222,26,172,16,14,75,220,42,70,21,32,19,64,65,145,92,22  },
		{ 15,515,700,753,4,33,77,1,217,13,40,11,102,21,117,5,23,153,120,93,134,110,82,32,2,115,196,141,64,51,3,291  },
		{ 13,217,82,351,115,260,23,141,77,180,15,1,21,317,51,854,5,515,36,120,110,352,752,137,372,700,349,32,202,291,922,93  },
		{ 82,110,190,373,217,120,31,77,30,318,93,1,717,269,88,141,317,187,33,260,372,98,0,244,44,863,299,341,351,137,730,127  },
		{ 23,13,401,308,165,9,51,629,39,391,558,743,773,30,261,115,109,332,254,0,125,49,843,569,21,197,28,351,364,228,350,317  },
		{ 165,0,125,49,43,21,13,391,31,5,193,102,64,104,141,422,22,18,314,623,558,44,387,232,197,93,7,784,65,319,95,20  },
		{ 1,15,13,4,2,23,515,33,77,0,115,5,700,3,341,202,180,51,753,141,102,901,11,217,365,40,7,6,317,10,21,165  },
		{ 843,295,160,36,141,206,137,93,120,261,110,943,10,82,384,77,1,567,318,269,23,860,531,332,282,22,964,244,13,617,201,699  },
		{ 7,81,91,192,426,172,43,173,95,104,5,33,879,0,715,6,568,49,66,38,22,32,370,560,2,712,448,180,117,20,526,263  },
		{ 403,475,33,102,51,23,15,13,453,0,494,515,202,196,700,753,153,1,16,4,18,22,128,117,523,20,318,77,134,5,342,21  },
		{ 260,141,269,120,318,352,1,5,15,351,82,854,202,515,77,21,700,13,922,753,64,32,33,48,851,177,349,7,23,137,51,102  },
		{ 15,515,700,753,1,13,2,0,23,3,4,5,115,197,180,33,12,165,9,21,51,10,7,352,6,961,120,77,8,217,141,11  },
		{ 39,30,166,0,190,9,404,101,100,252,274,88,333,1,158,21,68,13,265,530,539,23,310,329,438,48,16,228,31,131,10,36  },
		{ 1,0,9,28,22,13,12,5,23,2,141,128,137,21,51,115,64,16,202,83,10,180,7,67,36,24,18,65,55,50,49,37  },
		{ 15,515,700,1,753,0,2,23,13,180,5,51,3,901,6,120,197,457,115,7,82,4,165,33,9,730,12,31,8,64,719,21  },
		{ 9,39,141,180,30,131,352,0,498,165,752,28,166,219,1,100,10,22,115,88,49,31,64,197,228,224,23,158,125,864,317,258  },
		{ 61,17,5,2,45,80,29,311,58,6,209,1,106,14,151,64,62,667,32,454,52,21,287,4,27,3,56,128,738,38,70,12  },
		{ 22,31,1,125,23,10,44,0,242,13,28,51,456,299,116,506,36,170,599,685,2,55,558,165,5,93,479,206,141,8,9,268  },
		{ 187,258,839,926,574,228,406,160,531,219,860,137,871,224,116,93,669,902,318,36,533,851,131,816,201,843,717,442,202,1,434,384  },
		{ 75,64,18,7,9,16,291,177,349,60,232,107,51,13,24,77,163,134,304,128,95,87,269,223,141,99,937,115,23,15,448,278  },
		{ 15,515,700,753,1,0,2,13,180,23,5,4,115,3,901,51,9,8,197,12,6,10,82,22,120,7,141,961,33,77,341,31  },
		{ 13,23,51,15,165,5,1,515,202,21,2,0,120,700,115,141,12,197,457,32,10,753,4,3,128,64,453,318,7,403,180,137  },
		{ 1,2,0,3,141,64,15,77,33,5,13,6,10,23,515,4,180,7,269,700,217,17,102,165,11,291,753,40,117,14,51,197  },
		{ 345,332,260,269,531,317,752,373,352,717,10,82,180,728,351,365,160,93,36,217,498,341,1,143,533,251,901,55,898,244,141,864  },
		{ 16,7,189,92,24,35,60,388,140,1,14,230,150,21,98,733,18,108,71,915,67,22,69,64,32,314,0,2,65,90,594,97  },
		{ 142,178,786,234,639,416,259,878,929,70,77,147,202,455,315,49,590,846,534,481,518,450,113,198,884,465,5,58,761,163,767,132  },
		{ 81,715,0,192,712,681,636,74,173,104,91,20,750,22,7,95,49,64,43,370,825,718,52,422,879,560,426,207,172,32,10,21  },
		{ 13,15,23,515,700,51,0,753,961,1,457,115,2,10,12,9,197,453,4,719,33,165,5,401,569,3,7,64,730,77,37,475  },
		{ 64,312,5,250,297,237,14,34,869,445,180,95,472,80,311,61,17,1,53,77,33,247,751,738,153,32,469,352,106,4,288,21  },
		{ 16,7,18,24,14,71,35,0,92,68,118,2,60,1,28,154,22,9,97,20,149,10,124,49,21,43,55,5,302,65,140,33  },
		{ 195,360,156,626,771,132,163,687,591,146,846,371,121,407,70,48,883,379,296,586,761,293,98,354,13,55,18,5,49,31,385,340  },
		{ 202,141,13,318,64,128,77,137,33,403,217,494,31,117,269,0,134,51,102,291,32,317,15,44,515,23,21,4,153,6,700,115  },
		{ 81,192,172,97,66,74,715,7,22,0,91,43,712,33,893,4,5,370,104,879,29,426,173,6,48,681,16,64,25,2,718,21  },
		{ 1,2,14,6,65,7,24,38,66,5,86,67,51,36,12,23,18,28,13,0,29,22,69,64,10,124,21,108,46,74,25,50  },
		{ 33,141,128,202,77,13,102,4,318,269,403,137,51,23,494,180,0,15,153,64,40,196,117,342,21,515,32,11,22,475,352,700  },
		{ 269,141,77,349,318,217,291,15,515,33,22,700,10,753,102,304,177,202,28,36,372,120,49,351,64,30,317,854,260,275,0,352  },
		{ 6,85,25,42,19,74,66,26,138,64,222,32,135,500,280,75,69,220,226,29,21,22,7,87,853,235,1,65,125,2,86,108  },
		{ 9,0,16,18,1,39,24,7,105,2,31,28,98,30,137,101,23,68,35,5,13,21,77,127,55,49,272,252,64,14,44,128  },
		{ 2,1,14,67,6,0,24,18,38,5,46,29,108,83,69,7,65,36,28,12,114,10,64,21,22,13,16,25,52,103,86,133  },
		{ 1,2,22,0,5,36,28,49,13,64,23,51,105,14,7,12,95,9,21,67,35,141,55,10,31,65,83,137,115,202,50,37  },
		{ 7,66,97,172,92,14,6,16,140,21,5,298,232,2,192,380,32,22,314,74,568,324,95,64,38,10,135,448,126,0,330,69  },
		{ 2,6,1,29,5,13,17,133,27,114,19,46,26,50,23,52,108,218,165,51,14,86,137,128,25,45,65,236,401,22,38,3  },
		{ 6,1,26,25,19,42,2,74,29,70,133,66,14,64,67,114,108,36,27,65,357,75,388,138,85,103,51,309,13,23,594,145  },
		{ 22,1,9,28,31,180,36,105,141,44,352,49,86,115,131,0,98,39,55,95,64,12,109,13,137,317,2,30,217,83,96,752  },
		{ 203,822,77,23,859,326,33,494,576,403,39,291,817,217,473,13,120,100,102,333,82,593,310,60,40,921,260,966,704,691,254,30  },
		{ 15,515,700,753,33,117,77,102,134,4,153,13,115,1,196,40,11,217,23,3,2,5,341,317,365,0,21,569,291,12,32,901  },
		{ 15,515,700,753,13,23,165,51,180,120,0,197,8,110,33,82,326,77,386,1,10,141,260,901,125,4,115,475,12,93,102,351  },
		{ 15,1,23,515,13,51,0,141,700,2,21,180,5,120,753,165,202,4,197,82,352,33,12,260,3,9,269,93,110,7,115,48  },
		{ 15,515,700,753,0,1,2,4,3,8,180,5,13,10,341,23,6,197,9,961,51,7,82,165,115,22,31,752,457,719,730,120  },
		{ 559,661,922,564,141,10,317,261,143,269,244,110,533,295,260,332,843,1,384,434,752,373,876,180,93,642,9,22,959,943,365,28  },
		{ 15,515,1,700,0,2,753,13,5,23,3,180,51,165,197,12,4,6,21,7,457,719,115,9,33,901,141,82,8,10,341,752  },
		{ 198,234,325,0,147,43,416,639,455,20,49,315,77,5,725,202,142,819,427,577,230,470,7,450,104,178,904,95,66,61,290,329  },
		{ 447,264,363,411,9,676,682,156,897,18,166,664,1,821,812,354,382,478,100,759,195,521,39,98,905,33,656,404,5,96,101,77  },
		{ 24,16,14,18,2,7,1,35,69,71,46,0,189,149,68,9,108,267,67,10,38,21,60,50,28,64,22,140,65,36,83,5  },
		{ 7,107,35,20,147,14,77,16,33,13,859,43,23,0,326,403,128,120,2,92,178,142,82,576,126,198,121,51,18,5,102,10  },
		{ 30,131,276,44,613,187,244,31,39,190,442,1,137,9,141,839,88,116,228,82,77,98,935,269,100,202,574,908,253,219,13,318  },
		{ 98,223,1,393,421,48,100,125,265,284,31,697,51,21,9,812,834,293,410,88,791,96,593,382,163,23,453,213,221,541,264,39  },
		{ 51,421,453,616,512,386,395,282,924,127,170,301,10,31,8,341,763,293,949,219,670,365,98,55,258,141,180,116,308,261,36,242  },
		{ 253,951,352,110,206,244,141,811,332,282,10,638,854,417,559,143,911,752,533,55,642,180,260,93,498,499,341,120,959,351,661,873  },
		{ 9,0,49,131,254,39,1,159,272,28,158,35,68,16,105,224,36,22,627,24,101,21,327,23,30,219,10,13,578,286,125,31  },
		{ 22,131,105,55,9,98,36,28,10,64,169,272,219,187,1,51,224,109,23,95,127,13,374,164,371,141,239,35,165,286,143,258  },
		{ 691,478,340,1,914,658,724,744,156,698,772,363,411,682,296,335,303,447,9,410,909,225,264,919,96,354,686,284,98,664,382,88  },
		{ 16,24,18,1,35,7,71,9,21,108,14,60,2,140,5,189,0,48,230,69,64,267,92,68,118,46,22,12,32,10,133,149  },
		{ 0,9,1,31,39,98,137,28,23,51,127,5,21,49,202,44,371,16,141,22,30,395,101,2,128,7,13,18,385,96,737,35  },
		{ 16,18,35,60,7,68,0,24,9,252,101,14,21,10,71,49,28,22,121,1,109,55,419,107,13,118,48,23,126,5,158,167  },
		{ 116,268,203,93,206,417,692,551,8,523,31,499,0,13,22,44,450,940,120,326,959,1,51,202,137,638,473,10,23,576,341,559  },
		{ 225,744,459,919,914,691,330,82,538,521,622,340,127,120,15,1,478,385,321,260,30,515,141,21,4,762,442,335,102,93,88,33  },
		{ 5,0,1,2,10,22,21,12,14,36,13,23,9,51,28,32,48,64,18,3,37,24,45,17,50,128,38,141,115,202,7,165  },
		{ 450,137,202,704,120,326,260,23,291,77,82,457,403,310,341,851,349,351,968,70,60,494,890,15,269,49,4,159,817,678,141,95  },
		{ 15,515,700,753,33,4,93,13,77,110,23,102,40,64,117,5,31,11,51,120,82,8,10,217,44,1,2,141,21,115,125,134  },
		{ 15,1,13,515,23,700,2,51,0,753,5,180,21,141,3,165,12,457,4,352,197,7,719,115,6,9,202,33,8,82,48,120  },
		{ 219,258,127,395,116,51,944,201,98,276,9,567,31,137,860,206,36,13,332,23,295,456,131,44,284,935,242,0,202,10,911,384  },
		{ 7,16,14,18,35,2,20,60,28,24,22,10,6,0,21,12,1,5,107,118,55,109,9,49,13,68,92,120,43,38,23,31  },
		{ 531,160,574,728,533,295,559,269,717,860,373,318,93,902,926,851,137,36,120,434,251,201,258,261,843,260,968,384,187,699,332,244  },
		{ 0,1,9,28,22,141,5,13,2,12,23,21,39,30,64,128,49,83,10,180,55,96,115,7,67,51,50,269,37,137,165,202  },
		{ 13,23,51,15,1,5,21,141,515,0,165,2,700,202,64,120,753,197,12,32,180,4,115,9,125,48,269,128,3,386,7,6  },
		{ 5,21,13,14,20,43,7,49,23,0,38,2,48,107,22,32,16,279,713,12,97,1,46,24,51,197,121,142,150,115,841,345  },
		{ 9,28,0,30,141,1,39,217,115,35,88,317,269,10,55,13,67,64,22,180,23,36,100,341,202,101,7,365,51,49,5,83  },
		{ 120,260,82,450,351,854,15,5,922,515,1,291,269,77,700,326,753,141,457,137,180,21,386,202,177,165,93,341,128,13,730,110  },
		{ 16,35,14,0,60,68,22,121,7,5,10,132,20,848,18,146,107,55,28,77,9,191,907,167,109,43,475,463,419,252,101,363  },
		{ 13,23,15,515,51,1,700,0,141,2,5,753,12,21,180,115,165,120,3,202,33,32,197,4,269,341,9,37,7,457,401,8  },
		{ 201,144,206,418,435,96,1,443,203,330,335,372,187,459,332,88,523,321,30,268,521,44,9,934,264,326,382,269,252,158,839,403  },
		{ 31,44,276,9,131,201,116,0,1,137,284,295,244,141,30,567,39,36,110,662,98,253,49,489,13,187,77,434,96,219,23,28  },
		{ 478,1,264,520,664,9,604,167,48,777,806,411,363,223,682,98,0,96,88,16,68,100,410,18,329,51,759,101,724,647,447,936  },
		{ 23,70,60,87,120,75,379,92,121,21,937,7,195,126,931,446,132,71,411,182,795,535,115,107,293,371,318,163,24,18,668,98  },
		{ 39,9,0,31,98,18,1,127,737,16,44,30,105,254,846,93,310,371,120,395,137,385,557,242,916,100,272,77,116,24,51,827  },
		{ 43,20,7,279,107,126,0,356,35,595,16,359,362,92,49,246,319,60,22,97,64,399,392,95,939,33,14,259,598,18,683,414  },
		{ 417,206,93,8,499,137,120,959,141,473,10,559,341,260,31,564,244,44,253,728,203,269,318,180,352,638,143,115,373,202,15,450  },
		{ 259,465,147,590,687,132,534,581,199,941,146,427,107,178,640,198,5,279,142,522,195,786,21,626,150,121,20,0,929,798,48,35  },
		{ 15,523,450,515,700,817,120,753,13,23,457,719,64,102,33,899,730,51,99,196,342,318,202,77,308,65,197,0,671,403,115,56  },
		{ 141,10,244,365,559,180,143,317,901,752,253,110,55,533,341,564,160,661,535,206,36,261,82,943,531,332,260,93,911,964,352,373  },
		{ 219,258,843,98,295,860,943,261,201,137,567,284,160,276,127,77,33,935,36,268,93,44,403,31,116,203,144,9,102,384,964,662  },
		{ 0,319,422,577,207,32,887,945,95,104,693,61,102,5,344,113,20,117,33,904,153,804,306,77,7,134,83,263,49,124,43,942  },
		{ 1,2,0,5,22,12,13,21,23,36,141,28,9,37,10,51,86,4,115,3,197,202,31,165,64,180,49,128,137,32,7,269  },
		{ 15,515,700,13,1,753,2,0,23,3,5,4,51,6,115,197,961,7,12,9,165,77,8,457,33,10,269,120,11,141,180,202  },
		{ 15,1,515,77,23,700,13,141,202,180,51,120,110,753,137,5,102,128,269,21,165,318,260,326,2,0,217,33,317,352,93,197  },
		{ 15,515,700,1,753,0,2,180,13,5,23,51,4,197,120,33,12,3,9,165,115,21,7,901,6,31,82,523,351,141,64,457  },
		{ 16,18,24,60,21,0,23,9,13,35,5,1,71,51,7,14,121,141,128,10,202,132,36,12,137,75,108,77,156,146,118,64  },
		{ 180,341,901,15,1,515,365,0,700,2,197,753,3,4,5,115,10,165,752,13,317,23,8,141,6,217,31,143,44,7,569,873  },
		{ 9,0,28,35,1,101,39,141,13,64,30,175,22,21,67,49,51,65,68,36,83,23,88,69,96,55,100,2,202,158,10,115  },
		{ 115,316,225,459,365,312,468,180,64,237,13,482,498,247,217,118,410,5,288,156,77,363,65,18,1,411,839,702,67,31,341,102  },
		{ 15,515,700,753,1,0,2,13,23,5,3,4,115,961,9,141,51,7,197,6,10,33,12,120,8,11,21,457,165,217,77,180  },
		{ 121,132,146,195,279,199,60,49,493,156,5,407,640,581,598,534,522,107,35,360,18,955,883,0,147,21,10,362,126,31,13,150  },
		{ 0,1,9,22,28,5,2,23,13,12,51,10,36,21,7,18,128,55,24,137,202,64,141,16,37,115,50,65,96,14,67,49  },
		{ 93,957,102,77,137,120,372,968,202,613,352,30,217,330,160,110,373,33,459,228,180,141,800,704,224,177,317,190,31,318,44,840  },
		{ 15,515,700,0,753,1,23,13,2,51,5,9,82,120,10,901,197,180,93,165,33,260,4,7,102,341,64,141,8,77,6,523  },
		{ 206,417,44,141,137,10,31,8,244,499,116,253,93,144,559,638,269,728,752,564,341,352,160,120,951,717,143,203,901,268,260,180  },
		{ 530,254,679,166,406,39,137,23,228,224,96,840,876,669,827,51,21,613,36,33,765,816,317,30,258,1,131,829,251,242,77,217  },
		{ 15,515,700,753,197,13,457,719,165,82,730,120,23,134,260,341,351,899,180,141,901,386,523,115,33,0,758,352,961,1,365,12  },
		{ 16,0,9,24,68,18,7,35,28,14,1,39,158,2,252,109,60,71,49,101,21,55,419,22,118,124,154,10,265,65,333,23  },
		{ 15,1,515,13,51,23,700,0,120,753,180,2,141,33,5,165,197,202,260,4,102,21,9,137,450,7,82,326,115,12,457,269  },
		{ 253,535,352,564,110,82,854,180,365,10,341,898,533,55,901,244,141,143,752,873,36,642,559,951,282,317,964,498,160,417,206,137  },
		{ 1,31,13,180,44,165,23,10,116,64,341,2,22,242,338,115,197,36,55,0,125,498,546,51,762,391,164,143,141,5,15,479  },
		{ 13,23,115,4,1,51,77,0,2,217,141,180,202,15,317,33,5,515,3,10,11,9,341,365,165,102,700,197,177,137,64,22  },
		{ 39,9,68,28,30,562,0,166,364,158,49,35,175,101,154,65,706,168,36,570,55,21,1,124,333,13,16,274,289,404,31,10  },
		{ 15,515,700,341,753,0,13,1,33,23,141,260,10,4,77,82,51,351,349,9,115,5,180,217,120,22,11,102,901,137,269,202  }
	};

	static inline uint32_t iabs(int32_t i) { return (i < 0) ? static_cast<uint32_t>(-i) : static_cast<uint32_t>(i);	}

	static inline uint8_t to_5(uint32_t v) { v = v * 31 + 128; return (uint8_t)((v + (v >> 8)) >> 8); }
	static inline uint8_t to_6(uint32_t v) { v = v * 63 + 128; return (uint8_t)((v + (v >> 8)) >> 8); }

	template <typename S> inline S maximum(S a, S b) { return (a > b) ? a : b; }
	template <typename S> inline S maximum(S a, S b, S c) { return maximum(maximum(a, b), c); }
	template <typename S> inline S maximum(S a, S b, S c, S d) { return maximum(maximum(maximum(a, b), c), d); }
	
	template <typename S> inline S minimum(S a, S b) {	return (a < b) ? a : b; }
	template <typename S> inline S minimum(S a, S b, S c) {	return minimum(minimum(a, b), c); }
	template <typename S> inline S minimum(S a, S b, S c, S d) { return minimum(minimum(minimum(a, b), c), d); }

	template<typename T> inline T square(T a) { return a * a; }

	static inline float clampf(float value, float low, float high) { if (value < low) value = low; else if (value > high) value = high;	return value; }
	static inline uint8_t clamp255(int32_t i) { return (uint8_t)((i & 0xFFFFFF00U) ? (~(i >> 31)) : i); }

	template <typename S> inline S clamp(S value, S low, S high) { return (value < low) ? low : ((value > high) ? high : value); }
	static inline int32_t clampi(int32_t value, int32_t low, int32_t high) { if (value < low) value = low; else if (value > high) value = high;	return value; }

	static inline int squarei(int a) { return a * a; }
	static inline int absi(int a) { return (a < 0) ? -a : a; }

	enum eNoClamp { cNoClamp };

	struct color32
	{
		union
		{
			struct
			{
				uint8_t r;
				uint8_t g;
				uint8_t b;
				uint8_t a;
			};

			uint8_t c[4];
			
			uint32_t m;
		};

		color32() { }

		color32(uint32_t vr, uint32_t vg, uint32_t vb, uint32_t va) { set(vr, vg, vb, va); }
		color32(eNoClamp unused, uint32_t vr, uint32_t vg, uint32_t vb, uint32_t va) { (void)unused; set_noclamp_rgba(vr, vg, vb, va); }

		void set(uint32_t vr, uint32_t vg, uint32_t vb, uint32_t va) { c[0] = static_cast<uint8_t>(vr); c[1] = static_cast<uint8_t>(vg); c[2] = static_cast<uint8_t>(vb); c[3] = static_cast<uint8_t>(va); }

		void set_noclamp_rgb(uint32_t vr, uint32_t vg, uint32_t vb) { c[0] = static_cast<uint8_t>(vr); c[1] = static_cast<uint8_t>(vg); c[2] = static_cast<uint8_t>(vb); }
		void set_noclamp_rgba(uint32_t vr, uint32_t vg, uint32_t vb, uint32_t va) { set(vr, vg, vb, va); }

		void set_clamped(int vr, int vg, int vb, int va) { c[0] = clamp255(vr); c[1] = clamp255(vg);	c[2] = clamp255(vb); c[3] = clamp255(va); }

		uint8_t operator[] (uint32_t idx) const { assert(idx < 4); return c[idx]; }
		uint8_t &operator[] (uint32_t idx) { assert(idx < 4); return c[idx]; }

		bool operator== (const color32&rhs) const { return m == rhs.m; }

		void set_rgb(const color32& other) { c[0] = static_cast<uint8_t>(other.c[0]); c[1] = static_cast<uint8_t>(other.c[1]); c[2] = static_cast<uint8_t>(other.c[2]); }

		static color32 comp_min(const color32& a, const color32& b) { return color32(cNoClamp, std::min(a[0], b[0]), std::min(a[1], b[1]), std::min(a[2], b[2]), std::min(a[3], b[3])); }
		static color32 comp_max(const color32& a, const color32& b) { return color32(cNoClamp, std::max(a[0], b[0]), std::max(a[1], b[1]), std::max(a[2], b[2]), std::max(a[3], b[3])); }
	};
	
	enum dxt_constants
	{
		cDXT1SelectorBits = 2U, cDXT1SelectorValues = 1U << cDXT1SelectorBits, cDXT1SelectorMask = cDXT1SelectorValues - 1U,
		cDXT5SelectorBits = 3U, cDXT5SelectorValues = 1U << cDXT5SelectorBits, cDXT5SelectorMask = cDXT5SelectorValues - 1U,
	};

	struct bc1_block
	{
		enum { cTotalEndpointBytes = 2, cTotalSelectorBytes = 4 };

		uint8_t m_low_color[cTotalEndpointBytes];
		uint8_t m_high_color[cTotalEndpointBytes];
		uint8_t m_selectors[cTotalSelectorBytes];
				
		inline uint32_t get_high_color() const { return m_high_color[0] | (m_high_color[1] << 8U); }
		inline uint32_t get_low_color() const { return m_low_color[0] | (m_low_color[1] << 8U); }
		inline void set_low_color(uint16_t c) { m_low_color[0] = static_cast<uint8_t>(c & 0xFF); m_low_color[1] = static_cast<uint8_t>((c >> 8) & 0xFF); }
		inline void set_high_color(uint16_t c) { m_high_color[0] = static_cast<uint8_t>(c & 0xFF); m_high_color[1] = static_cast<uint8_t>((c >> 8) & 0xFF); }
		inline uint32_t get_selector(uint32_t x, uint32_t y) const { assert((x < 4U) && (y < 4U)); return (m_selectors[y] >> (x * cDXT1SelectorBits)) & cDXT1SelectorMask; }
		inline void set_selector(uint32_t x, uint32_t y, uint32_t val) { assert((x < 4U) && (y < 4U) && (val < 4U)); m_selectors[y] &= (~(cDXT1SelectorMask << (x * cDXT1SelectorBits))); m_selectors[y] |= (val << (x * cDXT1SelectorBits)); }

		static uint16_t pack_color(const color32& color, bool scaled, uint32_t bias = 127U)
		{
			uint32_t r = color.r, g = color.g, b = color.b;
			if (scaled)
			{
				r = (r * 31U + bias) / 255U;
				g = (g * 63U + bias) / 255U;
				b = (b * 31U + bias) / 255U;
			}
			return static_cast<uint16_t>(minimum(b, 31U) | (minimum(g, 63U) << 5U) | (minimum(r, 31U) << 11U));
		}

		static uint16_t pack_unscaled_color(uint32_t r, uint32_t g, uint32_t b) { return static_cast<uint16_t>(b | (g << 5U) | (r << 11U)); }

		static void unpack_color(uint32_t c, uint32_t& r, uint32_t& g, uint32_t& b)
		{
			r = (c >> 11) & 31;
			g = (c >> 5) & 63;
			b = c & 31;

			r = (r << 3) | (r >> 2);
			g = (g << 2) | (g >> 4);
			b = (b << 3) | (b >> 2);
		}
	};

	static uint16_t g_total_ordering_hash[4096];

	struct hist
	{
		uint8_t m_hist[4];

		hist() 
		{ 
			memset(m_hist, 0, sizeof(m_hist)); 
		}

		hist(uint32_t i, uint32_t j, uint32_t k, uint32_t l)
		{
			m_hist[0] = (uint8_t)i;
			m_hist[1] = (uint8_t)j;
			m_hist[2] = (uint8_t)k;
			m_hist[3] = (uint8_t)l;
		}

		inline bool operator== (const hist &h) const
		{
			if (m_hist[0] != h.m_hist[0]) return false;
			if (m_hist[1] != h.m_hist[1]) return false;
			if (m_hist[2] != h.m_hist[2]) return false;
			if (m_hist[3] != h.m_hist[3]) return false;
			return true;
		}

		inline bool any_16() const 
		{
			return (m_hist[0] == 16) || (m_hist[1] == 16) || (m_hist[2] == 16) || (m_hist[3] == 16);
		}

		inline uint32_t lookup_total_ordering_index() const
		{
			if (m_hist[0] == 16)
				return 15;
			else if (m_hist[1] == 16)
				return 700;
			else if (m_hist[2] == 16)
				return 753;
			else if (m_hist[3] == 16)
				return 515;

			// Must sum to 16, so m_hist[3] isn't needed.
			return g_total_ordering_hash[m_hist[0] | (m_hist[1] << 4) | (m_hist[2] << 8)];
		}
	};

	struct bc1_match_entry
	{
		uint8_t m_hi;
		uint8_t m_lo;
	};

	static bc1_match_entry g_bc1_match5_equals_1[256], g_bc1_match6_equals_1[256]; // selector 1, allow equals hi/lo

	static void prepare_bc1_single_color_table(bc1_match_entry* pTable, const uint8_t* pExpand, int size0, int size1, int sel)
	{
		for (int i = 0; i < 256; i++)
		{
			int lowest_e = 256;
			for (int lo = 0; lo < size0; lo++)
			{
				for (int hi = 0; hi < size1; hi++)
				{
					const int lo_e = pExpand[lo], hi_e = pExpand[hi];
					int e;

					if (sel == 1)
					{
						// Selector 1
						e = iabs(((hi_e * 2 + lo_e) / 3) - i);
						e += (iabs(hi_e - lo_e) * 3) / 100;
					}
					else
					{
						assert(sel == 0);

						// Selector 0
						e = iabs(hi_e - i);
					}

					if (e < lowest_e)
					{
						pTable[i].m_hi = static_cast<uint8_t>(hi);
						pTable[i].m_lo = static_cast<uint8_t>(lo);

						lowest_e = e;
					}

				} // hi
			} // lo
		}
	}

	static bool g_initialized;

	void encode_bc1_init()
	{
		if (g_initialized)
			return;

		uint8_t bc1_expand5[32];
		for (int i = 0; i < 32; i++)
			bc1_expand5[i] = static_cast<uint8_t>((i << 3) | (i >> 2));
		prepare_bc1_single_color_table(g_bc1_match5_equals_1, bc1_expand5, 32, 32, 1);

		uint8_t bc1_expand6[64];
		for (int i = 0; i < 64; i++)
			bc1_expand6[i] = static_cast<uint8_t>((i << 2) | (i >> 4));
		prepare_bc1_single_color_table(g_bc1_match6_equals_1, bc1_expand6, 64, 64, 1);

		for (uint32_t i = 0; i < NUM_UNIQUE_TOTAL_ORDERINGS; i++)
		{
			hist h;
			h.m_hist[0] = (uint8_t)g_unique_total_orders[i][0];
			h.m_hist[1] = (uint8_t)g_unique_total_orders[i][1];
			h.m_hist[2] = (uint8_t)g_unique_total_orders[i][2];
			h.m_hist[3] = (uint8_t)g_unique_total_orders[i][3];
			
			if (!h.any_16())
				g_total_ordering_hash[h.m_hist[0] | (h.m_hist[1] << 4) | (h.m_hist[2] << 8)] = (uint16_t)i;
		}

		g_initialized = true;
	}
	
	void encode_bc1_solid_block(void* pDst, uint32_t fr, uint32_t fg, uint32_t fb) 
	{
		bc1_block* pDst_block = static_cast<bc1_block*>(pDst);

		uint32_t mask = 0xAA;
		uint32_t max16 = (g_bc1_match5_equals_1[fr].m_hi << 11) | (g_bc1_match6_equals_1[fg].m_hi << 5) | g_bc1_match5_equals_1[fb].m_hi;
		uint32_t min16 = (g_bc1_match5_equals_1[fr].m_lo << 11) | (g_bc1_match6_equals_1[fg].m_lo << 5) | g_bc1_match5_equals_1[fb].m_lo;

		if (min16 == max16)
		{
			// Always forbid 3 color blocks
			// This is to guarantee that BC3 blocks never use punchthrough alpha (3 color) mode, which isn't supported on some (all?) GPU's.
			mask = 0;

			// Make l > h
			if (min16 > 0)
				min16--;
			else
			{
				// l = h = 0
				assert(min16 == max16 && max16 == 0);

				max16 = 1;
				min16 = 0;
				mask = 0x55;
			}

			assert(max16 > min16);
		}

		if (max16 < min16)
		{
			std::swap(max16, min16);
			mask ^= 0x55;
		}

		pDst_block->set_low_color(static_cast<uint16_t>(max16));
		pDst_block->set_high_color(static_cast<uint16_t>(min16));
		pDst_block->m_selectors[0] = static_cast<uint8_t>(mask);
		pDst_block->m_selectors[1] = static_cast<uint8_t>(mask);
		pDst_block->m_selectors[2] = static_cast<uint8_t>(mask);
		pDst_block->m_selectors[3] = static_cast<uint8_t>(mask);
	}

	static const float g_midpoint5[32] = { .015686f, .047059f, .078431f, .111765f, .145098f, .176471f, .207843f, .241176f, .274510f, .305882f, .337255f, .370588f, .403922f, .435294f, .466667f, .5f, .533333f, .564706f, .596078f, .629412f, .662745f, .694118f, .725490f, .758824f, .792157f, .823529f, .854902f, .888235f, .921569f, .952941f, .984314f, 1.0f };
	static const float g_midpoint6[64] = { .007843f, .023529f, .039216f, .054902f, .070588f, .086275f, .101961f, .117647f, .133333f, .149020f, .164706f, .180392f, .196078f, .211765f, .227451f, .245098f, .262745f, .278431f, .294118f, .309804f, .325490f, .341176f, .356863f, .372549f, .388235f, .403922f, .419608f, .435294f, .450980f, .466667f, .482353f, .500000f, .517647f, .533333f, .549020f, .564706f, .580392f, .596078f, .611765f, .627451f, .643137f, .658824f, .674510f, .690196f, .705882f, .721569f, .737255f, .754902f, .772549f, .788235f, .803922f, .819608f, .835294f, .850980f, .866667f, .882353f, .898039f, .913725f, .929412f, .945098f, .960784f, .976471f, .992157f, 1.0f };

	struct vec3F { float c[3]; };

	static bool compute_least_squares_endpoints_rgb2(const color32* pColors, const uint8_t* pSelectors, vec3F* pXl, vec3F* pXh,
		int min_r, int max_r, int min_g, int max_g, int min_b, int max_b)
	{
		// Derived from bc7enc16's LS function.
		// Least squares using normal equations: http://www.cs.cornell.edu/~bindel/class/cs3220-s12/notes/lec10.pdf 
		// I did this in matrix form first, expanded out all the ops, then optimized it a bit.
		uint32_t uq00_r = 0, uq10_r = 0, ut_r = 0, uq00_g = 0, uq10_g = 0, ut_g = 0, uq00_b = 0, uq10_b = 0, ut_b = 0;

		// This table is: 9 * (w * w), 9 * ((1.0f - w) * w), 9 * ((1.0f - w) * (1.0f - w))
		// where w is [0,1/3,2/3,1]. 9 is the perfect multiplier.
		static const uint32_t s_weight_vals[4] = { 0x000009, 0x010204, 0x040201, 0x090000 };

		uint32_t weight_accum = 0;
		for (uint32_t i = 0; i < 16; i++)
		{
			const uint32_t r = pColors[i].c[0], g = pColors[i].c[1], b = pColors[i].c[2];
			const uint32_t sel = pSelectors[i];
			ut_r += r;
			ut_g += g;
			ut_b += b;
			weight_accum += s_weight_vals[sel];
			uq00_r += sel * r;
			uq00_g += sel * g;
			uq00_b += sel * b;
		}

		float q00_r = (float)uq00_r, q10_r = (float)uq10_r, t_r = (float)ut_r;
		float q00_g = (float)uq00_g, q10_g = (float)uq10_g, t_g = (float)ut_g;
		float q00_b = (float)uq00_b, q10_b = (float)uq10_b, t_b = (float)ut_b;

		q10_r = t_r * 3.0f - q00_r;
		q10_g = t_g * 3.0f - q00_g;
		q10_b = t_b * 3.0f - q00_b;

		float z00 = (float)((weight_accum >> 16) & 0xFF);
		float z10 = (float)((weight_accum >> 8) & 0xFF);
		float z11 = (float)(weight_accum & 0xFF);
		float z01 = z10;

		float det = z00 * z11 - z01 * z10;
		if (fabs(det) < 1e-8f)
			return false;

		det = (3.0f / 255.0f) / det;

		float iz00, iz01, iz10, iz11;
		iz00 = z11 * det;
		iz01 = -z01 * det;
		iz10 = -z10 * det;
		iz11 = z00 * det;

		pXl->c[0] = iz00 * q00_r + iz01 * q10_r; 
		pXh->c[0] = iz10 * q00_r + iz11 * q10_r;

		pXl->c[1] = iz00 * q00_g + iz01 * q10_g; 
		pXh->c[1] = iz10 * q00_g + iz11 * q10_g;

		pXl->c[2] = iz00 * q00_b + iz01 * q10_b; 
		pXh->c[2] = iz10 * q00_b + iz11 * q10_b;

		// Check and fix channel singularities - might not be needed, but is in UASTC's encoder.
		if ((min_r == max_r) && ((pXl->c[0] < 0.0f) || (pXh->c[0] > 1.0f)))
		{
			pXl->c[0] = (float)min_r * (1.0f/255.0f);
			pXh->c[0] = (float)max_r * (1.0f/255.0f);
		}
		else
		{
			pXl->c[0] = clampf(pXl->c[0], 0.0f, 1.0f);
			pXh->c[0] = clampf(pXh->c[0], 0.0f, 1.0f);
		}

		if ((min_g == max_g) & ((pXl->c[1] < 0.0f) || (pXh->c[1] > 1.0f)))
		{
			pXl->c[1] = (float)min_g * (1.0f/255.0f);
			pXh->c[1] = (float)max_g * (1.0f/255.0f);
		}
		else
		{
			pXl->c[1] = clampf(pXl->c[1], 0.0f, 1.0f);
			pXh->c[1] = clampf(pXh->c[1], 0.0f, 1.0f);
		}

		if ((min_b == max_b) && ((pXl->c[2] < 0.0f) || (pXh->c[2] > 1.0f)))
		{
			pXl->c[2] = (float)min_b * (1.0f/255.0f);
			pXh->c[2] = (float)max_b * (1.0f/255.0f);
		}
		else
		{
			pXl->c[2] = clampf(pXl->c[2], 0.0f, 1.0f);
			pXh->c[2] = clampf(pXh->c[2], 0.0f, 1.0f);
		}

		return true;
	}

	static inline void bc1_find_sels_2(const color32* pSrc_pixels, uint32_t lr, uint32_t lg, uint32_t lb, uint32_t hr, uint32_t hg, uint32_t hb, uint8_t sels[16])
	{
		uint32_t block_r[4], block_g[4], block_b[4];

		block_r[0] = (lr << 3) | (lr >> 2); block_g[0] = (lg << 2) | (lg >> 4);	block_b[0] = (lb << 3) | (lb >> 2);
		block_r[3] = (hr << 3) | (hr >> 2);	block_g[3] = (hg << 2) | (hg >> 4);	block_b[3] = (hb << 3) | (hb >> 2);
		block_r[1] = (block_r[0] * 2 + block_r[3]) / 3;	block_g[1] = (block_g[0] * 2 + block_g[3]) / 3;	block_b[1] = (block_b[0] * 2 + block_b[3]) / 3;
		block_r[2] = (block_r[3] * 2 + block_r[0]) / 3;	block_g[2] = (block_g[3] * 2 + block_g[0]) / 3;	block_b[2] = (block_b[3] * 2 + block_b[0]) / 3;

		int ar = block_r[3] - block_r[0], ag = block_g[3] - block_g[0], ab = block_b[3] - block_b[0];

		int dots[4];
		for (uint32_t i = 0; i < 4; i++)
			dots[i] = (int)block_r[i] * ar + (int)block_g[i] * ag + (int)block_b[i] * ab;

		int t0 = dots[0] + dots[1], t1 = dots[1] + dots[2], t2 = dots[2] + dots[3];

		ar *= 2; ag *= 2; ab *= 2;

		static const uint8_t s_sels[4] = { 3, 2, 1, 0 };

		for (uint32_t i = 0; i < 16; i += 4)
		{
			const int d0 = pSrc_pixels[i+0].r * ar + pSrc_pixels[i+0].g * ag + pSrc_pixels[i+0].b * ab;
			const int d1 = pSrc_pixels[i+1].r * ar + pSrc_pixels[i+1].g * ag + pSrc_pixels[i+1].b * ab;
			const int d2 = pSrc_pixels[i+2].r * ar + pSrc_pixels[i+2].g * ag + pSrc_pixels[i+2].b * ab;
			const int d3 = pSrc_pixels[i+3].r * ar + pSrc_pixels[i+3].g * ag + pSrc_pixels[i+3].b * ab;

			sels[i+0] = s_sels[(d0 <= t0) + (d0 < t1) + (d0 < t2)];
			sels[i+1] = s_sels[(d1 <= t0) + (d1 < t1) + (d1 < t2)];
			sels[i+2] = s_sels[(d2 <= t0) + (d2 < t1) + (d2 < t2)];
			sels[i+3] = s_sels[(d3 <= t0) + (d3 < t1) + (d3 < t2)];
		}
	}
	
	static inline uint64_t bc1_find_sels_3(const color32* pSrc_pixels, uint32_t lr, uint32_t lg, uint32_t lb, uint32_t hr, uint32_t hg, uint32_t hb, uint8_t sels[16])
	{
		uint32_t block_r[4], block_g[4], block_b[4];

		block_r[0] = (lr << 3) | (lr >> 2); block_g[0] = (lg << 2) | (lg >> 4);	block_b[0] = (lb << 3) | (lb >> 2);
		block_r[3] = (hr << 3) | (hr >> 2);	block_g[3] = (hg << 2) | (hg >> 4);	block_b[3] = (hb << 3) | (hb >> 2);
		block_r[1] = (block_r[0] * 2 + block_r[3]) / 3;	block_g[1] = (block_g[0] * 2 + block_g[3]) / 3;	block_b[1] = (block_b[0] * 2 + block_b[3]) / 3;
		block_r[2] = (block_r[3] * 2 + block_r[0]) / 3;	block_g[2] = (block_g[3] * 2 + block_g[0]) / 3;	block_b[2] = (block_b[3] * 2 + block_b[0]) / 3;

		int dr = block_r[3] - block_r[0], dg = block_g[3] - block_g[0], db = block_b[3] - block_b[0];

		const float f = 4.0f / (float)(squarei(dr) + squarei(dg) + squarei(db) + .00000125f);

		uint64_t total_err = 0;

		for (uint32_t i = 0; i < 16; i++)
		{
			const int r = pSrc_pixels[i].r;
			const int g = pSrc_pixels[i].g;
			const int b = pSrc_pixels[i].b;

			int sel = (int)((float)((r - (int)block_r[0]) * dr + (g - (int)block_g[0]) * dg + (b - (int)block_b[0]) * db) * f + .5f);
			sel = clampi(sel, 1, 3);

			uint32_t err0 = squarei((int)block_r[sel - 1] - (int)r) + squarei((int)block_g[sel - 1] - (int)g) + squarei((int)block_b[sel - 1] - (int)b);
			uint32_t err1 = squarei((int)block_r[sel] - (int)r) + squarei((int)block_g[sel] - (int)g) + squarei((int)block_b[sel] - (int)b);
						
			int best_sel = sel;
			uint32_t best_err = err1;
			if (err0 == err1)
			{
				// Prefer non-interpolation
				if ((best_sel - 1) == 0)
					best_sel = 0;
			}
			else if (err0 < best_err)
			{
				best_sel = sel - 1;
				best_err = err0;
			}
			total_err += best_err;
			sels[i] = (uint8_t)best_sel;
		}
		return total_err;
	}

	void encode_bc1(void* pDst, const uint8_t* pPixels, uint32_t flags, uint32_t total_orderings_to_try)
	{
		assert(g_initialized);

		const color32* pSrc_pixels = (const color32*)pPixels;
		bc1_block* pDst_block = static_cast<bc1_block*>(pDst);

		int avg_r, avg_g, avg_b, min_r, min_g, min_b, max_r, max_g, max_b;
		int lr = 0, lg = 0, lb = 0, hr = 0, hg = 0, hb = 0;
		
		uint8_t sels[16];

		const uint32_t fr = pSrc_pixels[0].r, fg = pSrc_pixels[0].g, fb = pSrc_pixels[0].b;

		uint32_t j;
		for (j = 1; j < 16; j++)
			if ((pSrc_pixels[j].r != fr) || (pSrc_pixels[j].g != fg) || (pSrc_pixels[j].b != fb))
				break;

		if (j == 16)
		{
			encode_bc1_solid_block(pDst, fr, fg, fb);
			return;
		}

		// Select 2 colors along the principle axis. (There must be a faster/simpler way.)
		int total_r = fr, total_g = fg, total_b = fb;
		max_r = fr, max_g = fg, max_b = fb;
		min_r = fr, min_g = fg, min_b = fb;
		uint32_t grayscale_flag = (fr == fg) && (fr == fb);
		for (uint32_t i = 1; i < 16; i++)
		{
			const int r = pSrc_pixels[i].r, g = pSrc_pixels[i].g, b = pSrc_pixels[i].b;
			grayscale_flag &= ((r == g) && (r == b));
			max_r = std::max(max_r, r); max_g = std::max(max_g, g); max_b = std::max(max_b, b);
			min_r = std::min(min_r, r); min_g = std::min(min_g, g); min_b = std::min(min_b, b);
			total_r += r; total_g += g; total_b += b;
		}
			
		avg_r = (total_r + 8) >> 4, avg_g = (total_g + 8) >> 4, avg_b = (total_b + 8) >> 4;
		
		if (grayscale_flag) 
		{
			// Grayscale blocks are a common enough case to specialize.
			if ((max_r - min_r) < 2)
			{
				lr = lb = hr = hb = to_5(fr);
				lg = hg = to_6(fr);
			}
			else
			{
				lr = lb = to_5(min_r);
				lg = to_6(min_r);

				hr = hb = to_5(max_r);
				hg = to_6(max_r);
			}
		}
		else
		{
			// Find the shortest vector from a AABB corner to the block's average color.
			// This is to help avoid outliers.
			uint32_t low_c = 0, high_c = 0;

			if (flags & cEncodeBC1UsePCA)
			{
				int icov[6] = { 0, 0, 0, 0, 0, 0 };
				for (uint32_t i = 0; i < 16; i++)
				{
					int r = (int)pSrc_pixels[i].r - avg_r;
					int g = (int)pSrc_pixels[i].g - avg_g;
					int b = (int)pSrc_pixels[i].b - avg_b;
					icov[0] += r * r;
					icov[1] += r * g;
					icov[2] += r * b;
					icov[3] += g * g;
					icov[4] += g * b;
					icov[5] += b * b;
				}

				float cov[6];
				for (uint32_t i = 0; i < 6; i++)
					cov[i] = static_cast<float>(icov[i])* (1.0f / 255.0f);
			
				float xr = (float)(max_r - min_r);
				float xg = (float)(max_g - min_g);
				float xb = (float)(max_b - min_b);
				for (uint32_t power_iter = 0; power_iter < 4; power_iter++)
				{
					float r = xr * cov[0] + xg * cov[1] + xb * cov[2];
					float g = xr * cov[1] + xg * cov[3] + xb * cov[4];
					float b = xr * cov[2] + xg * cov[4] + xb * cov[5];
					xr = r; xg = g; xb = b;
				}

				float k = maximum(fabsf(xr), fabsf(xg), fabsf(xb));
				int saxis_r = 306, saxis_g = 601, saxis_b = 117;
				if (k >= 2)
				{
					float m = 1024.0f / k;
					saxis_r = (int)(xr * m);
					saxis_g = (int)(xg * m);
					saxis_b = (int)(xb * m);
				}
			
				int low_dot = INT_MAX, high_dot = INT_MIN;
				for (uint32_t i = 0; i < 16; i++)
				{
					int dot = pSrc_pixels[i].r * saxis_r + pSrc_pixels[i].g * saxis_g + pSrc_pixels[i].b * saxis_b;
					if (dot < low_dot)
					{
						low_dot = dot;
						low_c = i;
					}
					if (dot > high_dot)
					{
						high_dot = dot;
						high_c = i;
					}
				}
			}
			else
			{
				uint32_t dist[3][2];
				dist[0][0] = square(min_r - avg_r) << 3; dist[0][1] = square(max_r - avg_r) << 3;
				dist[1][0] = square(min_g - avg_g) << 3; dist[1][1] = square(max_g - avg_g) << 3;
				dist[2][0] = square(min_b - avg_b) << 3; dist[2][1] = square(max_b - avg_b) << 3;

				uint32_t min_d0 = (dist[0][0] + dist[1][0] + dist[2][0]);
				uint32_t d4 = (dist[0][0] + dist[1][0] + dist[2][1]) | 4;
				min_d0 = std::min(min_d0, d4);

				uint32_t min_d1 = (dist[0][1] + dist[1][0] + dist[2][0]) | 1;
				uint32_t d5 = (dist[0][1] + dist[1][0] + dist[2][1]) | 5;
				min_d1 = std::min(min_d1, d5);

				uint32_t d2 = (dist[0][0] + dist[1][1] + dist[2][0]) | 2;
				min_d0 = std::min(min_d0, d2);

				uint32_t d3 = (dist[0][1] + dist[1][1] + dist[2][0]) | 3;
				min_d1 = std::min(min_d1, d3);

				uint32_t d6 = (dist[0][0] + dist[1][1] + dist[2][1]) | 6;
				min_d0 = std::min(min_d0, d6);

				uint32_t d7 = (dist[0][1] + dist[1][1] + dist[2][1]) | 7;
				min_d1 = std::min(min_d1, d7);

				uint32_t min_d = std::min(min_d0, min_d1);
				uint32_t best_i = min_d & 7;

				int delta_r = (best_i & 1) ? (max_r - avg_r) : (avg_r - min_r);
				int delta_g = (best_i & 2) ? (max_g - avg_g) : (avg_g - min_g);
				int delta_b = (best_i & 4) ? (max_b - avg_b) : (avg_b - min_b);

				// Note: if delta_r/g/b==0, we actually want to choose a single color, so the block average color optimization kicks in.
				if ((delta_r | delta_g | delta_b) != 0)
				{
					// Now we have a smaller AABB going from the block's average color to a cornerpoint of the larger AABB.
					// Project all pixels colors along the 4 vectors going from a smaller AABB cornerpoint to the opposite cornerpoint, find largest projection.
					// One of these vectors will be a decent approximation of the block's PCA.
					const int saxis0_r = delta_r, saxis0_g = delta_g, saxis0_b = delta_b;

					int low_dot0 = INT_MAX, high_dot0 = INT_MIN;
					int low_dot1 = INT_MAX, high_dot1 = INT_MIN;
					int low_dot2 = INT_MAX, high_dot2 = INT_MIN;
					int low_dot3 = INT_MAX, high_dot3 = INT_MIN;

					//int low_c0, low_c1, low_c2, low_c3;
					//int high_c0, high_c1, high_c2, high_c3;

					for (uint32_t i = 0; i < 16; i++)
					{
						const int dotx = pSrc_pixels[i].r * saxis0_r;
						const int doty = pSrc_pixels[i].g * saxis0_g;
						const int dotz = pSrc_pixels[i].b * saxis0_b;

						const int dot0 = ((dotz + dotx + doty) << 4) + i;
						const int dot1 = ((dotz - dotx - doty) << 4) + i;
						const int dot2 = ((dotz - dotx + doty) << 4) + i;
						const int dot3 = ((dotz + dotx - doty) << 4) + i;

						if (dot0 < low_dot0)
							low_dot0 = dot0;
						if ((dot0 ^ 15) > high_dot0)
							high_dot0 = dot0 ^ 15;

						if (dot1 < low_dot1)
							low_dot1 = dot1;
						if ((dot1 ^ 15) > high_dot1)
							high_dot1 = dot1 ^ 15;

						if (dot2 < low_dot2)
							low_dot2 = dot2;
						if ((dot2 ^ 15) > high_dot2)
							high_dot2 = dot2 ^ 15;

						if (dot3 < low_dot3)
							low_dot3 = dot3;
						if ((dot3 ^ 15) > high_dot3)
							high_dot3 = dot3 ^ 15;
					}

					low_c = low_dot0 & 15, high_c = ~high_dot0 & 15;
					uint32_t r = (high_dot0 & ~15) - (low_dot0 & ~15);

					uint32_t tr = (high_dot1 & ~15) - (low_dot1 & ~15);
					if (tr > r)
						low_c = low_dot1 & 15, high_c = ~high_dot1 & 15, r = tr;

					tr = (high_dot2 & ~15) - (low_dot2 & ~15);
					if (tr > r)
						low_c = low_dot2 & 15, high_c = ~high_dot2 & 15, r = tr;

					tr = (high_dot3 & ~15) - (low_dot3 & ~15);
					if (tr > r)
						low_c = low_dot3 & 15, high_c = ~high_dot3 & 15;
				}
			}

			lr = to_5(pSrc_pixels[low_c].r);
			lg = to_6(pSrc_pixels[low_c].g);
			lb = to_5(pSrc_pixels[low_c].b);

			hr = to_5(pSrc_pixels[high_c].r);
			hg = to_6(pSrc_pixels[high_c].g);
			hb = to_5(pSrc_pixels[high_c].b);
		}
				
		uint64_t cur_err = 0;
		
		if (flags & cEncodeBC1UseLikelyTotalOrderings)
			cur_err = bc1_find_sels_3(pSrc_pixels, lr, lg, lb, hr, hg, hb, sels);
		else
			bc1_find_sels_2(pSrc_pixels, lr, lg, lb, hr, hg, hb, sels);
						
		const uint32_t total_ls_passes = flags & cEncodeBC1HighQuality ? 2 : 1;
		for (uint32_t ls_pass = 0; ls_pass < total_ls_passes; ls_pass++)
		{
			int trial_lr, trial_lg, trial_lb, trial_hr, trial_hg, trial_hb;

			// This is where the real magic happens. We have an array of candidate selectors, so let's use least squares to compute the optimal low/high endpoint colors.
			vec3F xl, xh;
			if (!compute_least_squares_endpoints_rgb2(pSrc_pixels, sels, &xl, &xh, min_r, max_r, min_g, max_g, min_b, max_b))
			{
				// All selectors equal - treat it as a solid block which should always be equal or better.
				trial_lr = g_bc1_match5_equals_1[avg_r].m_hi;
				trial_lg = g_bc1_match6_equals_1[avg_g].m_hi;
				trial_lb = g_bc1_match5_equals_1[avg_b].m_hi;

				trial_hr = g_bc1_match5_equals_1[avg_r].m_lo;
				trial_hg = g_bc1_match6_equals_1[avg_g].m_lo;
				trial_hb = g_bc1_match5_equals_1[avg_b].m_lo;

				// In high/higher quality mode, let it try again in case the optimal tables have caused the sels to diverge.
			}
			else
			{
				trial_lr = (int)(xl.c[0] * 31.0f); assert(trial_lr >= 0 && trial_lr <= 31);
				trial_lg = (int)(xl.c[1] * 63.0f); assert(trial_lg >= 0 && trial_lg <= 63);
				trial_lb = (int)(xl.c[2] * 31.0f); assert(trial_lb >= 0 && trial_lb <= 31);

				trial_lr += xl.c[0] > g_midpoint5[trial_lr];
				trial_lg += xl.c[1] > g_midpoint6[trial_lg];
				trial_lb += xl.c[2] > g_midpoint5[trial_lb];

				trial_hr = (int)(xh.c[0] * 31.0f); assert(trial_hr >= 0 && trial_hr <= 31);
				trial_hg = (int)(xh.c[1] * 63.0f); assert(trial_hg >= 0 && trial_hg <= 63);
				trial_hb = (int)(xh.c[2] * 31.0f); assert(trial_hb >= 0 && trial_hb <= 31);

				trial_hr += xh.c[0] > g_midpoint5[trial_hr];
				trial_hg += xh.c[1] > g_midpoint6[trial_hg];
				trial_hb += xh.c[2] > g_midpoint5[trial_hb];
								
				assert(trial_lr >= 0 && trial_lr <= 31);
				assert(trial_lg >= 0 && trial_lg <= 63);
				assert(trial_lb >= 0 && trial_lb <= 31);

				assert(trial_hr >= 0 && trial_hr <= 31);
				assert(trial_hg >= 0 && trial_hg <= 63);
				assert(trial_hb >= 0 && trial_hb <= 31);
			}

			if ((lr == trial_lr) && (lg == trial_lg) && (lb == trial_lb) && (hr == trial_hr) && (hg == trial_hg) && (hb == trial_hb))
				break;

			if (flags & cEncodeBC1UseLikelyTotalOrderings)
			{
				uint8_t trial_sels[16];
				uint64_t trial_err = bc1_find_sels_3(pSrc_pixels, trial_lr, trial_lg, trial_lb, trial_hr, trial_hg, trial_hb, trial_sels);
				if (trial_err < cur_err)
				{
					lr = trial_lr;
					lg = trial_lg;
					lb = trial_lb;

					hr = trial_hr;
					hg = trial_hg;
					hb = trial_hb;

					cur_err = trial_err;
					memcpy(sels, trial_sels, 16);
				}
				else
					break;
			}
			else
			{
				bc1_find_sels_2(pSrc_pixels, trial_lr, trial_lg, trial_lb, trial_hr, trial_hg, trial_hb, sels);

				lr = trial_lr;
				lg = trial_lg;
				lb = trial_lb;

				hr = trial_hr;
				hg = trial_hg;
				hb = trial_hb;
			}
		}

		// uses
		if ((cur_err) && (flags & cEncodeBC1UseLikelyTotalOrderings))
		{
			hist h;
			for (uint32_t i = 0; i < 16; i++)
				h.m_hist[sels[i]]++;

			const uint32_t orig_total_order_index = h.lookup_total_ordering_index();

			int r0, g0, b0, r3, g3, b3;
			r0 = (lr << 3) | (lr >> 2); g0 = (lg << 2) | (lg >> 4); b0 = (lb << 3) | (lb >> 2);
			r3 = (hr << 3) | (hr >> 2); g3 = (hg << 2) | (hg >> 4); b3 = (hb << 3) | (hb >> 2);
										
			int ar = r3 - r0, ag = g3 - g0, ab = b3 - b0;
				
			int dots[16];
			for (uint32_t i = 0; i < 16; i++)
			{
				int r = pSrc_pixels[i].r;
				int g = pSrc_pixels[i].g;
				int b = pSrc_pixels[i].b;
				int d = 0x1000000 + (r * ar + g * ag + b * ab);
				assert(d >= 0);
				dots[i] = (d << 4) + i;
			}

			std::sort(dots, dots + 16);

#if 0
			// Try them all, for debugging.
			for (uint32_t s = 0; s < NUM_UNIQUE_TOTAL_ORDERINGS16; s++)
			{
#else
			total_orderings_to_try = clampi(total_orderings_to_try, MIN_TOTAL_ORDERINGS, MAX_TOTAL_ORDERINGS);
			for (uint32_t q = 0; q < total_orderings_to_try; q++)
			{
				const uint32_t s = g_best_total_orderings[orig_total_order_index][q];
#endif
								
				uint8_t new_sels[16];
				uint32_t t = 0;
				for (uint32_t i = 0; i < 4; i++)
				{
					for (uint32_t k = 0; k < g_unique_total_orders[s][i]; k++)
					{
						new_sels[dots[t++] & 15] = (uint8_t)i;
					}
				}

				assert(t == 16);

				int trial_lr, trial_lg, trial_lb, trial_hr, trial_hg, trial_hb;

				vec3F xl, xh;
				if (!compute_least_squares_endpoints_rgb2(pSrc_pixels, new_sels, &xl, &xh, min_r, max_r, min_g, max_g, min_b, max_b))
				{
					// All selectors equal - treat it as a solid block which should always be equal or better.
					trial_lr = g_bc1_match5_equals_1[avg_r].m_hi;
					trial_lg = g_bc1_match6_equals_1[avg_g].m_hi;
					trial_lb = g_bc1_match5_equals_1[avg_b].m_hi;

					trial_hr = g_bc1_match5_equals_1[avg_r].m_lo;
					trial_hg = g_bc1_match6_equals_1[avg_g].m_lo;
					trial_hb = g_bc1_match5_equals_1[avg_b].m_lo;
				}
				else
				{
					trial_lr = (int)(xl.c[0] * 31.0f); assert(trial_lr >= 0 && trial_lr <= 31);
					trial_lg = (int)(xl.c[1] * 63.0f); assert(trial_lg >= 0 && trial_lg <= 63);
					trial_lb = (int)(xl.c[2] * 31.0f); assert(trial_lb >= 0 && trial_lb <= 31);

					trial_lr += xl.c[0] > g_midpoint5[trial_lr];
					trial_lg += xl.c[1] > g_midpoint6[trial_lg];
					trial_lb += xl.c[2] > g_midpoint5[trial_lb];

					trial_hr = (int)(xh.c[0] * 31.0f); assert(trial_hr >= 0 && trial_hr <= 31);
					trial_hg = (int)(xh.c[1] * 63.0f); assert(trial_hg >= 0 && trial_hg <= 63);
					trial_hb = (int)(xh.c[2] * 31.0f); assert(trial_hb >= 0 && trial_hb <= 31);

					trial_hr += xh.c[0] > g_midpoint5[trial_hr];
					trial_hg += xh.c[1] > g_midpoint6[trial_hg];
					trial_hb += xh.c[2] > g_midpoint5[trial_hb];
								
					assert(trial_lr >= 0 && trial_lr <= 31);
					assert(trial_lg >= 0 && trial_lg <= 63);
					assert(trial_lb >= 0 && trial_lb <= 31);

					assert(trial_hr >= 0 && trial_hr <= 31);
					assert(trial_hg >= 0 && trial_hg <= 63);
					assert(trial_hb >= 0 && trial_hb <= 31);
				}

				uint8_t trial_sels[16];
				uint64_t trial_err = bc1_find_sels_3(pSrc_pixels, trial_lr, trial_lg, trial_lb, trial_hr, trial_hg, trial_hb, trial_sels);
				if (trial_err < cur_err)
				{
					cur_err = trial_err;

					lr = trial_lr;
					lg = trial_lg;
					lb = trial_lb;

					hr = trial_hr;
					hg = trial_hg;
					hb = trial_hb;

					memcpy(sels, trial_sels, 16);
				}

			} // s

		}

		uint32_t lc16 = bc1_block::pack_unscaled_color(lr, lg, lb);
		uint32_t hc16 = bc1_block::pack_unscaled_color(hr, hg, hb);

		// Always forbid 3 color blocks
		if (lc16 == hc16)
		{
			uint8_t mask = 0;

			// Make l > h
			if (hc16 > 0)
				hc16--;
			else
			{
				// lc16 = hc16 = 0
				assert(lc16 == hc16 && hc16 == 0);

				hc16 = 0;
				lc16 = 1;
				mask = 0x55; // select hc16
			}

			assert(lc16 > hc16);
			pDst_block->set_low_color(static_cast<uint16_t>(lc16));
			pDst_block->set_high_color(static_cast<uint16_t>(hc16));

			pDst_block->m_selectors[0] = mask;
			pDst_block->m_selectors[1] = mask;
			pDst_block->m_selectors[2] = mask;
			pDst_block->m_selectors[3] = mask;
		}
		else
		{
			uint8_t invert_mask = 0;
			if (lc16 < hc16)
			{
				std::swap(lc16, hc16);
				invert_mask = 0x55;
			}

			assert(lc16 > hc16);
			pDst_block->set_low_color((uint16_t)lc16);
			pDst_block->set_high_color((uint16_t)hc16);

			uint32_t packed_sels = 0;
			static const uint8_t s_sel_trans[4] = { 0, 2, 3, 1 };
			for (uint32_t i = 0; i < 16; i++)
				packed_sels |= ((uint32_t)s_sel_trans[sels[i]] << (i * 2));

			pDst_block->m_selectors[0] = (uint8_t)packed_sels ^ invert_mask;
			pDst_block->m_selectors[1] = (uint8_t)(packed_sels >> 8) ^ invert_mask;
			pDst_block->m_selectors[2] = (uint8_t)(packed_sels >> 16) ^ invert_mask;
			pDst_block->m_selectors[3] = (uint8_t)(packed_sels >> 24) ^ invert_mask;
		}
	}

	// BC3-5

	struct bc4_block
	{
		enum { cBC4SelectorBits = 3, cTotalSelectorBytes = 6, cMaxSelectorValues = 8 };
		uint8_t m_endpoints[2];

		uint8_t m_selectors[cTotalSelectorBytes];

		inline uint32_t get_low_alpha() const { return m_endpoints[0]; }
		inline uint32_t get_high_alpha() const { return m_endpoints[1]; }
		inline bool is_alpha6_block() const { return get_low_alpha() <= get_high_alpha(); }

		inline uint64_t get_selector_bits() const
		{
			return ((uint64_t)((uint32_t)m_selectors[0] | ((uint32_t)m_selectors[1] << 8U) | ((uint32_t)m_selectors[2] << 16U) | ((uint32_t)m_selectors[3] << 24U))) |
				(((uint64_t)m_selectors[4]) << 32U) |
				(((uint64_t)m_selectors[5]) << 40U);
		}

		inline uint32_t get_selector(uint32_t x, uint32_t y, uint64_t selector_bits) const
		{
			assert((x < 4U) && (y < 4U));
			return (selector_bits >> (((y * 4) + x) * cBC4SelectorBits))& (cMaxSelectorValues - 1);
		}

		static inline uint32_t get_block_values6(uint8_t* pDst, uint32_t l, uint32_t h)
		{
			pDst[0] = static_cast<uint8_t>(l);
			pDst[1] = static_cast<uint8_t>(h);
			pDst[2] = static_cast<uint8_t>((l * 4 + h) / 5);
			pDst[3] = static_cast<uint8_t>((l * 3 + h * 2) / 5);
			pDst[4] = static_cast<uint8_t>((l * 2 + h * 3) / 5);
			pDst[5] = static_cast<uint8_t>((l + h * 4) / 5);
			pDst[6] = 0;
			pDst[7] = 255;
			return 6;
		}

		static inline uint32_t get_block_values8(uint8_t* pDst, uint32_t l, uint32_t h)
		{
			pDst[0] = static_cast<uint8_t>(l);
			pDst[1] = static_cast<uint8_t>(h);
			pDst[2] = static_cast<uint8_t>((l * 6 + h) / 7);
			pDst[3] = static_cast<uint8_t>((l * 5 + h * 2) / 7);
			pDst[4] = static_cast<uint8_t>((l * 4 + h * 3) / 7);
			pDst[5] = static_cast<uint8_t>((l * 3 + h * 4) / 7);
			pDst[6] = static_cast<uint8_t>((l * 2 + h * 5) / 7);
			pDst[7] = static_cast<uint8_t>((l + h * 6) / 7);
			return 8;
		}

		static inline uint32_t get_block_values(uint8_t* pDst, uint32_t l, uint32_t h)
		{
			if (l > h)
				return get_block_values8(pDst, l, h);
			else
				return get_block_values6(pDst, l, h);
		}
	};

	void encode_bc4(void* pDst, const uint8_t* pPixels, uint32_t stride)
	{
		assert(g_initialized);

		uint32_t min0_v, max0_v, min1_v, max1_v, min2_v, max2_v, min3_v, max3_v;

		{
			min0_v = max0_v = pPixels[0 * stride];
			min1_v = max1_v = pPixels[1 * stride];
			min2_v = max2_v = pPixels[2 * stride];
			min3_v = max3_v = pPixels[3 * stride];
		}

		{
			uint32_t v0 = pPixels[4 * stride]; min0_v = std::min(min0_v, v0); max0_v = std::max(max0_v, v0);
			uint32_t v1 = pPixels[5 * stride]; min1_v = std::min(min1_v, v1); max1_v = std::max(max1_v, v1);
			uint32_t v2 = pPixels[6 * stride]; min2_v = std::min(min2_v, v2); max2_v = std::max(max2_v, v2);
			uint32_t v3 = pPixels[7 * stride]; min3_v = std::min(min3_v, v3); max3_v = std::max(max3_v, v3);
		}

		{
			uint32_t v0 = pPixels[8 * stride]; min0_v = std::min(min0_v, v0); max0_v = std::max(max0_v, v0);
			uint32_t v1 = pPixels[9 * stride]; min1_v = std::min(min1_v, v1); max1_v = std::max(max1_v, v1);
			uint32_t v2 = pPixels[10 * stride]; min2_v = std::min(min2_v, v2); max2_v = std::max(max2_v, v2);
			uint32_t v3 = pPixels[11 * stride]; min3_v = std::min(min3_v, v3); max3_v = std::max(max3_v, v3);
		}

		{
			uint32_t v0 = pPixels[12 * stride]; min0_v = std::min(min0_v, v0); max0_v = std::max(max0_v, v0);
			uint32_t v1 = pPixels[13 * stride]; min1_v = std::min(min1_v, v1); max1_v = std::max(max1_v, v1);
			uint32_t v2 = pPixels[14 * stride]; min2_v = std::min(min2_v, v2); max2_v = std::max(max2_v, v2);
			uint32_t v3 = pPixels[15 * stride]; min3_v = std::min(min3_v, v3); max3_v = std::max(max3_v, v3);
		}

		const uint32_t min_v = minimum(min0_v, min1_v, min2_v, min3_v);
		const uint32_t max_v = maximum(max0_v, max1_v, max2_v, max3_v);

		uint8_t* pDst_bytes = static_cast<uint8_t*>(pDst);
		pDst_bytes[0] = (uint8_t)max_v;
		pDst_bytes[1] = (uint8_t)min_v;

		if (max_v == min_v)
		{
			memset(pDst_bytes + 2, 0, 6);
			return;
		}

		const uint32_t delta = max_v - min_v;

		// min_v is now 0. Compute thresholds between values by scaling max_v. It's x14 because we're adding two x7 scale factors.
		const int t0 = delta * 13;
		const int t1 = delta * 11;
		const int t2 = delta * 9;
		const int t3 = delta * 7;
		const int t4 = delta * 5;
		const int t5 = delta * 3;
		const int t6 = delta * 1;

		// BC4 floors in its divisions, which we compensate for with the 4 bias.
		// This function is optimal for all possible inputs (i.e. it outputs the same results as checking all 8 values and choosing the closest one).
		const int bias = 4 - min_v * 14;

		static const uint32_t s_tran0[8] = { 1U      , 7U      , 6U      , 5U      , 4U      , 3U      , 2U      , 0U };
		static const uint32_t s_tran1[8] = { 1U << 3U, 7U << 3U, 6U << 3U, 5U << 3U, 4U << 3U, 3U << 3U, 2U << 3U, 0U << 3U };
		static const uint32_t s_tran2[8] = { 1U << 6U, 7U << 6U, 6U << 6U, 5U << 6U, 4U << 6U, 3U << 6U, 2U << 6U, 0U << 6U };
		static const uint32_t s_tran3[8] = { 1U << 9U, 7U << 9U, 6U << 9U, 5U << 9U, 4U << 9U, 3U << 9U, 2U << 9U, 0U << 9U };

		uint64_t a0, a1, a2, a3;
		{
			const int v0 = pPixels[0 * stride] * 14 + bias;
			const int v1 = pPixels[1 * stride] * 14 + bias;
			const int v2 = pPixels[2 * stride] * 14 + bias;
			const int v3 = pPixels[3 * stride] * 14 + bias;
			a0 = s_tran0[(v0 >= t0) + (v0 >= t1) + (v0 >= t2) + (v0 >= t3) + (v0 >= t4) + (v0 >= t5) + (v0 >= t6)];
			a1 = s_tran1[(v1 >= t0) + (v1 >= t1) + (v1 >= t2) + (v1 >= t3) + (v1 >= t4) + (v1 >= t5) + (v1 >= t6)];
			a2 = s_tran2[(v2 >= t0) + (v2 >= t1) + (v2 >= t2) + (v2 >= t3) + (v2 >= t4) + (v2 >= t5) + (v2 >= t6)];
			a3 = s_tran3[(v3 >= t0) + (v3 >= t1) + (v3 >= t2) + (v3 >= t3) + (v3 >= t4) + (v3 >= t5) + (v3 >= t6)];
		}

		{
			const int v0 = pPixels[4 * stride] * 14 + bias;
			const int v1 = pPixels[5 * stride] * 14 + bias;
			const int v2 = pPixels[6 * stride] * 14 + bias;
			const int v3 = pPixels[7 * stride] * 14 + bias;
			a0 |= (s_tran0[(v0 >= t0) + (v0 >= t1) + (v0 >= t2) + (v0 >= t3) + (v0 >= t4) + (v0 >= t5) + (v0 >= t6)] << 12U);
			a1 |= (s_tran1[(v1 >= t0) + (v1 >= t1) + (v1 >= t2) + (v1 >= t3) + (v1 >= t4) + (v1 >= t5) + (v1 >= t6)] << 12U);
			a2 |= (s_tran2[(v2 >= t0) + (v2 >= t1) + (v2 >= t2) + (v2 >= t3) + (v2 >= t4) + (v2 >= t5) + (v2 >= t6)] << 12U);
			a3 |= (s_tran3[(v3 >= t0) + (v3 >= t1) + (v3 >= t2) + (v3 >= t3) + (v3 >= t4) + (v3 >= t5) + (v3 >= t6)] << 12U);
		}

		{
			const int v0 = pPixels[8 * stride] * 14 + bias;
			const int v1 = pPixels[9 * stride] * 14 + bias;
			const int v2 = pPixels[10 * stride] * 14 + bias;
			const int v3 = pPixels[11 * stride] * 14 + bias;
			a0 |= (((uint64_t)s_tran0[(v0 >= t0) + (v0 >= t1) + (v0 >= t2) + (v0 >= t3) + (v0 >= t4) + (v0 >= t5) + (v0 >= t6)]) << 24U);
			a1 |= (((uint64_t)s_tran1[(v1 >= t0) + (v1 >= t1) + (v1 >= t2) + (v1 >= t3) + (v1 >= t4) + (v1 >= t5) + (v1 >= t6)]) << 24U);
			a2 |= (((uint64_t)s_tran2[(v2 >= t0) + (v2 >= t1) + (v2 >= t2) + (v2 >= t3) + (v2 >= t4) + (v2 >= t5) + (v2 >= t6)]) << 24U);
			a3 |= (((uint64_t)s_tran3[(v3 >= t0) + (v3 >= t1) + (v3 >= t2) + (v3 >= t3) + (v3 >= t4) + (v3 >= t5) + (v3 >= t6)]) << 24U);
		}

		{
			const int v0 = pPixels[12 * stride] * 14 + bias;
			const int v1 = pPixels[13 * stride] * 14 + bias;
			const int v2 = pPixels[14 * stride] * 14 + bias;
			const int v3 = pPixels[15 * stride] * 14 + bias;
			a0 |= (((uint64_t)s_tran0[(v0 >= t0) + (v0 >= t1) + (v0 >= t2) + (v0 >= t3) + (v0 >= t4) + (v0 >= t5) + (v0 >= t6)]) << 36U);
			a1 |= (((uint64_t)s_tran1[(v1 >= t0) + (v1 >= t1) + (v1 >= t2) + (v1 >= t3) + (v1 >= t4) + (v1 >= t5) + (v1 >= t6)]) << 36U);
			a2 |= (((uint64_t)s_tran2[(v2 >= t0) + (v2 >= t1) + (v2 >= t2) + (v2 >= t3) + (v2 >= t4) + (v2 >= t5) + (v2 >= t6)]) << 36U);
			a3 |= (((uint64_t)s_tran3[(v3 >= t0) + (v3 >= t1) + (v3 >= t2) + (v3 >= t3) + (v3 >= t4) + (v3 >= t5) + (v3 >= t6)]) << 36U);
		}

		const uint64_t f = a0 | a1 | a2 | a3;

		pDst_bytes[2] = (uint8_t)f;
		pDst_bytes[3] = (uint8_t)(f >> 8U);
		pDst_bytes[4] = (uint8_t)(f >> 16U);
		pDst_bytes[5] = (uint8_t)(f >> 24U);
		pDst_bytes[6] = (uint8_t)(f >> 32U);
		pDst_bytes[7] = (uint8_t)(f >> 40U);
	}

	void encode_bc3(void* pDst, const uint8_t* pPixels, uint32_t flags, uint32_t total_orderings_to_try)
	{
		assert(g_initialized);

		encode_bc4(pDst, pPixels + 3, 4);
		encode_bc1(static_cast<uint8_t*>(pDst) + 8, pPixels, flags, total_orderings_to_try);
	}

	void encode_bc5(void* pDst, const uint8_t* pPixels, uint32_t chan0, uint32_t chan1, uint32_t stride)
	{
		assert(g_initialized);

		encode_bc4(pDst, pPixels + chan0, stride);
		encode_bc4(static_cast<uint8_t*>(pDst) + 8, pPixels + chan1, stride);
	}

	// Returns true if the block uses 3 color punchthrough alpha mode.
	bool unpack_bc1(const void* pBlock_bits, void* pPixels, bool set_alpha)
	{
		color32* pDst_pixels = static_cast<color32*>(pPixels);

		static_assert(sizeof(bc1_block) == 8, "sizeof(bc1_block) == 8");
		static_assert(sizeof(bc4_block) == 8, "sizeof(bc4_block) == 8");

		const bc1_block* pBlock = static_cast<const bc1_block*>(pBlock_bits);

		const uint32_t l = pBlock->get_low_color();
		const uint32_t h = pBlock->get_high_color();

		color32 c[4];

		uint32_t r0, g0, b0, r1, g1, b1;
		bc1_block::unpack_color(l, r0, g0, b0);
		bc1_block::unpack_color(h, r1, g1, b1);

		bool used_punchthrough = false;

		if (l > h)
		{
			c[0].set_noclamp_rgba(r0, g0, b0, 255);
			c[1].set_noclamp_rgba(r1, g1, b1, 255);
			c[2].set_noclamp_rgba((r0 * 2 + r1) / 3, (g0 * 2 + g1) / 3, (b0 * 2 + b1) / 3, 255);
			c[3].set_noclamp_rgba((r1 * 2 + r0) / 3, (g1 * 2 + g0) / 3, (b1 * 2 + b0) / 3, 255);
		}
		else
		{
			c[0].set_noclamp_rgba(r0, g0, b0, 255);
			c[1].set_noclamp_rgba(r1, g1, b1, 255);
			c[2].set_noclamp_rgba((r0 + r1) / 2, (g0 + g1) / 2, (b0 + b1) / 2, 255);
			c[3].set_noclamp_rgba(0, 0, 0, 0);
			used_punchthrough = true;
		}

		if (set_alpha)
		{
			for (uint32_t y = 0; y < 4; y++, pDst_pixels += 4)
			{
				pDst_pixels[0] = c[pBlock->get_selector(0, y)];
				pDst_pixels[1] = c[pBlock->get_selector(1, y)];
				pDst_pixels[2] = c[pBlock->get_selector(2, y)];
				pDst_pixels[3] = c[pBlock->get_selector(3, y)];
			}
		}
		else
		{
			for (uint32_t y = 0; y < 4; y++, pDst_pixels += 4)
			{
				pDst_pixels[0].set_rgb(c[pBlock->get_selector(0, y)]);
				pDst_pixels[1].set_rgb(c[pBlock->get_selector(1, y)]);
				pDst_pixels[2].set_rgb(c[pBlock->get_selector(2, y)]);
				pDst_pixels[3].set_rgb(c[pBlock->get_selector(3, y)]);
			}
		}

		return used_punchthrough;
	}

	void unpack_bc4(const void* pBlock_bits, uint8_t* pPixels, uint32_t stride)
	{
		static_assert(sizeof(bc4_block) == 8, "sizeof(bc4_block) == 8");

		const bc4_block* pBlock = static_cast<const bc4_block*>(pBlock_bits);

		uint8_t sel_values[8];
		bc4_block::get_block_values(sel_values, pBlock->get_low_alpha(), pBlock->get_high_alpha());

		const uint64_t selector_bits = pBlock->get_selector_bits();

		for (uint32_t y = 0; y < 4; y++, pPixels += (stride * 4U))
		{
			pPixels[0] = sel_values[pBlock->get_selector(0, y, selector_bits)];
			pPixels[stride * 1] = sel_values[pBlock->get_selector(1, y, selector_bits)];
			pPixels[stride * 2] = sel_values[pBlock->get_selector(2, y, selector_bits)];
			pPixels[stride * 3] = sel_values[pBlock->get_selector(3, y, selector_bits)];
		}
	}

	// Returns false if the block uses 3-color punchthrough alpha mode, which isn't supported on some GPU's for BC3.
	bool unpack_bc3(const void* pBlock_bits, void* pPixels)
	{
		color32* pDst_pixels = static_cast<color32*>(pPixels);

		bool success = true;

		if (unpack_bc1((const uint8_t*)pBlock_bits + sizeof(bc4_block), pDst_pixels, true))
			success = false;

		unpack_bc4(pBlock_bits, &pDst_pixels[0].a, sizeof(color32));

		return success;
	}

	// writes RG
	void unpack_bc5(const void* pBlock_bits, void* pPixels, uint32_t chan0, uint32_t chan1, uint32_t stride)
	{
		unpack_bc4(pBlock_bits, (uint8_t *)pPixels + chan0, stride);
		unpack_bc4((const uint8_t*)pBlock_bits + sizeof(bc4_block), (uint8_t *)pPixels + chan1, stride);
	}

} // namespace rgbcx

#endif //#ifdef RGBCX_IMPLEMENTATION

/*
------------------------------------------------------------------------------
This software is available under 2 licenses -- choose whichever you prefer.
------------------------------------------------------------------------------
ALTERNATIVE A - MIT License
Copyright(c) 2020 Richard Geldreich, Jr.
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files(the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions :
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
------------------------------------------------------------------------------
ALTERNATIVE B - Public Domain(www.unlicense.org)
This is free and unencumbered software released into the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
software, either in source code form or as a compiled binary, for any purpose,
commercial or non - commercial, and by any means.
In jurisdictions that recognize copyright laws, the author or authors of this
software dedicate any and all copyright interest in the software to the public
domain.We make this dedication for the benefit of the public at large and to
the detriment of our heirs and successors.We intend this dedication to be an
overt act of relinquishment in perpetuity of all present and future rights to
this software under copyright law.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
------------------------------------------------------------------------------
*/

